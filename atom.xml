<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thomas Woo</title>
  
  <subtitle>Heavy is the head who wears the crown.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://smileorigin.site/"/>
  <updated>2020-06-20T07:41:19.183Z</updated>
  <id>http://smileorigin.site/</id>
  
  <author>
    <name>Thomas Woo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kodi</title>
    <link href="http://smileorigin.site/raspberry/kodi/"/>
    <id>http://smileorigin.site/raspberry/kodi/</id>
    <published>2020-01-18T14:00:00.000Z</published>
    <updated>2020-06-20T07:41:19.183Z</updated>
    
    <content type="html"><![CDATA[<p>Kodi媒体中心是一个屡获殊荣的自由和开源的跨平台媒体播放器和用于HTPC（Home theater PC，家庭影院PC）的数字媒体娱乐中心软件，可以运行在Linux、OSX、Windows、Android系统。它是一个优秀的自由和开源的（GPL）媒体中心软件</p><a id="more"></a><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p><a href="http://www.kodiplayer.cn/course/2902.html">http://www.kodiplayer.cn/course/2902.html</a><br><a href="https://beekc.top/2019/09/09/install-kodi-in-raspberry-pi/">https://beekc.top/2019/09/09/install-kodi-in-raspberry-pi/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install kodi kodi-pvr-iptvsimple</span><br></pre></td></tr></table></figure><p>iptvsimple 插件可以使 kodi 收看网络电视。在网络山可以下载到扒好的<a href="http://www.kodiplayer.cn/movie/2898.html">IPTV直播源</a>，在插件设置中打开直播源，就可以在 kodi 的主界面的电视中观看网络电视了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">kodi &amp;</span><br></pre></td></tr></table></figure><h2 id="开启-web-控制界面"><a href="#开启-web-控制界面" class="headerlink" title="开启 web 控制界面"></a>开启 web 控制界面</h2><p>在 web 界面下，可以使用<strong>上下左右</strong>和<strong>backspace</strong>键来控制<strong>kodi</strong>界面（即树莓派连接hdmi显示出来的界面，在没有鼠标键盘连接树莓派时很有用！！！）<br><code>vim .kodi/userdata/advancedsettings.xml</code> 添加下述内容，重启树莓派后在电脑浏览器登录树莓派ip地址加2233端口网址（例如：192.168.0.109:2233）就可以看到 kodi 的 web 控制界面了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;advancedsettings&gt;</span><br><span class="line">    &lt;services&gt;</span><br><span class="line">        &lt;webserver&gt;<span class="literal">true</span>&lt;/webserver&gt;</span><br><span class="line">        &lt;webserverpassword default=<span class="string">"true"</span>&gt;&lt;/webserverpassword&gt;</span><br><span class="line">        &lt;webserverport default=<span class="string">"true"</span>&gt;2233&lt;/webserverport&gt;</span><br><span class="line">        &lt;webserverusername default=<span class="string">"true"</span>&gt;kodiPI&lt;/webserverusername&gt;</span><br><span class="line">    &lt;/services&gt;</span><br><span class="line">&lt;/advancedsettings&gt;</span><br></pre></td></tr></table></figure><h2 id="蓝牙音箱"><a href="#蓝牙音箱" class="headerlink" title="蓝牙音箱"></a>蓝牙音箱</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade -y</span><br><span class="line">sudo apt-get dist-upgrade -y</span><br><span class="line">sudo apt-get install pi-bluetooth bluez bluez-firmware blueman</span><br><span class="line">sudo usermod -G bluetooth -a pi</span><br><span class="line">sudo reboot</span><br><span class="line"><span class="comment"># https://blog.csdn.net/xundh/article/details/90774157</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kodi媒体中心是一个屡获殊荣的自由和开源的跨平台媒体播放器和用于HTPC（Home theater PC，家庭影院PC）的数字媒体娱乐中心软件，可以运行在Linux、OSX、Windows、Android系统。它是一个优秀的自由和开源的（GPL）媒体中心软件&lt;/p&gt;
    
    </summary>
    
    
      <category term="Raspberry" scheme="http://smileorigin.site/categories/Raspberry/"/>
    
    
      <category term="Kodi" scheme="http://smileorigin.site/tags/Kodi/"/>
    
      <category term="Raspberry" scheme="http://smileorigin.site/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>Linux SSR</title>
    <link href="http://smileorigin.site/linux/ssr/"/>
    <id>http://smileorigin.site/linux/ssr/</id>
    <published>2018-12-21T04:59:00.000Z</published>
    <updated>2020-06-20T07:40:46.284Z</updated>
    
    <content type="html"><![CDATA[<p>因为一个需求，所以研究了下——<strong>Linux终端下如何使用SSR优雅的出国访问优质(恩……)的国外网站</strong>，本笔记的实验环境是<strong>Center OS</strong>，其他Linux发行版本类似</p><a id="more"></a><h2 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h2><h3 id="安装SSR"><a href="#安装SSR" class="headerlink" title="安装SSR"></a>安装SSR</h3><ol><li><p>作为懒癌患者首选GitHub上的<a href="https://github.com/the0demiurge/CharlesScripts/blob/master/charles/bin/ssr">CharlesScripts</a>项目的安装脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/the0demiurge/CharlesScripts/raw/master/charles/bin/ssr</span><br></pre></td></tr></table></figure></li><li><p>将该脚本移至<code>$PATH</code>环境变量包含的目录，如：<code>/usr/local/bin</code>；并修改文件权限为可执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv ssr /usr/<span class="built_in">local</span>/bin/ssr</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/ssr</span><br></pre></td></tr></table></figure></li><li><p>安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssr install</span><br></pre></td></tr></table></figure><p>执行命令后会自动安装到：<code>$HOME/.local/share/shadowsocksr</code></p></li></ol><h3 id="配置SSR"><a href="#配置SSR" class="headerlink" title="配置SSR"></a>配置SSR</h3><ol><li><p>使用命令：<code>ssr config</code>打开配置文件，按照以下类似配置保存即可</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>: <span class="string">"103.114.161.160"</span>, // 服务器ip</span><br><span class="line">    <span class="string">"server_ipv6"</span>: <span class="string">"::"</span>,</span><br><span class="line">    <span class="string">"server_port"</span>: 667,// 服务器端口</span><br><span class="line">    <span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>: 1080, // 本地端口，记住这个，后续Privoxy将代理这个端口</span><br><span class="line"></span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"ntdtv.com"</span>, // 服务器密码</span><br><span class="line">    <span class="string">"method"</span>: <span class="string">"AES-256-CFB"</span>, // 加密方式</span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"origin"</span>, // 加密协议</span><br><span class="line">    <span class="string">"protocol_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"obfs"</span>: <span class="string">"plain"</span>, // 混淆方式</span><br><span class="line">    <span class="string">"obfs_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"speed_limit_per_con"</span>: 0,</span><br><span class="line">    <span class="string">"speed_limit_per_user"</span>: 0,</span><br><span class="line"></span><br><span class="line">    <span class="string">"additional_ports"</span> : &#123;&#125;, // only works under multi-user mode</span><br><span class="line">    <span class="string">"additional_ports_only"</span> : <span class="literal">false</span>, // only works under multi-user mode</span><br><span class="line">    <span class="string">"timeout"</span>: 120,</span><br><span class="line">    <span class="string">"udp_timeout"</span>: 60,</span><br><span class="line">    <span class="string">"dns_ipv6"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"connect_verbose_info"</span>: 0,</span><br><span class="line">    <span class="string">"redirect"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 保存后，可看到自动提示的信息，输出如下类似内容就是配置成功了：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@sssssssss home]<span class="comment"># ssr config</span></span><br><span class="line">IPv6 not support</span><br><span class="line">2018-12-21 01:09:09 ERROR    shell.py:50 [Errno 2] No such file or directory: <span class="string">'/var/run/shadowsocksr.pid'</span></span><br><span class="line">2018-12-21 01:09:09 ERROR    daemon.py:146 not running</span><br><span class="line">IPv6 not support</span><br><span class="line">2018-12-21 01:09:09 INFO     util.py:85 loading libcrypto from libcrypto.so.10</span><br><span class="line">started</span><br><span class="line">Testing Connection...</span><br><span class="line">local_port is 1080; <span class="keyword">if</span> any exceptions orrured, please install jq</span><br><span class="line">connection information:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"ip"</span>: <span class="string">"103.114.161.160"</span>,</span><br><span class="line">  <span class="string">"city"</span>: <span class="string">"Suqian"</span>,</span><br><span class="line">  <span class="string">"region"</span>: <span class="string">"Jiangsu"</span>,</span><br><span class="line">  <span class="string">"country"</span>: <span class="string">"CN"</span>,</span><br><span class="line">  <span class="string">"loc"</span>: <span class="string">"33.9492,118.2960"</span>,</span><br><span class="line">  <span class="string">"postal"</span>: <span class="string">"223800"</span>,</span><br><span class="line">  <span class="string">"org"</span>: <span class="string">"AS40676 Psychz Networks"</span></span><br><span class="line">&#125;</span><br><span class="line">IP: 103.114.161.160</span><br><span class="line">地址: 美国  加利福尼亚州  洛杉矶</span><br><span class="line">运营商: hosteons.com</span><br><span class="line"></span><br><span class="line">数据二: 美国 | 新加坡HostEONS私人有限公司(美芝路5001号黄金坊04-01号)美国Psychz数据中心洛杉矶节点</span><br><span class="line"></span><br><span class="line">数据三: 美国加利福尼亚洛杉矶</span><br><span class="line"></span><br><span class="line">URL: http://www.cip.cc/103.114.161.160</span><br><span class="line">You may install proxychains4 and configure it properly to <span class="built_in">test</span> net delay</span><br></pre></td></tr></table></figure></li><li><p>常用命令</p><ul><li><code>ssr help</code><br>查看帮助信息</li><li><code>ssr start</code><br>启动ssr</li><li><code>ssr stop</code><br>关闭ssr</li><li><code>ssr restart</code><br>重启ssr</li><li><code>ssr uninstall</code><br>卸载ssr</li></ul></li></ol><h2 id="安装proxychins4"><a href="#安装proxychins4" class="headerlink" title="安装proxychins4"></a>安装proxychins4</h2><p>根据上一节末的提示信息(<code>You may install proxychains4 and configure it properly to test net delay</code>)可知没有安装<strong>proxychins4</strong>所以无法进行延迟测试</p><ol><li>克隆proxychins-ng<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rofl0r/proxychains-ng.git</span><br></pre></td></tr></table></figure></li><li>安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> proxychains-ng</span><br><span class="line">./configure --prefix=/usr --sysconfdir=/etc</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo make install-config</span><br></pre></td></tr></table></figure>输出信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@izuf6f5j6kravfwcn9kgtqz home]<span class="comment"># git clone https://github.com/rofl0r/proxychains-ng.git</span></span><br><span class="line">正克隆到 <span class="string">'proxychains-ng'</span>...</span><br><span class="line">remote: Enumerating objects: 17, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (17/17), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (17/17), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 1211 (delta 6), reused 4 (delta 0), pack-reused 1194</span><br><span class="line">接收对象中: 100% (1211/1211), 626.98 KiB | 58.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">处理 delta 中: 100% (788/788), <span class="keyword">done</span>.</span><br><span class="line">[root@izuf6f5j6kravfwcn9kgtqz home]<span class="comment"># cd proxychains-ng</span></span><br><span class="line">[root@izuf6f5j6kravfwcn9kgtqz proxychains-ng]<span class="comment"># ./configure --prefix=/usr --sysconfdir=/etc</span></span><br><span class="line">checking whether we have GNU-style getservbyname_r() ... yes</span><br><span class="line">checking whether <span class="variable">$CC</span> defines __APPLE__ ... no</span><br><span class="line">checking whether <span class="variable">$CC</span> defines __FreeBSD__ ... no</span><br><span class="line">checking whether <span class="variable">$CC</span> defines __OpenBSD__ ... no</span><br><span class="line">checking whether <span class="variable">$CC</span> defines __sun ... no</span><br><span class="line">checking whether we can use -Wl,--no-as-needed ... yes</span><br><span class="line">checking what<span class="string">'s the option to use in linker to set library name ... --soname</span></span><br><span class="line"><span class="string">Done, now run make &amp;&amp; make install</span></span><br><span class="line"><span class="string">[root@izuf6f5j6kravfwcn9kgtqz proxychains-ng]# make</span></span><br><span class="line"><span class="string">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/nameinfo.o src/nameinfo.c</span></span><br><span class="line"><span class="string">printf '</span><span class="comment">#define VERSION "%s"\n' "$(sh tools/version.sh)" &gt; src/version.h</span></span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/version.o src/version.c</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/core.o src/core.c</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/common.o src/common.c</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/libproxychains.o src/libproxychains.c</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/allocator_thread.o src/allocator_thread.c</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/ip_type.o src/ip_type.c</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/hostsreader.o src/hostsreader.c</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/hash.o src/hash.c</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/debug.o src/debug.c</span><br><span class="line">cc -fPIC -Wl,--no-as-needed -ldl -lpthread -Wl,--soname,libproxychains4.so  \</span><br><span class="line">-shared -o libproxychains4.so src/nameinfo.o src/version.o src/core.o src/common.o src/libproxychains.o src/allocator_thread.o src/ip_type.o src/hostsreader.o src/hash.o src/debug.o</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/main.o src/main.c</span><br><span class="line">cc src/main.o src/common.o  -o proxychains4</span><br><span class="line">[root@izuf6f5j6kravfwcn9kgtqz proxychains-ng]<span class="comment"># sudo make install</span></span><br><span class="line">./tools/install.sh -D -m 644 libproxychains4.so /usr/lib/libproxychains4.so</span><br><span class="line">./tools/install.sh -D -m 755 proxychains4 /usr/bin/proxychains4</span><br><span class="line">[root@izuf6f5j6kravfwcn9kgtqz proxychains-ng]<span class="comment"># sudo make install-config</span></span><br><span class="line">./tools/install.sh -D -m 644 src/proxychains.conf /etc/proxychains.conf</span><br></pre></td></tr></table></figure></li><li>修改配置文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/proxychains.conf</span><br></pre></td></tr></table></figure><strong>proxychains</strong>默认使用的是<strong>9050</strong>端口，而我们SSR配置中使用的是<strong>1080</strong>端口，所以要将配置文件最底部的<code>socks4  127.0.0.1 9050</code>改为<code>socks4  127.0.0.1 1080</code><br>安装完成后再次运行<code>ssr test</code>即可看到延迟测试信息了</li></ol><h2 id="Privoxy"><a href="#Privoxy" class="headerlink" title="Privoxy"></a>Privoxy</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>Center OS  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y privoxy</span><br></pre></td></tr></table></figure></li><li>Debian  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y privoxy</span><br></pre></td></tr></table></figure></li></ul><h3 id="PAC模式"><a href="#PAC模式" class="headerlink" title="PAC模式"></a>PAC模式</h3><p>进行全局代理会大大的影响我们访问国内地址，所以我们使用PAC模式来进行流量代理。根据GFWList(由AutoProxy官方维护)来判断哪些网站被我们的超级安全防御墙（超级ma fan的wall）挡在门外<br>这里我们使用<a href="https://www.zfl9.com/">@Otokaze</a> 的shell自动转换脚本来获取GFWList配置</p><ol><li>获取脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/SAMZONG/gfwlist2privoxy/raw/master/gfwlist2privoxy</span><br></pre></td></tr></table></figure></li><li>执行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash gfwlist2privoxy</span><br></pre></td></tr></table></figure>这里会提示需要输入ip地址及端口，输入你ssr配置的本地地址及端口即可，测试内容如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@izuf6f5j6kravfwcn9kgtqz ~]<span class="comment"># bash gfwlist2privoxy</span></span><br><span class="line">proxy(socks5): 127.0.0.1:1080</span><br><span class="line">&#123;+forward-override&#123;forward-socks5 127.0.0.1：1080 .&#125;&#125;</span><br><span class="line"></span><br><span class="line">=================================================================</span><br><span class="line"></span><br><span class="line"><span class="string">"cp -af /root/gfw.action /etc/privoxy/"</span></span><br></pre></td></tr></table></figure></li><li>后续操作<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -af gfw.action /etc/privoxy/</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'actionsfile gfw.action'</span> &gt;&gt; /etc/privoxy/config</span><br></pre></td></tr></table></figure></li><li>设置http、https监听的端口及不监听的端口，Privoxy 默认监听端口是是8118<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:8118</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:8118</span><br><span class="line"><span class="built_in">export</span> no_proxy=localhost</span><br></pre></td></tr></table></figure>只在本次连接会话有效，重新连接服务器后需要重新设置<br>永久有效配置方式：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>编辑<code>/etc/profile</code>（<strong>Debian</strong>则是修改<code>~/.bashrc</code>文件）文件，在文件末尾加上上面的3条export命令重新连接服务器即可</li><li>启动服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start privoxy.service</span><br></pre></td></tr></table></figure></li><li>测试<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.google.com</span><br></pre></td></tr></table></figure>能看到Google网页的源码就说明穿墙成功了</li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://github.com/the0demiurge/CharlesScripts/blob/master/charles/bin/ssr">https://github.com/the0demiurge/CharlesScripts/blob/master/charles/bin/ssr</a></li><li><a href="https://samzong.me/2017/11/17/howto-use-ssr-on-linux-terminal/">在Linux终端使用SSR服务实现科学上网</a></li><li><a href="https://blog.csdn.net/mingjie1212/article/details/51814421">Ubuntu 16.04 ProxyChains4编译安装</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为一个需求，所以研究了下——&lt;strong&gt;Linux终端下如何使用SSR优雅的出国访问优质(恩……)的国外网站&lt;/strong&gt;，本笔记的实验环境是&lt;strong&gt;Center OS&lt;/strong&gt;，其他Linux发行版本类似&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://smileorigin.site/categories/Linux/"/>
    
    
      <category term="Debian" scheme="http://smileorigin.site/tags/Debian/"/>
    
      <category term="SSR" scheme="http://smileorigin.site/tags/SSR/"/>
    
      <category term="Privoxy" scheme="http://smileorigin.site/tags/Privoxy/"/>
    
      <category term="ProxyChains4" scheme="http://smileorigin.site/tags/ProxyChains4/"/>
    
  </entry>
  
  <entry>
    <title>Vim</title>
    <link href="http://smileorigin.site/linux/vim/"/>
    <id>http://smileorigin.site/linux/vim/</id>
    <published>2018-11-24T15:00:00.000Z</published>
    <updated>2020-07-10T06:34:18.882Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些常用的 vim 命令</p><a id="more"></a><h2 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h2><ul><li><code>vimtutor</code><br>命令行直接运行，非vim编辑器内命令</li><li><code>:h</code><br>vim内部命令</li></ul><h2 id="过渡阶段"><a href="#过渡阶段" class="headerlink" title="过渡阶段"></a>过渡阶段</h2><ul><li><code>:set mouse=a</code><br>设置鼠标可区域选择，跟普通的编辑器一样可以进行拖选</li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="打开-切换文件"><a href="#打开-切换文件" class="headerlink" title="打开/切换文件"></a>打开/切换文件</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>:e file_name</code> 、<code>:o file_name</code></td><td>打开文件</td></tr><tr><td><code>:args file_name</code></td><td>如果使用<code>vim file1 file2 [filen]</code>命令打开多个文件，就可以使用<code>:args file_name</code>命令在打开的文件之间切换</td></tr><tr><td><code>:buffers</code>、<code>:ls</code>、<code>:files</code></td><td>查看缓冲区中的文件列表</td></tr><tr><td><code>:bnext</code></td><td>切换到下一个缓冲区文件</td></tr><tr><td><code>:bprevious</code>、<code>bpre</code></td><td>切换到上一个缓冲区文件</td></tr><tr><td><code>:bfirst</code></td><td>切换到第一个缓冲区文件</td></tr><tr><td><code>:blast</code></td><td>切换到最后一个缓冲区文件</td></tr><tr><td><code>:bdelete file_name</code></td><td>删除缓冲区文件</td></tr><tr><td><code>:badd file_name</code></td><td>添加文件到缓冲区</td></tr><tr><td><code>&lt;Ctrl&gt; + z</code></td><td>回到shell（最小化vim）</td></tr><tr><td><code>fg</code>（shell中命令）</td><td>在shell中输入<code>fg</code>即可回到最小化的vim中去</td></tr><tr><td><code>gf</code></td><td>跳转到当前光标下文件名对应的文件</td></tr><tr><td><code>&lt;Ctrl&gt; + ^</code></td><td>跳转到上一个文件</td></tr></tbody></table><h3 id="退出-保存"><a href="#退出-保存" class="headerlink" title="退出/保存"></a>退出/保存</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>:w</code></td><td>保存</td></tr><tr><td><code>:w!</code></td><td>强制保存，不退出vim</td></tr><tr><td><code>:q</code></td><td>退出</td></tr><tr><td><code>:q!</code></td><td>强制退出不保存</td></tr><tr><td><code>:wq</code>、<code>ZZ</code></td><td>保存并退出</td></tr><tr><td><code>:wq!</code></td><td>强制保存，并退出</td></tr><tr><td><code>:w file</code></td><td>将修改另存到file中，不退出vim</td></tr><tr><td><code>:e!</code></td><td>放弃所有修改，从上次保存文件开始再编辑命令历史</td></tr></tbody></table><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>i</code>/<code>I</code></td><td>编辑</td></tr><tr><td><code>esc</code></td><td>退出编辑模式</td></tr><tr><td><code>u</code></td><td>撤销操作</td></tr><tr><td><code>&lt;Ctrl&gt; + r</code></td><td>重做（恢复被撤销的动作）</td></tr><tr><td><code>cc</code> 、<code>S</code></td><td>清空当前行并进入编辑模式</td></tr><tr><td><code>s</code></td><td>删除当前字符并进入编辑模式</td></tr><tr><td><code>r</code></td><td>替换当前字符（替换后不进入编辑模式）</td></tr><tr><td><code>R</code></td><td>持续替换字符（不进入编辑模式），替换一个光标自动移到下一个</td></tr><tr><td><code>[&lt;Shift&gt; +] v</code></td><td>可视化多选，<code>&lt;Shift&gt; + v</code>的话是行选</td></tr><tr><td><code>&lt;ctrl&gt; + v</code></td><td>可视化列选</td></tr><tr><td><code>.</code></td><td>重复上次操作</td></tr><tr><td><code>set filetype?</code></td><td>显示文件的filetype</td></tr><tr><td><code>&lt;Ctrl&gt; + a</code></td><td>加1</td></tr><tr><td><code>&lt;crtl&gt; + x</code></td><td>减1</td></tr></tbody></table><h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>=-</code></td><td>格式化当前行代码</td></tr><tr><td><code>gg=G</code></td><td>格式化所有代码</td></tr><tr><td><code>:ce</code></td><td>居中</td></tr><tr><td><code>:le</code></td><td>居左</td></tr><tr><td><code>:re</code></td><td>局右</td></tr><tr><td><code>&gt;&gt;</code></td><td>向右缩进</td></tr><tr><td><code>&lt;&lt;</code></td><td>向左缩进</td></tr></tbody></table><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>x</code></td><td>删除当前字符</td></tr><tr><td><code>X</code></td><td>删除当前字符的前一个字符</td></tr><tr><td><code>dd</code></td><td>删除当前行</td></tr><tr><td><code>D</code> /<code>n$</code></td><td>删除当前字符至行尾</td></tr><tr><td><code>d^</code></td><td>删除当前字符至行首</td></tr><tr><td><code>dG</code></td><td>删除包含当前行及之后的全部行</td></tr><tr><td><code>cc</code></td><td>清空当前行</td></tr><tr><td><code>C</code></td><td>清空当前字符到行尾的字符</td></tr></tbody></table><h3 id="代码补全"><a href="#代码补全" class="headerlink" title="代码补全"></a>代码补全</h3><table><thead><tr><th>命令</th><th>代码</th></tr></thead><tbody><tr><td><code>&lt;Ctrl&gt; + p</code></td><td>往前搜索补全</td></tr><tr><td><code>&lt;Ctrl&gt; + n</code></td><td>往后搜索补全</td></tr><tr><td><code>&lt;Ctrl&gt; + e</code></td><td>取消补全</td></tr><tr><td><code>&lt;Ctrl&gt; + y</code></td><td>确定补全</td></tr></tbody></table><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>gg</code></td><td>跳转到首行</td></tr><tr><td><code>G</code></td><td>跳转到尾行</td></tr><tr><td><code>:n</code>、<code>nG</code></td><td>跳转到第n行</td></tr><tr><td><code>o</code></td><td>在下一行插入</td></tr><tr><td><code>O</code></td><td>在上一行插入</td></tr><tr><td><code>w</code>、<code>W</code></td><td>移动到下一个单词开头</td></tr><tr><td><code>b</code>、<code>B</code></td><td>移动到上一个单词开头</td></tr><tr><td><code>e</code>、<code>E</code></td><td>移动到下一个单词结尾</td></tr><tr><td><code>{</code></td><td>下一段落</td></tr><tr><td><code>}</code></td><td>上一段落</td></tr><tr><td><code>M</code></td><td>跳转到文件内容的中部</td></tr><tr><td><code>H</code></td><td>跳转到文件内容的顶部</td></tr><tr><td><code>L</code></td><td>跳转到文件内容的底部</td></tr><tr><td><code>&lt;Ctrl&gt; + f</code></td><td>下一页</td></tr><tr><td><code>&lt;Ctrl&gt; + b</code></td><td>上一页</td></tr><tr><td><code>&#39;0</code></td><td>返回上一次操作的位置</td></tr><tr><td><code>&lt;Ctrl&gt; + o</code></td><td>移动光标到上一个历史编辑位置</td></tr><tr><td><code>&lt;Ctrl&gt; + i</code>、<code>tab</code></td><td>移动光标到下一个历史编辑位置</td></tr><tr><td><code>gn</code></td><td>移动到选中元素结尾</td></tr></tbody></table><h3 id="复制-粘贴"><a href="#复制-粘贴" class="headerlink" title="复制/粘贴"></a>复制/粘贴</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>y</code></td><td>复制</td></tr><tr><td><code>p</code></td><td>粘贴到下部</td></tr><tr><td><code>P</code></td><td>粘贴到上部</td></tr><tr><td><code>x</code>、<code>X</code></td><td>剪切</td></tr></tbody></table><h2 id="高端点的操作"><a href="#高端点的操作" class="headerlink" title="高端点的操作"></a>高端点的操作</h2><h3 id="骚操作"><a href="#骚操作" class="headerlink" title="骚操作"></a>骚操作</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>vim -d file1 file2</code></td><td>对比文件不同之处</td></tr></tbody></table><h3 id="拖动功能"><a href="#拖动功能" class="headerlink" title="拖动功能"></a>拖动功能</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>zz</code></td><td>将当前行定位到屏幕中间</td></tr><tr><td><code>zb</code></td><td>将当前行定位到屏幕底部</td></tr><tr><td><code>zt</code></td><td>将当前行定位到屏幕顶部</td></tr></tbody></table><h3 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>zf</code></td><td>创建折叠</td></tr><tr><td><code>zo</code></td><td>打开折叠</td></tr><tr><td><code>zc</code></td><td>关闭折叠</td></tr><tr><td><code>:mkview</code> / <code>:loadview</code></td><td>保存，载入折叠</td></tr></tbody></table><h3 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>:split [file_name]</code> 、<code>:sp [file_name]</code></td><td>水平分割</td></tr><tr><td><code>:vsplit [file_name]</code>、<code>:vs [file_name]</code></td><td>垂直分割</td></tr><tr><td><code>&lt;Ctrl&gt; + w + h</code></td><td>将焦点移动到左边窗口</td></tr><tr><td><code>&lt;Ctrl&gt; + w + j</code></td><td>将焦点移动到下方窗口</td></tr><tr><td><code>&lt;Ctrl&gt; + w + k</code></td><td>将焦点移动到上方窗口</td></tr><tr><td><code>&lt;Ctrl&gt; + w + l</code></td><td>将焦点移动到右边窗口</td></tr></tbody></table><blockquote><p>更详细的教程：<a href="https://www.cnblogs.com/zzqcn/p/4788754.html">【vim】分割窗口、标签页与Quickfix窗口</a></p></blockquote><h3 id="Tab操作"><a href="#Tab操作" class="headerlink" title="Tab操作"></a>Tab操作</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>:tabnew [++opt选项] ［＋cmd］ 文件</code></td><td>创建指定文件的新tab</td></tr><tr><td><code>:tabc</code></td><td>关闭当前的tab</td></tr><tr><td><code>:tabo</code></td><td>关闭其他的所有tab</td></tr><tr><td><code>:tabs</code></td><td>查看所有打开的tab</td></tr><tr><td><code>:tabp</code></td><td>前一个tab</td></tr><tr><td><code>:tabn</code></td><td>后一个tab</td></tr></tbody></table><h3 id="转换文件编码和格式"><a href="#转换文件编码和格式" class="headerlink" title="转换文件编码和格式"></a>转换文件编码和格式</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>:set fileformat unix dos mas</code></td><td>让换行符自由切换</td></tr><tr><td><code>:set fileencodings</code></td><td>检测打开文档编码的顺序，一般设置为utf-8、cp936</td></tr><tr><td><code>:set fileencoding</code></td><td>保存文档的编码，一般为utf-8</td></tr><tr><td><code>:set encoding</code></td><td>vim本身界面的编码，一般和文档无关</td></tr></tbody></table><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>f</code>  / <code>F</code></td><td>当前行搜索，til，正向 / 反向</td></tr><tr><td><code>t</code> / <code>T</code></td><td>当前行搜索，until，正向 / 反向</td></tr><tr><td><code>;</code>、<code>,</code></td><td>重复当前行搜索</td></tr><tr><td><code>/</code>、<code>?</code></td><td>当前文件搜索，向上搜索 / 向下搜索</td></tr><tr><td><code>:grep -r</code> / <code>:!grep -r</code></td><td>跨文件搜索</td></tr><tr><td><code>n</code></td><td>下一个匹配内容</td></tr><tr><td><code>N</code></td><td>上一个匹配内容</td></tr></tbody></table><h3 id="替换指定字符"><a href="#替换指定字符" class="headerlink" title="替换指定字符"></a>替换指定字符</h3><ul><li><p><code>:s/target/replace[/g]</code></p><ul><li><code>target</code>：要被替换的内容</li><li><code>replace</code>：替换的内容</li><li>可选<code>/g</code>：表示替换当前行所有的需要被替换的内容，如不加这个参数则替换当前行第一个需要被替换的内容</li></ul><p>Example：</p><ul><li><code>: s/a/b</code>，将当前行的<code>a</code>替换为<code>b</code></li><li><code>: s/a/b/g</code>，将当前行所有的<code>a</code>替换为<code>b</code></li></ul></li><li><p><code>:n，$s/target/replace[/g]</code></p><ul><li><code>n</code>为数字表示从第n行开始到最后一行，当<code>n</code>为<code>.</code>时表示从当前行开始</li><li><code>target</code>：要被替换的内容</li><li><code>replace</code>：替换的内容</li><li>可选<code>/g</code>：表示替换每一行所有需要被替换的内容，如不添加则替换每一行的第一个需要被替换的内容</li></ul><p>Example：</p><ul><li><code>: 2, $s/a/b</code>：替换从第2行开始到最后一行的每一行的第一个<code>a</code>为<code>b</code></li><li><code>: 2, $s/a/b/g</code>：替换从第2行开始到最后一行的每一行的所有<code>a</code>为<code>b</code></li><li><code>: ., $s/a/b</code>：替换从当前行开始到最后一行的每一行的第一个<code>a</code>为<code>b</code></li></ul></li></ul><h2 id="插件使用（在安装的前提下）"><a href="#插件使用（在安装的前提下）" class="headerlink" title="插件使用（在安装的前提下）"></a>插件使用（在安装的前提下）</h2><h3 id="NERDTree"><a href="#NERDTree" class="headerlink" title="NERDTree"></a>NERDTree</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>o</code></td><td>打开/关闭文件或目录</td></tr><tr><td><code>t</code></td><td>在新标签页中打开</td></tr><tr><td><code>T</code></td><td>在后台标签页打开</td></tr><tr><td><code>!</code></td><td>执行此文件</td></tr><tr><td><code>p</code></td><td>到上层目录</td></tr><tr><td><code>P</code></td><td>到根目录</td></tr><tr><td><code>K</code></td><td>到第一个节点</td></tr><tr><td><code>J</code></td><td>到最后一个节点</td></tr><tr><td><code>u</code></td><td>打开上层目录</td></tr><tr><td><code>m</code></td><td>显示文件系统菜单（添加、删除、移动操作）</td></tr><tr><td><code>?</code></td><td>帮助，再按一下关闭</td></tr><tr><td><code>q</code></td><td>关闭</td></tr><tr><td><code>r</code></td><td>刷新列表</td></tr><tr><td><code>i</code></td><td>水平分屏</td></tr><tr><td><code>s</code></td><td>垂直分屏</td></tr></tbody></table><h3 id="vim-commentary"><a href="#vim-commentary" class="headerlink" title="vim-commentary"></a>vim-commentary</h3><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td><code>gcc</code></td><td>注释当前行（普通模式下）</td></tr><tr><td><code>gc</code></td><td>注释当前选中内容（可视多选模式下）</td></tr><tr><td><code>gcap</code></td><td>注释当前所在段落</td></tr><tr><td><code>gcu</code></td><td>注释上一次注释的部分</td></tr><tr><td><code>gcgc</code></td><td>取消一组相邻的注释</td></tr></tbody></table><h2 id="One-more-thing"><a href="#One-more-thing" class="headerlink" title="One more thing"></a>One more thing</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>q:</code></td><td>查看在vim中使用的历史命令</td></tr></tbody></table><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://github.com/bilibili/vim-vide#%E6%8B%A5%E6%9C%89%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84vimrc">vim-vide</a></li><li><a href="https://www.cnblogs.com/zzqcn/p/4788754.html">【vim】分割窗口、标签页与Quickfix窗口</a></li><li><a href="https://www.cnblogs.com/wangkongming/p/4050833.html">vim 树形目录插件NERDTree安装及简单用法</a></li><li><a href="https://github.com/jaywcjlove/vim-web">https://github.com/jaywcjlove/vim-web</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些常用的 vim 命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://smileorigin.site/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://smileorigin.site/tags/Linux/"/>
    
      <category term="Vim" scheme="http://smileorigin.site/tags/Vim/"/>
    
      <category term="CommandLine" scheme="http://smileorigin.site/tags/CommandLine/"/>
    
  </entry>
  
  <entry>
    <title>Center OS Django部署</title>
    <link href="http://smileorigin.site/python/django-deploy/"/>
    <id>http://smileorigin.site/python/django-deploy/</id>
    <published>2018-11-14T06:00:00.000Z</published>
    <updated>2020-06-20T07:41:10.556Z</updated>
    
    <content type="html"><![CDATA[<p>Center OS 部署 Django 程序，使用 Nginx + uWsgi + Supervisor</p><a id="more"></a><h2 id="Python3-环境安装"><a href="#Python3-环境安装" class="headerlink" title="Python3 环境安装"></a>Python3 环境安装</h2><ol><li>安装可能使用到的依赖<br> <code>yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel</code></li><li>从Python官网找到需要的Python版本的下载路径，使用<code>wget</code>下载到服务器<br> 这里以Python3.6.7为例：<a href="https://www.python.org/ftp/python/3.6.7/Python-3.6.7.tgz">https://www.python.org/ftp/python/3.6.7/Python-3.6.7.tgz</a><br> 下载到服务器命令：<code>wget https://www.python.org/ftp/python/3.6.7/Python-3.6.7.tgz</code></li><li>解压tgz压缩包<br> <code>tar -zxvf Python-3.6.7.tgz</code><br> 解压完可以在当前目录下看到Python-3.6.7的目录</li><li>把Python移到 <strong>/usr/local</strong> 下<br> <code>mv Python-3.6.7 /usr/local</code></li><li>进入Python-3.6.7目录<br> <code>cd /usr/local/Python-3.6.7</code></li><li>配置<br> <code>./configure</code></li><li>编译<br> <code>make</code></li><li>安装<br> <code>make install</code></li><li>创建软链接（以便在全局调用）<br> <code>ln -s /usr/local/bin/python3.6 /usr/bin/python3</code></li><li>查看是否安装成功<br><code>python3 -V</code><br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231025.png" alt=""></li></ol><h2 id="将项目传到到服务器"><a href="#将项目传到到服务器" class="headerlink" title="将项目传到到服务器"></a>将项目传到到服务器</h2><p>这里我们使用Git来操作，我们把项目传到如：Github或Coding等代码仓库，然后使用Git克隆到服务器。这样每次项目更新了只要将代码上传到仓库，在到服务器将代码拉下来就可以实现代码更新了</p><ol><li>项目配置<br> 记得在项目的<strong>settings.py</strong>中添加以下配置 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'你的公网ip(不带端口号)'</span>] <span class="comment"># 如果不配置服务器的IP地址将导致外网无法访问，或者使用['*']代表授权全部</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'static'</span>)</span><br></pre></td></tr></table></figure></li><li>安装Git<br> <code>yum install git</code></li><li>克隆项目到服务器<br> <code>git clone http://xxxxxx.com</code>，将<code>http://xxxxxx.com</code>换成自己仓库的地址</li><li>拉取更新的代码<br> <code>git pull</code></li><li>更多<br> 更多的Git命令可以查看我另一篇文章：<a href="https://smileorigin.site/2017/10/18/Git/Git/">https://smileorigin.site/2017/10/18/Git/Git/</a></li></ol><h2 id="使用Virtualenv来创建虚拟环境"><a href="#使用Virtualenv来创建虚拟环境" class="headerlink" title="使用Virtualenv来创建虚拟环境"></a>使用Virtualenv来创建虚拟环境</h2><p>为每一个Django项目都创建一个虚拟环境可以使每个项目的依赖包都互不影响，也不会污染全局环境，其他使用和信息可以查看我的另一篇文章–<a href="https://smileorigin.site/2018/08/06/Python/Virtualenv/">https://smileorigin.site/2018/08/06/Python/Virtualenv/</a></p><ol><li>更新pip<br> <code>pip3 install --upgrade pip</code></li><li>安装Virtualenv<br> <code>pip3 install virtualenv</code></li><li>进入项目所在文件夹<br> 假设我们项目文件夹在当前目录且名称为<code>server</code><br> <code>cd server</code></li><li>创建虚拟环境<br> 在当前文件夹下创建一个名为<strong>venv</strong>的虚拟环境<br> <code>virtualenv venv</code></li><li>激活虚拟环境<br> <code>source venv/bin/activate</code><br> 可以看到在<strong>root</strong>之前多了个<strong>(venv)</strong>，说明激活虚拟环境成功了<br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231041.png" alt=""></li><li>使用<code>requirements.txt</code>文件安装依赖包<br> 如果有使用<code>pip freeze &gt;requirements.txt</code>在本地项目导出项目的所有依赖包，则可以通过该命令进行快速安装依赖包，没有的话就手动使用pip安装项目需要的依赖包<br> <code>pip install -r requirements.txt</code></li></ol><h2 id="安装配置uWsgi"><a href="#安装配置uWsgi" class="headerlink" title="安装配置uWsgi"></a>安装配置uWsgi</h2><ol><li>安装<br> <code>pip install uwsgi</code></li><li>测试uwsgi<br> <code>vim test.py</code><br> 填写以下内容   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(env, start_response)</span>:</span></span><br><span class="line">   start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)])</span><br><span class="line">   <span class="keyword">return</span> [<span class="string">b'Hello world'</span>]  <span class="comment"># Python3</span></span><br></pre></td></tr></table></figure> 保存后，执行指令进行测试：<code>uwsgi --http 127.0.0.1:8000 --wsgi-file test.py</code><br> 如果执行成功，则会有以下类似信息：<br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231153.png" alt=""><br> 打开另一个命令行窗口，输入以下命令进行测试：<code>curl 127.0.0.1:8000</code><br> 如果提示以下信息则表示测试页面运行成功：<br> 可以看到截图有显示：<code>Hello world</code><br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231233.png" alt=""></li><li>新建uwsgi配置文件<br> <code>vim uwsgi.ini</code><br> 可以按照以下模板进行填写   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 我的项目目录</span></span><br><span class="line">chdir = /root/server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定项目的application</span></span><br><span class="line">module = imageAnalyze.wsgi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进程个数</span></span><br><span class="line">workers = 5</span><br><span class="line"><span class="meta">#</span><span class="bash">pid文件保存路径</span></span><br><span class="line">pidfile = /root/server/uwsgi/uwsgi.pid</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定IP端口</span></span><br><span class="line">http = 127.0.0.1:8000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定静态文件</span></span><br><span class="line">static-map = /static=/root/server/static</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动uwsgi的用户名和用户组</span></span><br><span class="line">uid = root</span><br><span class="line">gid = root</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用主进程</span></span><br><span class="line">master = true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 自动移除unix Socket和pid文件当服务停止的时候</span></span><br><span class="line">vacuum = true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 序列化接受的内容，如果可能的话</span></span><br><span class="line">thunder-lock = true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用线程</span></span><br><span class="line">enable-threads = true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置自中断时间</span></span><br><span class="line">harakiri = 30</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置缓冲</span></span><br><span class="line">post-buffering = 4096</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置日志目录</span></span><br><span class="line">daemonize = /root/server/uwsgi/uwsgi.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定sock的文件路径</span></span><br><span class="line">socket = /root/server/uwsgi/uwsgi.sock</span><br></pre></td></tr></table></figure></li><li>新建配置文件中的指定文件夹<br> 如果不创建可能导致以配置文件启动uwsgi报文件夹不存在的错误<br> <code>mkdir uwsgi</code></li><li>创建static文件夹<br> <code>mkdir static</code></li><li>收集项目静态文件<br> <code>python manage.py collectstatic</code><br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231443.png" alt=""><br> 收集成功会提示收集的文件数</li><li>以配置文件的形式启动uwsgi<br> <code>uwsgi --ini uwsgi.ini</code><br> 如果启动成功，则有以下类似提示<br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231457.png" alt=""><br> 使用<code>netstat -tnlp</code>命令可以查看在有哪些端口是运行的，可以看到uwsgi运行在<strong>127.0.0.1:8000</strong><br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231510.png" alt=""></li><li>关闭<br><code>uwsgi --stop uwsgi/uwsgi.pid</code></li></ol><h2 id="安装配置Nginx"><a href="#安装配置Nginx" class="headerlink" title="安装配置Nginx"></a>安装配置Nginx</h2><p>记得在配置Nginx的时候如果使用的是阿里云服务器，要让外部使用的端口要先在阿里云服务器的安全组中打开，否则会不能访问</p><ol><li>查找要安装的Nginx的包链接<br> <a href="http://nginx.org/packages/centos/7/x86_64/RPMS/">http://nginx.org/packages/centos/7/x86_64/RPMS/</a></li><li>安装<br> <code>rpm -ivh http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.14.1-1.el7_4.ngx.x86_64.rpm</code></li><li>配置Django项目的Nginx配置文件<br> <code>cd /etc/nginx/conf.d</code><br> <code>vim server.conf</code>，创建你项目的Nginx的配置文件，把<code>server</code>换成任意名字（<code>/etc/nginx/nginx.conf</code>文件的最后一行是<code>include /etc/nginx/conf.d/*.conf;</code>会加载<code>/etc/nginx/conf.d</code>文件夹下的所有后缀为<code>.conf</code>的配置文件，所以只要在这个目录下创建后缀为<code>.conf</code>的配置文件并配置相关内容，Nginx就会自动帮我们加载了，不需要额外的处理） <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">   listen 80; # 监听的端口</span><br><span class="line">   server_name cookbook.aicircle.site;</span><br><span class="line">   server_name www.cookbook.aicircle.site # 使外部可通过www.cookbook.aicircle.site进行访问</span><br><span class="line"><span class="meta">   #</span><span class="bash">当请求这些server name的时候，nginx才会做反向代理，0.0.0.0是指全部</span></span><br><span class="line">   location / &#123;</span><br><span class="line">     proxy_pass http://127.0.0.1:8000;</span><br><span class="line">     proxy_set_header Host $host;</span><br><span class="line">     proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">     proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">   #</span><span class="bash"> location 顾名思义，定位，就是当访问 / 的时候，nginx会将请求转给本地的8080&gt;端口，而后面的设置都是&gt;一些基本的配置，可以直接用</span></span><br><span class="line">   location /static &#123;</span><br><span class="line">     alias /root/server/static;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">   #</span><span class="bash"> 这个就是配置静态文件的地方，要用绝对地址，对应最开始的目录形式，假设project就在/home下面，那么这&gt;样配置就可以的了，还有个前提是，你在开发的时候，采取了django的建议，每个app的静态文件都用多了一层app_name的文件夹来包住。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>查看Nginx状态<br> <code>systemctl status nginx</code>，如果Nginx是启动的则会有以下类似提示：<br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231521.png" alt=""></li><li>测试Nginx配置文件是否有误<br> <code>nginx -t</code>，如果有以下类似提示，则配置文件没错<br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231543.png" alt=""></li><li>启动Nginx<br> <code>systemctl start nginx</code></li><li>测试是否启动成功<br> <code>curl http://127.0.0.1:80</code>，如果Nginx启动成功，则会显示以下类似内容<br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231552.png" alt=""></li><li>设置开机自启<br> <code>systemctl enable nginx</code>，如果设置成功则会有类似提示信息<br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231604.png" alt=""></li><li>关闭Nginx<br> <code>systemctl stop nginx</code></li><li>重启Nginx<br><code>systemctl restart nginx</code></li></ol><h2 id="使用Supervisor来管理进程"><a href="#使用Supervisor来管理进程" class="headerlink" title="使用Supervisor来管理进程"></a>使用Supervisor来管理进程</h2><blockquote><p>Supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。它是通过fork/exec的方式把这些被管理的进程当作supervisor的子进程来启动，这样只要在supervisor的配置文件中，把要管理的进程的可执行文件的路径写进去，就可以实现当子进程挂掉的时候，父进程可以准确获取子进程挂掉的信息，可以选择是否重新启动程序或报警。supervisor还提供了一个功能，可以为supervisord或者每个子进程，设置一个非root的user，这个user就可以管理它对应的进程。</p></blockquote><ol><li>安装<br> 安装我们使用Center OS自带的Python2来安装，Supervisor不支持Python3，打开另一个命令窗口使用以下命令安装<br> <code>pip2 install supervisor</code></li><li>设置配置文件<br> <code>vim supervisord.conf</code>，在任意你想要的位置创建配置文件，根据说明将以下参数改为自己的配置，保存 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:server]</span><br><span class="line">command=/root/server/venv/bin/uwsgi --ini /root/server/uwsgi.ini</span><br><span class="line">directory=/root/server </span><br><span class="line">startsecs=1 </span><br><span class="line">stopwaitsecs=1 </span><br><span class="line">autostart=true </span><br><span class="line">autorestart=true </span><br><span class="line">[supervisord]</span><br><span class="line">[supervisorctl]</span><br></pre></td></tr></table></figure><ul><li><code>program:server</code>：指定程序名称，<code>server</code>为自定义程序名称</li><li><code>command</code>：启动程序的命令，这里是调用虚拟环境内的uwsgi根据配置文件<code>/root/server/uwsgi.ini</code>启动Django程序</li><li><code>directory</code>：项目所在的文件夹</li><li><code>startsecs</code>：启动延迟</li><li><code>stopwaitsecs</code>：关闭延迟</li><li><code>autostart</code>：是否自动启动</li><li><code>autorestart</code>：是否自动重启</li></ul></li><li>启动Supervisor<br> supervisord是服务端，supervisorctl是客户端<br> <code>supervisord -c supervisord.conf</code>，如果<code>surpervisord.conf</code>不在当前文件夹则需要其绝对路径（如：<code>/etc/xx/supervisord.conf</code>）</li><li>重启supervisor<br> <code>service supervisord restart</code></li><li>启动进程<br> <code>supervisorctl -c supervisord.conf start server</code></li><li>重启进程<br> <code>supervisorctl -c supervisord.conf restart server</code></li><li>关闭进程<br> <code>supervisorctl -c supervisord.conf stop server</code></li><li>启动所有进程<br> <code>supervisorctl start all</code></li><li>关闭所有进程<br> <code>supervisorctl stop all</code></li><li>查看所有进程的状态<br><code>supervisorctl status</code></li><li>查看Supervisor的进程信息<br><code>ps -ef | grep supervisord</code></li></ol><h2 id="错误解决方案"><a href="#错误解决方案" class="headerlink" title="错误解决方案"></a>错误解决方案</h2><ul><li>如果以上都配置好了，发现进入网站静态文件无法正常加载，请确认你的项目是不是在<code>/root</code>文件夹下，如果是的话则在修改<code>root</code>目录的权限<br>  <code>chmod -R 755 root</code><br>  修改完后重启Nginx服务器重新访问网站即可</li><li>无法访问服务器（博主这边用的是阿里云服务器，默认防火墙是关闭的）<ol><li>检查服务器防火墙是否将用到的端口都设为白名单</li><li>如果是阿里云服务器，检查安全组是否添加用到的端口为入方向白名单</li></ol></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://blog.csdn.net/wjy397/article/details/51610872">超详细的django1.8处理centos下nginx上处理静态文件步骤！</a></li><li><a href="https://www.cnblogs.com/EasonJim/p/9020896.html">CentOS 6.9/7通过yum安装指定版本的Nginx</a></li><li><a href="https://code.ziqiangxuetang.com/django/django-nginx-deploy.html">Django部署(Nginx)</a></li><li><a href="http://blog.51cto.com/mbb97/2151933">结合Nginx+uWsgi部署Django项目</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Center OS 部署 Django 程序，使用 Nginx + uWsgi + Supervisor&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://smileorigin.site/categories/Python/"/>
    
    
      <category term="Python" scheme="http://smileorigin.site/tags/Python/"/>
    
      <category term="Django" scheme="http://smileorigin.site/tags/Django/"/>
    
      <category term="Nginx" scheme="http://smileorigin.site/tags/Nginx/"/>
    
      <category term="uWsgi" scheme="http://smileorigin.site/tags/uWsgi/"/>
    
      <category term="Supervisor" scheme="http://smileorigin.site/tags/Supervisor/"/>
    
  </entry>
  
  <entry>
    <title>EffectivePython Advices Record</title>
    <link href="http://smileorigin.site/python/advices/"/>
    <id>http://smileorigin.site/python/advices/</id>
    <published>2018-08-07T10:00:00.000Z</published>
    <updated>2020-06-20T07:41:07.969Z</updated>
    
    <content type="html"><![CDATA[<p>Recorded something 《EffectivePython》advices notes</p><a id="more"></a><h2 id="不要通过检测长度的方法来判断somelist是否为空"><a href="#不要通过检测长度的方法来判断somelist是否为空" class="headerlink" title="不要通过检测长度的方法来判断somelist是否为空"></a>不要通过检测长度的方法来判断somelist是否为空</h2><p>不要使用如：<code>if len(somelist) &gt; 0</code>来判断somelist是否为<strong>[]</strong>或<strong>“空值”</strong>，而是应该采用<code>if not somelist</code>这种写法来判断，somelist为空值或者None表达式<code>not somelist</code>都将会为True<br>检测子元素somelist[i]也应该使用这种方法<br>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"I'm none."</span>)</span><br><span class="line">...</span><br><span class="line">I<span class="string">'m none.</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; b = []</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; if not b:</span></span><br><span class="line"><span class="string">...     print("I'</span>m empty list.<span class="string">")</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">I'm empty list.</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; c = &#123;&#125;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; if not c:</span></span><br><span class="line"><span class="string">...     print("</span>I<span class="string">'m empty dictionary.")</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">I'</span>m empty dictionary.</span><br></pre></td></tr></table></figure><h2 id="编写Python程序的时候一定要把编码和解码放在界面最外围来做"><a href="#编写Python程序的时候一定要把编码和解码放在界面最外围来做" class="headerlink" title="编写Python程序的时候一定要把编码和解码放在界面最外围来做"></a>编写Python程序的时候一定要把编码和解码放在界面最外围来做</h2><p>程序的核心部分应该使用Unicode字符类型（也就是Python3中的str，Python2中的unicode），而且不要对字符编码做任何假设。这种办法可以另程序接受多种类型的文本编码（Latin-1、Shift JIS和Big5），又可以保证输出的文本信息只采用一种编码形式（最好是UTF-8）<br>由于Python的字符类型有别，所以Python代码中经常会出现两种使用场景：</p><ul><li>开发者需要原始8位值，这些8位值表示以UTF-8格式或其他编码形式来编码的字符</li><li>开发者需要操作没有特定编码形式的Unicode字符<br>所以我们需要编写两个辅助函数，以便在这两种情况之间转换，使得转换后的输入数据能够符合开发者的预期<br>在Python3中，我们需要编写接受str或bytes，并总返回str的方法：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_str</span><span class="params">(bytes_or_str)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(bytes_or_str, bytes):</span><br><span class="line">        value = bytes_or_str.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        value = bytes_or_str</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure></li></ul><p>另外还需要接受str或bytes，并总是返回bytes的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_bytes</span><span class="params">(bytes_or_str)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(bytes_or_str, str):</span><br><span class="line">        value = bytes_or_str.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        value = bytes_or_str</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><h2 id="用zip函数同时遍历两个迭代器"><a href="#用zip函数同时遍历两个迭代器" class="headerlink" title="用zip函数同时遍历两个迭代器"></a>用zip函数同时遍历两个迭代器</h2><p>在编写Python代码时，我们通常要面对很多个列表，而这些列表里的对象，可能也是相互关联的。通过列表推导，很容易就能根据某个表达式从源列表推算出一份派生类表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'Cecilia'</span>, <span class="string">'Lise'</span>, <span class="string">'Marie'</span>]</span><br><span class="line">letters = [len(n) <span class="keyword">for</span> n <span class="keyword">in</span> names]</span><br></pre></td></tr></table></figure><p>对于本例中的派生列表和源列表来说，相同索引处的两个元素之间有着关联。如果想平行地迭代这两份列表，那么可根据names源列表的长度来执行循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">longest_name = <span class="literal">None</span></span><br><span class="line">max_letters = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(names)):</span><br><span class="line">    count = letters[i]</span><br><span class="line">    <span class="keyword">if</span> count &gt; max_letters:</span><br><span class="line">        longest_name = names[i]</span><br><span class="line">        max_letter = count</span><br><span class="line"></span><br><span class="line">print(longest_name)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Cecilia</span><br></pre></td></tr></table></figure><p>上面这段代码的问题在于，整个循环语句看上去很乱。用下标来访问names和letters会使代码不易阅读。用循环下标i来访问数组的写法一共出现了两次。改用enumerate来做可以稍微缓解这个问题。但是仍然不够理想</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, name <span class="keyword">in</span> enumerate(names):</span><br><span class="line">    count = letters[i]</span><br><span class="line">    <span class="keyword">if</span> count &gt; max_letters:</span><br><span class="line">        longest_name = names[i]</span><br><span class="line">        max_letters = count</span><br></pre></td></tr></table></figure><p>使用内置的<strong>zip</strong>函数能够使上述代码变得更加简洁。在Python3中的<strong>zip</strong>函数，可以把两个或者两个以上的迭代器封装为生成器，以便稍后求值。这种zip生成器，会从每个迭代器中获取该迭代器的下一个值，然后把这些值汇聚成元组。与通过下标来访问多份列表的那种写法相比，这种用zip写出来的代码更加明晰</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name, count <span class="keyword">in</span> zip(names, letters):</span><br><span class="line">    <span class="keyword">if</span> count &gt; max_letters:</span><br><span class="line">        longest_name = name</span><br><span class="line">        max_letters = count</span><br></pre></td></tr></table></figure><p><strong>zip</strong>存在一个问题，如果两个迭代器的长度不一致，<strong>zip</strong>会自动提前终止</p><p><strong>itertools</strong>内置模块中的<strong>zip_longest</strong>函数可以平行地遍历多个迭代器，而不用在乎它们的长度是否相等</p><h2 id="try-except-else"><a href="#try-except-else" class="headerlink" title="try/except/else"></a>try/except/else</h2><p><strong>try/except/else</strong> 结构可以清晰地描述出哪些异常会由自己的代码来处理、哪些异常会传播到上一级。如果try块没有发生异常，那么就执行else块。有了这种else块，我们可以尽量缩减try块内的代码量，使其更加易读。例如，要从字符串中加载JSON字典数据，然后返回字典里某个键所对应的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_json</span><span class="params">(data, key)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result_dict = json.loads(data) <span class="comment"># May raise ValueError</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError <span class="keyword">from</span> e</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> result_dict[key] <span class="comment"># May raise KeyError</span></span><br></pre></td></tr></table></figure><p>如果数据不是有效的JSON格式，那么用json.loads解码时，会产生ValueError。这个异常会由except块来捕获并处理。如果能够解码，那么else块里的查找语句就会执行，它会根据键来查出相关的值。查询时若有异常，则该异常会向上传播，因为查询语句并不在刚才那个try块的范围内。这种else子句，会把try/except后面的内容和except本身区分开，使异常的传播行为变得更加清晰</p><h2 id="用生成器表达式来改写数据量较大的列表推导式"><a href="#用生成器表达式来改写数据量较大的列表推导式" class="headerlink" title="用生成器表达式来改写数据量较大的列表推导式"></a>用生成器表达式来改写数据量较大的列表推导式</h2><p>列表推导缺点–在推导过程中，对于输入序列中的每个值来说，可能都要创建仅含一项元素的全新列表。当输入的数据比较少时，不会出现问题，但如果输入的数据非常多，那么可能会消耗大量的内存，并导致程序崩溃<br>例如要读取一份文件并返回每行的字符数。若采用列表推导来做，则需要把文件每一行的长度都保存在内存中。如果这个文件特别大，或者是通过无休止的network socket来读取，那么这种列表推到就会出问题。下面这段列表推到代码，只适合处理少量的输入值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">value = [len(x) <span class="keyword">for</span> x <span class="keyword">in</span> open(<span class="string">'/tmp/test_file.txt'</span>)]</span><br><span class="line">print(value)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">2</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">43</span>,<span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>为了解决此问题，Python提供了生成器表达式，它是对列表推导和生成器的一种泛化。生成器表达式在运行的时候，并不会把整个输出序列都呈现出来，而是会估值为迭代器，这个迭代器每次可以根据生成器表达式产生一项数据。把实现列表推到所用的那种写法放在一对括号中，就构成了生成器表达式。下面给出的生成器表达式与刚才的代码等效。二者的区别在于，对于生成器表达式求值的时候，它会立刻返回一个迭代器，而不会深入文件中的内容。以刚才返回的迭代器为参数，逐次调用内置的next函数，即可使其按照生成器表达式来输出下一个值。可以根据自己的需求，多次命令迭代器根据生成器表达式来生成新值，而不用担心内存用量激增</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it = (len(x) <span class="keyword">for</span> x <span class="keyword">in</span> open(<span class="string">'/tmp/test_file.txt'</span>))</span><br><span class="line">print(next(it))</span><br><span class="line">print(next(it))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>使用生成器表达式还有个好处，就是可以相互组合。下面代码会把刚那个生成器表达式所返回的迭代器用作另一个生成器表达式的输入值。外围的迭代器每次前进时，都会推动内部那个迭代器，这就产生了连锁效应，使得执行循环、评估条件表达式、对接输入和输出等逻辑都组合在一起。这种连锁生成器表达式，可以迅速在Python中执行。如果要吧多种手法组合起来，以操作大批量的输入数据，那最好用生成器表达式来实现。只是要注意：由生成器表达式所返回的那个迭代器是有状态的，用过一轮之后，就不要反复使用了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">roots = ((x, x**<span class="number">0.5</span>) <span class="keyword">for</span> x <span class="keyword">in</span> it)</span><br><span class="line">print(next(roots))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">(<span class="number">12</span>,<span class="number">23</span>)</span><br></pre></td></tr></table></figure><h2 id="考虑用生成器来改写直接返回列表的函数"><a href="#考虑用生成器来改写直接返回列表的函数" class="headerlink" title="考虑用生成器来改写直接返回列表的函数"></a>考虑用生成器来改写直接返回列表的函数</h2><p>如果函数要产生一系列结果，那么最简单的做法就是把这些结果都放在一份列表里，并将其返回给调用者。例如：我们要查出字符串中每个词的首字母在整个字符串里的位置。下面这段代码，用append方法将这些词的首字母索引添加到result列表中，并在函数结束时将其返回给调用者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_words</span><span class="params">(text)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">if</span> text:</span><br><span class="line">        result.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> index, letter <span class="keyword">in</span> enumerate(text):</span><br><span class="line">        <span class="keyword">if</span> letter == <span class="string">' '</span>:</span><br><span class="line">            result.append(index + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>输入一些范例值，以验证该函数能够正常运作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>address = <span class="string">'Four score and seven years age...'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = index_words(address)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(result[:<span class="number">3</span>])</span><br><span class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure><p>第一个问题是，这个代码写得有点拥挤。每次找到新的结果，都要调用append方法。但我们真正应该强调的，并不是对result.append方法的调用，而是该方法给列表中添加的那个值，也就是index + 1。另外，函数首尾还有一行代码用来创建及返回result列表。于是，在函数主体部分的约130个字符里，重要的大概只有75个</p><p>这个函数改用生成器（generator）来写会更好。生成器是使用<strong>yield</strong>表达式的函数。调用函数时，它并不是真正的运行，而是会返回生成器。每次在这个迭代器上面调用内置的next函数时，迭代器会把生成器推进到下一个yield表达式那里。生成器传给<strong>yield</strong>的每一个值都会由迭代器返回给调用者</p><p>下面的这个生成器函数，会产生和刚才那个函数相同的效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_words_iter</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> text:</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index, letter <span class="keyword">in</span> enumerate(text):</span><br><span class="line">        <span class="keyword">if</span> letter == <span class="string">' '</span>:</span><br><span class="line">            <span class="keyword">yield</span> index + <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = list(index_words_iter(address))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(result[:<span class="number">3</span>])</span><br><span class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure><p>这个函数不需要包含域result列表相交互的那些代码，因而看起来比刚才那种写法清晰许多。原来那个result列表中的元素，现在都分别传给<strong>yield</strong>表达式了。调用该生成器后所返回的迭代器，可以传给内置的list函数，以将其转换为列表</p><h2 id="使用None和文档字符串来描述具有动态默认值的参数"><a href="#使用None和文档字符串来描述具有动态默认值的参数" class="headerlink" title="使用None和文档字符串来描述具有动态默认值的参数"></a>使用None和文档字符串来描述具有动态默认值的参数</h2><p>有时我们想采用一种非静态的类型，来做关键字参数的默认值。例如：在打印日志消息的时候，要把相关事件的记录时间也标注在这条消息中。默认情况下，消息里面所包含的时间，应该是调用<strong>log</strong>函数那一刻的时间。如果我们以为参数的默认值会在每次执行函数时得到评估，那可能就会写出下面这种代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(message, when=datetime.datetime.now<span class="params">()</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'%s : %s'</span> % (when, message))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>log(<span class="string">'Hi there!'</span>)</span><br><span class="line"><span class="number">2018</span><span class="number">-08</span><span class="number">-08</span> <span class="number">09</span>:<span class="number">41</span>:<span class="number">37.025822</span> : Hi there!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>log(<span class="string">'Hi again!'</span>)</span><br><span class="line"><span class="number">2018</span><span class="number">-08</span><span class="number">-08</span> <span class="number">09</span>:<span class="number">41</span>:<span class="number">37.025822</span> : Hi again!</span><br></pre></td></tr></table></figure><p>两条消息的时间戳是一样的，这是因为datetime.now()只执行了一次，也就是它只在函数定义的时候执行了一次。参数的默认值，会在每个模块加载进来的时候求出，而很多模块都是在程序启动的时候加载的。包含这段代码的模块一旦加载进来参数的默认值也就固定不变了，程序不会再次执行datetime.now()<br>True Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(message, when=None)</span>:</span></span><br><span class="line"><span class="meta">... </span>    when = datetime.datetime.now() <span class="keyword">if</span> when <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> when</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'%s : %s'</span> % (when, message))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>log(<span class="string">'Hi there!'</span>)</span><br><span class="line"><span class="number">2018</span><span class="number">-08</span><span class="number">-08</span> <span class="number">09</span>:<span class="number">48</span>:<span class="number">01.383500</span> : Hi there!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>log(<span class="string">'Hi again!'</span>)</span><br><span class="line"><span class="number">2018</span><span class="number">-08</span><span class="number">-08</span> <span class="number">09</span>:<span class="number">48</span>:<span class="number">06.394290</span> : Hi again!</span><br></pre></td></tr></table></figure><p>默认值为字典的错误情况实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(data, default=&#123;&#125;)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> json.loads(data)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">except</span> ValueError:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> default</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo = decode(<span class="string">'bad data'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo[<span class="string">'stuff'</span>] = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bar = decode(<span class="string">'also bad'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bar[<span class="string">'meep'</span>] = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Foo:'</span>, foo)</span><br><span class="line">Foo: &#123;<span class="string">'stuff'</span>: <span class="number">5</span>, <span class="string">'meep'</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Bar:'</span>, bar)</span><br><span class="line">Bar: &#123;<span class="string">'stuff'</span>: <span class="number">5</span>, <span class="string">'meep'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>True Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(data, default=None)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> default <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="meta">... </span>            default = &#123;&#125;</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> json.loads(data)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">except</span> ValueError:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> default</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo = decode(<span class="string">'bad data'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo[<span class="string">'stuff'</span>] = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bar = decode(<span class="string">'also bad'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bar[<span class="string">'meep'</span>] = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Foo:'</span>, foo)</span><br><span class="line">Foo: &#123;<span class="string">'stuff'</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Bar:'</span>, bar)</span><br><span class="line">Bar: &#123;<span class="string">'meep'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="用只能以关键字形式指定的参数来确保代码明晰"><a href="#用只能以关键字形式指定的参数来确保代码明晰" class="headerlink" title="用只能以关键字形式指定的参数来确保代码明晰"></a>用只能以关键字形式指定的参数来确保代码明晰</h2><p>下面定义的这个safe_division_c函数，带有两个只能以关键字形式来指定的参数。参数列表里的*号，标志着位置参数就此终结，之后那些参数，都只能以关键字形式来指定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_division_c</span><span class="params">(number, divisor, *, ignore_overflow=False, ignore_zero_division=False)</span>:</span></span><br></pre></td></tr></table></figure><p>现在，我们就不用位置参数的形式来指定关键字参数了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">safe_division_c(<span class="number">1</span>, <span class="number">10</span>**<span class="number">500</span>, <span class="literal">True</span>, <span class="literal">False</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">TypeError: safe_division_c() takes <span class="number">2</span> positional arguments but <span class="number">4</span> were given</span><br></pre></td></tr></table></figure><p>关键字参数依然可以用关键字的形式来指定，如果不指定，也依然会采用默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">safe_division_c(<span class="number">1</span>, <span class="number">0</span>, ignore_zero_division=<span class="literal">True</span>)  <span class="comment"># OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    safe_division_c(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="keyword">pass</span>     <span class="comment"># Excepted</span></span><br></pre></td></tr></table></figure><h2 id="使用内置算法与数据结构"><a href="#使用内置算法与数据结构" class="headerlink" title="使用内置算法与数据结构"></a>使用内置算法与数据结构</h2><p>如果Python程序要处理的数量比较可观，那么代码的执行速度会受到复杂算法拖累。然而这并不能证明Python是一门执行速度很低的语言，因为这种情况很可能是算法和数据结构选择不佳导致的<br>幸运的是Python的标准程序库里面，内置了各种算法与数据结构，以供开发者使用。这些常见的算法与数据结构，不仅执行速度比较快，而且还可以简化编程工作。其中某些实用工具，是很难由开发者自己正确实现出来的。所以，我们应该直接使用这些Python自带的功能，而不要重新去实现它们，以节省时间和精力</p><h3 id="双向队列"><a href="#双向队列" class="headerlink" title="双向队列"></a>双向队列</h3><p><strong>collections</strong>模块中的<strong>deque</strong>类，是一种双向队列（double-ended queue，双端队列）。从该队列的头部或者尾部插入或移除一个元素，只需要消耗常数级别的时间，这一特性使得它非常适合用来表示先进先出队列。内置的list类型，也可以像队列那样，按照一定的顺序来存放元素。从list尾部插入或者移除元素，也仅仅需要常熟级别的时间。但是，从list头部插入或者移除元素，却会耗费线性级别的时间，这与deque的常数级别时间相比，要慢得多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time()</span><br><span class="line">fifo = deque()</span><br><span class="line"><span class="comment"># Producter</span></span><br><span class="line">fifo.extend([i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200000</span>)])</span><br><span class="line"><span class="comment"># Consumer</span></span><br><span class="line"><span class="keyword">while</span> len(fifo) &gt; <span class="number">0</span>:</span><br><span class="line">    x = fifo.popleft()</span><br><span class="line">end = time()</span><br><span class="line">print(<span class="string">'deque: &#123;&#125;'</span>.format(end-start))</span><br><span class="line"></span><br><span class="line">start = time()</span><br><span class="line">l = []</span><br><span class="line">l.extend([i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200000</span>)])</span><br><span class="line"><span class="keyword">while</span> len(l) &gt; <span class="number">0</span>:</span><br><span class="line">    x = l.pop(<span class="number">0</span>)</span><br><span class="line">end = time()</span><br><span class="line">print(<span class="string">'list: &#123;&#125;'</span>.format(end-start))</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可看到在20万级数据下一直移除第一个元素双向队列的效率要高得非常多</span></span><br><span class="line">deque: 0.08118391036987305</span><br><span class="line">list: 4.417634010314941</span><br></pre></td></tr></table></figure><h3 id="有序字典"><a href="#有序字典" class="headerlink" title="有序字典"></a>有序字典</h3><p>标准字典是无序的。也就是说在拥有相同键值对的两个dict上面迭代，可能会出现不同的迭代顺序。标准的字典之所以会出现这种奇怪的现象，是由其快速哈希表（fast hash table）的实现方式导致的<br><strong>collections</strong>模块中的<strong>OrderedDict</strong>类，是一种特殊的字典，它能按照键的插入顺序，来保存键值对在字典中的次序。在OrderedDict上面根据键来迭代，其行为是确定的。这种确定的行为，可以极大地简化测试与调试工作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"> </span><br><span class="line">a = OrderedDict()</span><br><span class="line">a[<span class="string">'foo'</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="string">'bar'</span>] = <span class="number">2</span></span><br><span class="line">b = OrderedDict()</span><br><span class="line">b[<span class="string">'foo'</span>] = <span class="string">'red'</span></span><br><span class="line">b[<span class="string">'bar'</span>] = <span class="string">'blue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> value1, value2 <span class="keyword">in</span> zip(a.values(), b.values()):</span><br><span class="line">    print(value1, value2)</span><br></pre></td></tr></table></figure><h3 id="带有默认值的字典"><a href="#带有默认值的字典" class="headerlink" title="带有默认值的字典"></a>带有默认值的字典</h3><p>字典可以用来保存一些统计数据。但是，由于字典里面未必有我们要查询的那个键，所以在用字典保存计数器的时候，就必须用稍微麻烦一些的方式，才能够实现这种简单的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stats = &#123;&#125;</span><br><span class="line">key = <span class="string">'my_counter'</span></span><br><span class="line"><span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> stats:</span><br><span class="line">    stats[key] = <span class="number">0</span></span><br><span class="line">stats[key] += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>我们可以用collections模块中的defaultdict类来简化上述代码。如果字典中没有待访问的键，那么它就会把某个默认值与这个键自动关联起来。于是，我们只要提供返回默认值的函数即可，字典会调用该函数为每一个默认的键指定默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">dict = defaultdict(int)</span><br><span class="line">print(dict[<span class="string">'a'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># out</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="堆队列"><a href="#堆队列" class="headerlink" title="堆队列"></a>堆队列</h3><p>堆（heap）是一种数据结构，很适合用来实现优先级队列。heapq模块提供了<strong>heappush</strong>、<strong>heappop</strong>和<strong>nsmallest</strong>等一些函数，能够在标准的list类型之中创建堆结构<br>各种优先级的元素，都可以按任意顺序插入堆中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">heapq.heappush(a, <span class="number">5</span>)</span><br><span class="line">heapq.heappush(a, <span class="number">3</span>)</span><br><span class="line">heapq.heappush(a, <span class="number">7</span>)</span><br><span class="line">heapq.heappush(a, <span class="number">4</span>)</span><br><span class="line">print(<span class="string">'Before: '</span>, a)</span><br><span class="line"><span class="comment"># 使用sort后依然能保持堆的结构，但是添加reverse后就不能保持堆结构了</span></span><br><span class="line"><span class="comment"># a.sort()</span></span><br><span class="line">print(<span class="string">'After； '</span>, a)</span><br><span class="line"><span class="comment"># 按照优先级弹出元素的，数值越小优先级越大</span></span><br><span class="line">print(heapq.heappop(a), heapq.heappop(a), heapq.heappop(a), heapq.heappop(a))</span><br></pre></td></tr></table></figure><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>在list上面使用index方法来搜索某个元素，所耗的时间会与列表的长度成线性比例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = list(range(<span class="number">10</span>**<span class="number">6</span>))</span><br><span class="line">i = x.index(<span class="number">991234</span>)</span><br></pre></td></tr></table></figure><p><strong>bisect</strong>模块中的bisect_left等函数，提供了高效的二分折半搜索算法，能够在一系列排好顺序的元素之中搜寻某个值。由bisect_left函数所返回的索引，表示待搜寻的值在序列中的插入点（将该值插在此处，能够使序列依然保持有序）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i= bisect_left(x, <span class="number">991234</span>)</span><br></pre></td></tr></table></figure><p>二分搜算法的复杂度，是对数级别的。这就意味着，用bisect来搜索包含一百个元素的列表，与用index来搜索包含14个元素的列表，所耗费的时间差不多。由此可见，这种对数级别的算法，要比线性级别的算法快很多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bisect <span class="keyword">import</span> bisect_left</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">a = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>)]</span><br><span class="line"></span><br><span class="line">start = time()</span><br><span class="line">bisect_left(a, <span class="number">9000</span>)</span><br><span class="line">end = time()</span><br><span class="line">print(<span class="string">'bisect: &#123;&#125;'</span>.format(end - start))</span><br><span class="line"></span><br><span class="line">start = time()</span><br><span class="line">a.index(<span class="number">9000</span>)</span><br><span class="line">end = time()</span><br><span class="line">print(<span class="string">'list: &#123;&#125;'</span>.format(end - start))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">bisect: <span class="number">1.3828277587890625e-05</span></span><br><span class="line">list: <span class="number">0.000225067138671875</span></span><br></pre></td></tr></table></figure><p>通过运行结果显而易见，binsect的搜索效率远大于index的搜索效率</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recorded something 《EffectivePython》advices notes&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://smileorigin.site/categories/Python/"/>
    
    
      <category term="Notes" scheme="http://smileorigin.site/tags/Notes/"/>
    
      <category term="EffectivePython" scheme="http://smileorigin.site/tags/EffectivePython/"/>
    
      <category term="Advices" scheme="http://smileorigin.site/tags/Advices/"/>
    
  </entry>
  
  <entry>
    <title>Virtualenv</title>
    <link href="http://smileorigin.site/python/virtualenv/"/>
    <id>http://smileorigin.site/python/virtualenv/</id>
    <published>2018-08-06T10:20:00.000Z</published>
    <updated>2020-06-20T07:41:15.636Z</updated>
    
    <content type="html"><![CDATA[<p>Something of a tool, the tool can easy to create isolated Python environments–Virtualenv.</p><a id="more"></a><blockquote><p>本文为学习<a href="https://virtualenv.pypa.io/en/stable">Virtualenv</a>官方文档的笔记</p><p>英文好的出门左拐官方文档美滋滋</p></blockquote><h2 id="Why-use-Virtualenv"><a href="#Why-use-Virtualenv" class="headerlink" title="Why use Virtualenv?"></a>Why use Virtualenv?</h2><p>我们一般在本地会有很多项目，每个项目所依赖的包一般都是不同的，如果在整个系统的Python环境下安装各种项目需要的第三方模块会导致整个系统的Python环境十分臃肿，也很容易搞乱整个环境，造成不好修复的后果。如果我们能为每个项目都提供独立的Python运行环境与系统隔离不是美滋滋，Virtualenv就是这样美滋滋的工具<br>Virtualenv能创建理论上无数的不同的Python运行环境，在每个环境里面我们可以做着和在系统环境下一模一样的事情，且不论你怎么弄都不会影响到全局的Python环境</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>To install globally with pip(if you have pip 1.3 or greater installed globally)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sudo] pip install virtualenv</span><br></pre></td></tr></table></figure><p>Example<br>The following procedure indicates that the installation is successful，the installation version is 16.0.0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">smileorigins-MacBook-Pro:~ smileorigin$ pip3 install virtualenv</span><br><span class="line">Collecting virtualenv</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/b6/<span class="number">30</span>/<span class="number">96</span>a02b2287098b23b875bc8c2f58071c35d2efe84f747b64d523721dc2b5/virtualenv<span class="number">-16.0</span><span class="number">.0</span>-py2.py3-none-any.whl (<span class="number">1.9</span>MB)</span><br><span class="line">    <span class="number">100</span>% |████████████████████████████████| <span class="number">1.9</span>MB <span class="number">88</span>kB/s </span><br><span class="line">Installing collected packages: virtualenv</span><br><span class="line">Successfully installed virtualenv<span class="number">-16.0</span><span class="number">.0</span></span><br><span class="line">smileorigins-MacBook-Pro:~ smileorigin$ virtualenv --version</span><br><span class="line"><span class="number">16.0</span><span class="number">.0</span></span><br><span class="line">smileorigins-MacBook-Pro:~ smileorigin$</span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>Virtualenv has one basic command</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv ENV</span><br></pre></td></tr></table></figure><p><strong>ENV</strong> is a directory to place the new virtual environment</p><ul><li><strong>ENV/lib/</strong> and <strong>ENV/include/</strong><br>  Containing supporting library files for a new virtualenv python<br>  Packages installed in this environment will live under <strong>ENV/lib/pythonX.X/site-packages/</strong></li><li><strong>ENV/bin/</strong><br>  Containing the executables – noticeably a new <strong>python</strong><br>  Thus running a script with <strong>#! /path/to/ENV/bin/python</strong> would run that script under this virtualenv’s python</li><li><strong>pip</strong> and <strong>setuptools</strong> are installed<br>  This associated pip can be run from <strong>ENV/bin/pip</strong></li></ul><p>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">smileorigins-MacBook-Pro:~ smileorigin$ mkdir test_env</span><br><span class="line">smileorigins-MacBook-Pro:~ smileorigin$ virtualenv test_env</span><br><span class="line">Using base prefix <span class="string">'/Library/Frameworks/Python.framework/Versions/3.7'</span></span><br><span class="line">New python executable <span class="keyword">in</span> /Users/smileorigin/test_env/bin/python3<span class="number">.7</span></span><br><span class="line">Also creating executable <span class="keyword">in</span> /Users/smileorigin/test_env/bin/python</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br></pre></td></tr></table></figure><h2 id="Activate-script"><a href="#Activate-script" class="headerlink" title="Activate script"></a>Activate script</h2><p>In a newly created virtualenv there will also be a <strong>activate</strong> shell script<br>On Posix systems, this resides in <strong>ENV</strong> , so  you can run :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source bin/activate</span><br></pre></td></tr></table></figure><p>To undo these changes to your path (and prompt), just run:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">smileorigins-MacBook-Pro:test_env smileorigin$ source bin/activate</span><br><span class="line">(test_env) smileorigins-MacBook-Pro:test_env smileorigin$ python3</span><br><span class="line">Python <span class="number">3.7</span><span class="number">.0</span> (v3<span class="number">.7</span><span class="number">.0</span>:<span class="number">1</span>bf9cc5093, Jun <span class="number">26</span> <span class="number">2018</span>, <span class="number">23</span>:<span class="number">26</span>:<span class="number">24</span>) </span><br><span class="line">[Clang <span class="number">6.0</span> (clang<span class="number">-600.0</span><span class="number">.57</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exit()</span><br><span class="line">(test_env) smileorigins-MacBook-Pro:test_env smileorigin$ deactivate</span><br></pre></td></tr></table></figure><h2 id="Inherit-global-site-packages"><a href="#Inherit-global-site-packages" class="headerlink" title="Inherit global site-packages"></a>Inherit global site-packages</h2><p>If you want to inherit packages from <strong>/usr/lib/python2.7/site-packages</strong> (or whatever your global site-packages directory is), you can run:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --system-site-packages ENV</span><br></pre></td></tr></table></figure><p>This can be used if you have control over the global site-packages directory, and you want to depend on the packages there. If you want isloation from the global system, do not use this flag.<br>Example<br>My global python environment is 3.7.0, so we can see the result is inherit 3.7.0 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">smileorigins-MacBook-Pro:~ smileorigin$ mkdir test_inherit</span><br><span class="line">smileorigins-MacBook-Pro:~ smileorigin$ virtualenv --system-site-packages test_inherit</span><br><span class="line">Using base prefix <span class="string">'/Library/Frameworks/Python.framework/Versions/3.7'</span></span><br><span class="line">New python executable <span class="keyword">in</span> /Users/smileorigin/test_inherit/bin/python3<span class="number">.7</span></span><br><span class="line">Also creating executable <span class="keyword">in</span> /Users/smileorigin/test_inherit/bin/python</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br><span class="line">smileorigins-MacBook-Pro:~ smileorigin$ cd test_inherit</span><br><span class="line">smileorigins-MacBook-Pro:test_inherit smileorigin$ source bin/activate</span><br><span class="line">(test_inherit) smileorigins-MacBook-Pro:test_inherit smileorigin$ python --version</span><br><span class="line">Python <span class="number">3.7</span><span class="number">.0</span></span><br><span class="line">(test_inherit) smileorigins-MacBook-Pro:test_inherit smileorigin$ python</span><br><span class="line">Python <span class="number">3.7</span><span class="number">.0</span> (v3<span class="number">.7</span><span class="number">.0</span>:<span class="number">1</span>bf9cc5093, Jun <span class="number">26</span> <span class="number">2018</span>, <span class="number">23</span>:<span class="number">26</span>:<span class="number">24</span>) </span><br><span class="line">[Clang <span class="number">6.0</span> (clang<span class="number">-600.0</span><span class="number">.57</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Something of a tool, the tool can easy to create isolated Python environments–Virtualenv.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://smileorigin.site/categories/Python/"/>
    
    
      <category term="Notes" scheme="http://smileorigin.site/tags/Notes/"/>
    
      <category term="Virtualenv" scheme="http://smileorigin.site/tags/Virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>Stored Procedure</title>
    <link href="http://smileorigin.site/database/mysql/stored-procedure/"/>
    <id>http://smileorigin.site/database/mysql/stored-procedure/</id>
    <published>2018-08-04T04:05:00.000Z</published>
    <updated>2020-06-20T07:40:27.764Z</updated>
    
    <content type="html"><![CDATA[<p>There is recorded something of MySQL stored procedure.</p><a id="more"></a><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>本文大部分参考自以下文章：<br><a href="https://www.jianshu.com/p/7b2d74701ccd">https://www.cnblogs.com/mark-chan/p/5384139.html</a><br>仅做个人笔记使用</p><h2 id="什么是存储过程？"><a href="#什么是存储过程？" class="headerlink" title="什么是存储过程？"></a>什么是存储过程？</h2><p>一组可编程的函数，是为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数（需要时）来调用执行<br>存储过程可以用来封装特定功能，以便应用于不同的平台，可以看做对面向对象编程的模拟</p><h2 id="存储过程的优点"><a href="#存储过程的优点" class="headerlink" title="存储过程的优点"></a>存储过程的优点</h2><ul><li>增强SQL语言的功能和灵活性<br>  存储过程可以用控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算</li><li>标准组件式编程<br>  存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的SQL语句<br>  数据库管理人员可随时对存储过程进行修改，对应用程序源代码毫无影响</li><li>较快的执行速度<br>  如果某一操作包含大量的Transaction-SQL代码或分别被多次执行，那么存储过程要比批处理执行速度快很多，因为存储过程是预编译的。在首次运行一个存储过程时查询优化器对其进行分析优化，并且给出最终被存储在系统表中的执行计划。而批处理的Transation-SQL语句在每次运行时都要进行编译和优化，速度相对要慢一些</li><li>减少网络流量<br>  针对同一个数据库对象的操作（如：查询、修改），如果这一操作所涉及的Transation-SQL语句被组织进存储过程，那么当在客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而大大减少网络流量并降低了网络负载</li><li>作为一种安全机制来充分利用<br>  通过对执行某一存储过程的权限进行限制，能够实现对相应的数据的访问权限的限制，避免了非授权用户对数据的访问，保证了数据的安全</li></ul><h2 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line">CREATE PROCEDURE PROCEDURE_NAME([[IN | OUT | INOUT] ARG_NAME TYPE [, [INT | OUT | INOUT] ARG_NAME TYPE...]])</span><br><span class="line">BEGIN</span><br><span class="line">PROCEDURE BODY</span><br><span class="line">END</span><br><span class="line">//</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h3 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h3><p>MySQL默认以”;”为分隔符，如果没有声明分隔符，则编译器会把存储过程当成SQL语句进行处理，因此编译过程会报错，所以要先用“DELIMITER //”声明当前段分隔符，让编译器把两个“//“之间的内容当做存储过程的代码，不会执行这些代码，“DELIMITER ;”意为把分隔符还原</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>存储过程根据需要可能会有输入、输出、输入输出参数，如果有多个参数用“,”分隔开。MySQL存储过程的参数用在存储过程的定义，共有三种类型：IN、OUT、INOUT</p><ul><li>IN<br>  参数的值必须在调用存储过程前指定，在存储过程中修改该参数的值不能被返回<br>  即类似JAVA中的值传递，传递的相当于参数的值得拷贝，而不是参数本身</li><li>OUT<br>  该值可在存储过程内部被改变，并可返回，未在存储过程中赋值的话，则在存储过程中值为空<br>  即类似JAVA中的引用传递，传递的是该参数本身的地址，该参数在存储过程中被修改相当于直接修改该参数本身</li><li>INOUT<br>  具备IN、OUT的特性，在调用时指定，并可被改变和返回</li><li>过程体（PROCEDURE BODY）<br>  过程体的开始与结束使用<strong>BEGIN</strong>和<strong>END</strong>进行标识</li></ul><h3 id="IN示例"><a href="#IN示例" class="headerlink" title="IN示例"></a>IN示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE in_param(IN p_in int)</span><br><span class="line">-&gt; BEGIN</span><br><span class="line">-&gt; SELECT p_in;</span><br><span class="line">-&gt; SET p_in=2;</span><br><span class="line">-&gt; SELECT p_in;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SET @p_in=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL in_param(@p_in);</span><br><span class="line">+------+</span><br><span class="line">| p_in |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">+------+</span><br><span class="line">| p_in |</span><br><span class="line">+------+</span><br><span class="line">|    2 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @p_in;</span><br><span class="line">+-------+</span><br><span class="line">| @p_in |</span><br><span class="line">+-------+</span><br><span class="line">|     1 |</span><br><span class="line">+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>从运行结果可以得出，p_in虽然在存储过程中被修改了，但并不影响存储过程外的@p_in的值</p><h3 id="OUT示例"><a href="#OUT示例" class="headerlink" title="OUT示例"></a>OUT示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE out_param(OUT p_out int)</span><br><span class="line">-&gt; BEGIN</span><br><span class="line">-&gt; SELECT p_out;</span><br><span class="line">-&gt; SET p_out=2;</span><br><span class="line">-&gt; SELECT p_out;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line">mysql&gt; SET @p_out=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL out_param(@p_out);</span><br><span class="line">+-------+</span><br><span class="line">| p_out |</span><br><span class="line">+-------+</span><br><span class="line">|  NULL |</span><br><span class="line">+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">+-------+</span><br><span class="line">| p_out |</span><br><span class="line">+-------+</span><br><span class="line">|     2 |</span><br><span class="line">+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @p_out;</span><br><span class="line">+--------+</span><br><span class="line">| @p_out |</span><br><span class="line">+--------+</span><br><span class="line">|      2 |</span><br><span class="line">+--------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>从运行结果可以得出，p_out在存储过程中没被赋值的情况下是读取不到数据的，赋值后再存储过程外的@p_out的值也被修改了</p><h3 id="INOUT示例"><a href="#INOUT示例" class="headerlink" title="INOUT示例"></a>INOUT示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE inout_param(inout p_inout int)</span><br><span class="line">-&gt; BEGIN</span><br><span class="line">-&gt; SELECT p_inout;</span><br><span class="line">-&gt; SET p_inout=2;</span><br><span class="line">-&gt; SELECT p_inout;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line">mysql&gt; SET @p_inout=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL inout_param(@p_inout);</span><br><span class="line">+---------+</span><br><span class="line">| p_inout |</span><br><span class="line">+---------+</span><br><span class="line">|       1 |</span><br><span class="line">+---------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">+---------+</span><br><span class="line">| p_inout |</span><br><span class="line">+---------+</span><br><span class="line">|       2 |</span><br><span class="line">+---------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @p_inout;</span><br><span class="line">+----------+</span><br><span class="line">| @p_inout |</span><br><span class="line">+----------+</span><br><span class="line">|        2 |</span><br><span class="line">+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>从运行结果可以得出，inout参数结合了in和out的特点，传进去的参数既可以读取又可以修改</p><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><ul><li>语法<br>  <code>DROP PROCEDURE PROCEDURE_NAME;</code></li><li>Example  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP PROCEDURE p;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p><strong>DECLARE</strong>之前不能调用语句</p><ul><li>语法<br>  <code>DECLARE FIELD_NAME TYPE;</code></li><li>赋值<br>  <code>SET FIELD_NAME=VALUE;</code></li><li>实例  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE p()</span><br><span class="line">-&gt; BEGIN</span><br><span class="line">-&gt; DECLARE d INT;</span><br><span class="line">-&gt; SET @d=111;</span><br><span class="line">-&gt; SELECT @d;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line">mysql&gt; CALL p;</span><br><span class="line">+------+</span><br><span class="line">| @d   |</span><br><span class="line">+------+</span><br><span class="line">|  111 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL p();</span><br><span class="line">+------+</span><br><span class="line">| @d   |</span><br><span class="line">+------+</span><br><span class="line">|  111 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>数值类型（图片来自<a href="http://www.runoob.com/mysql/mysql-data-types.html">菜鸟教程</a>）<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204234234.png" alt=""></li><li>日期和时间类型（图片来自<a href="http://www.runoob.com/mysql/mysql-data-types.html">菜鸟教程</a>）<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204234244.png" alt=""></li><li>字符串类型（图片来自<a href="http://www.runoob.com/mysql/mysql-data-types.html">菜鸟教程</a>）<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204234252.png" alt=""></li></ul><h2 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h2><p>用户变量一般以<strong>@</strong>开头，如果滥用用户变量会导致程序难以理解以及管理<br>实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户变量方式1</span></span><br><span class="line">mysql&gt; SELECT <span class="string">'HELLO WORLD!'</span> INTO @X;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @X;</span><br><span class="line">+--------------+</span><br><span class="line">| @X           |</span><br><span class="line">+--------------+</span><br><span class="line">| HELLO WORLD! |</span><br><span class="line">+--------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户变量方式2</span></span><br><span class="line">mysql&gt; SET @y=12;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @y;</span><br><span class="line">+------+</span><br><span class="line">| @y   |</span><br><span class="line">+------+</span><br><span class="line">|   12 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SET @y=1+2+3+4*5;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @y;</span><br><span class="line">+------+</span><br><span class="line">| @y   |</span><br><span class="line">+------+</span><br><span class="line">|   26 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>在存储过程中使用用户变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE p()</span><br><span class="line">-&gt; BEGIN</span><br><span class="line">-&gt; SELECT @global;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line">mysql&gt; SET @global=12345;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL p();</span><br><span class="line">+---------+</span><br><span class="line">| @global |</span><br><span class="line">+---------+</span><br><span class="line">|   12345 |</span><br><span class="line">+---------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="if…-then…-elseif…else"><a href="#if…-then…-elseif…else" class="headerlink" title="if…[then…]elseif…else"></a>if…[then…]elseif…else</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP PROCEDURE IF EXISTS pro_if;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE pro_if(IN <span class="built_in">type</span> INT) </span><br><span class="line">-&gt; BEGIN </span><br><span class="line">-&gt; DECLARE c VARCHAR(500); </span><br><span class="line">-&gt; IF <span class="built_in">type</span> = 0 THEN SET c = <span class="string">'PARAM IS 0'</span>; </span><br><span class="line">-&gt; ELSEIF <span class="built_in">type</span> = 1 THEN SET c = <span class="string">'PARAM IS 1'</span>; </span><br><span class="line">-&gt; ELSE SET c = <span class="string">'PARAM IS OTHERS'</span>; </span><br><span class="line">-&gt; END IF;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL pro_if(0);</span><br><span class="line">+------------+</span><br><span class="line">| c          |</span><br><span class="line">+------------+</span><br><span class="line">| PARAM IS 0 |</span><br><span class="line">+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL pro_if(1);</span><br><span class="line">+------------+</span><br><span class="line">| c          |</span><br><span class="line">+------------+</span><br><span class="line">| PARAM IS 1 |</span><br><span class="line">+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL pro_if(2);</span><br><span class="line">+-----------------+</span><br><span class="line">| c               |</span><br><span class="line">+-----------------+</span><br><span class="line">| PARAM IS OTHERS |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><h3 id="case…when"><a href="#case…when" class="headerlink" title="case…when"></a>case…when</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE proc_case(<span class="built_in">type</span> int)</span><br><span class="line">-&gt; BEGIN</span><br><span class="line">-&gt; DECLARE c VARCHAR(500);</span><br><span class="line">-&gt; <span class="keyword">case</span> <span class="built_in">type</span></span><br><span class="line">-&gt; WHEN 0 THEN SET c = <span class="string">'PARAM IS 0'</span>;</span><br><span class="line">-&gt; WHEN 1 THEN SET c = <span class="string">'PARAM IS 1'</span>;</span><br><span class="line">-&gt; WHEN 2 THEN SET c = <span class="string">'PARAM IS 2'</span>;</span><br><span class="line">-&gt; ELSE SET c = <span class="string">'PARAM IS OTHERS'</span>;</span><br><span class="line">-&gt; SELECT c;</span><br><span class="line">-&gt; END CASE;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL proc_case(0);</span><br><span class="line">+------------+</span><br><span class="line">| c          |</span><br><span class="line">+------------+</span><br><span class="line">| PARAM IS 0 |</span><br><span class="line">+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL proc_case(1);</span><br><span class="line">+------------+</span><br><span class="line">| c          |</span><br><span class="line">+------------+</span><br><span class="line">| PARAM IS 1 |</span><br><span class="line">+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL proc_case(2);</span><br><span class="line">+------------+</span><br><span class="line">| c          |</span><br><span class="line">+------------+</span><br><span class="line">| PARAM IS 2 |</span><br><span class="line">+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL proc_case(3);</span><br><span class="line">+-----------------+</span><br><span class="line">| c               |</span><br><span class="line">+-----------------+</span><br><span class="line">| PARAM IS OTHERS |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE proc_while(IN n INT)</span><br><span class="line">-&gt; BEGIN</span><br><span class="line">-&gt; DECLARE i INT;</span><br><span class="line">-&gt; DECLARE s INT;</span><br><span class="line">-&gt; SET i=0;</span><br><span class="line">-&gt; SET s=0;</span><br><span class="line">-&gt; WHILE i&lt;=n DO</span><br><span class="line">-&gt; SET s = s + i;</span><br><span class="line">-&gt; SET i = i + 1;</span><br><span class="line">-&gt; END WHILE;</span><br><span class="line">-&gt; SELECT s;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line">mysql&gt; CALL proc_while(2);</span><br><span class="line">+------+</span><br><span class="line">| s    |</span><br><span class="line">+------+</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL proc_while(12);</span><br><span class="line">+------+</span><br><span class="line">| s    |</span><br><span class="line">+------+</span><br><span class="line">|   78 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><h3 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP PROCEDURE IF EXISTS proc_loop;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE proc_loop(IN n INT)</span><br><span class="line">-&gt; BEGIN</span><br><span class="line">-&gt; DECLARE i INT;</span><br><span class="line">-&gt; DECLARE s INT;</span><br><span class="line">-&gt; SET i=0;</span><br><span class="line">-&gt; SET s=0;</span><br><span class="line">-&gt; LOOP_LABEL:LOOP</span><br><span class="line">-&gt; SET s = s + i;</span><br><span class="line">-&gt; SET i = i + 1;</span><br><span class="line">-&gt; IF i &gt; 10 THEN LEAVE LOOP_LABEL;</span><br><span class="line">-&gt; END IF;</span><br><span class="line">-&gt; END LOOP;</span><br><span class="line">-&gt; SELECT s;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL proc_loop(2);</span><br><span class="line">+------+</span><br><span class="line">| s    |</span><br><span class="line">+------+</span><br><span class="line">|   55 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="repeat…end-repeat"><a href="#repeat…end-repeat" class="headerlink" title="repeat…end repeat"></a>repeat…end repeat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP PROCEDURE IF EXISTS proc_repeat;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE proc_repeat(IN n INT) </span><br><span class="line">-&gt; BEGIN </span><br><span class="line">-&gt; DECLARE i INT; </span><br><span class="line">-&gt; DECLARE s INT; </span><br><span class="line">-&gt; SET i=0; </span><br><span class="line">-&gt; SET s=0; </span><br><span class="line">-&gt; REPEAT </span><br><span class="line">-&gt; SET s = s + i; </span><br><span class="line">-&gt; SET i = i + 1; </span><br><span class="line">-&gt; UNTIL i&gt;10 </span><br><span class="line">-&gt; END REPEAT; </span><br><span class="line">-&gt; SELECT s; </span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line">mysql&gt; CALL proc_repeat(2);</span><br><span class="line">+------+</span><br><span class="line">| s    |</span><br><span class="line">+------+</span><br><span class="line">|   55 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There is recorded something of MySQL stored procedure.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database" scheme="http://smileorigin.site/categories/Database/"/>
    
    
      <category term="Notes" scheme="http://smileorigin.site/tags/Notes/"/>
    
      <category term="MySQL" scheme="http://smileorigin.site/tags/MySQL/"/>
    
      <category term="Procedure" scheme="http://smileorigin.site/tags/Procedure/"/>
    
  </entry>
  
  <entry>
    <title>PAT解题记录</title>
    <link href="http://smileorigin.site/arithmetic/pat/history/"/>
    <id>http://smileorigin.site/arithmetic/pat/history/</id>
    <published>2018-08-03T13:50:00.000Z</published>
    <updated>2020-06-20T07:40:13.859Z</updated>
    
    <content type="html"><![CDATA[<p>题目来自<a href="https://pintia.cn/problem-sets/994805260223102976/problems">PAT网站</a>的 BasicLevel 题目<br>本文用来记录个人解答的PAT题目，仅供个人学习使用，未经允许不得转载，以下均为Python3解法</p><a id="more"></a><h2 id="1001-害死人不偿命的-3n-1-猜想-15"><a href="#1001-害死人不偿命的-3n-1-猜想-15" class="headerlink" title="1001 害死人不偿命的(3n+1)猜想 (15)"></a>1001 害死人不偿命的(3n+1)猜想 (15)</h2><p>卡拉兹(Callatz)猜想：<br>对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。这样一直反复砍下去，最后一定在某一步得到n=1。卡拉兹在1950年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证(3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……<br>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过1000的正整数n，简单地数一下，需要多少步（砍几下）才能得到n=1？<br><strong>输入格式：</strong>每个测试输入包含1个测试用例，即给出自然数n的值。<br><strong>输出格式：</strong>输出从n计算到1需要的步数。<br><strong>输入样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n)</span>:</span></span><br><span class="line">  step = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">    step += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">      n /= <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      n = (<span class="number">3</span> * n + <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> step</span><br><span class="line"></span><br><span class="line">test = int(input())</span><br><span class="line">print(solution(test))</span><br></pre></td></tr></table></figure><h2 id="1002-写出这个数-20"><a href="#1002-写出这个数-20" class="headerlink" title="1002 写出这个数 (20)"></a>1002 写出这个数 (20)</h2><p>读入一个自然数n，计算其各位数字之和，用汉语拼音写出和的每一位数字。<br><strong>输入格式：</strong>每个测试输入包含1个测试用例，即给出自然数n的值。这里保证n小于10^100^。<br><strong>输出格式：</strong>在一行内输出n的各位数字之和的每一位，拼音数字间有1 空格，但一行中最后一个拼音数字后没有空格。<br><strong>输入样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234567890987654321123456789</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yi <span class="keyword">san</span> <span class="keyword">wu</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n)</span>:</span></span><br><span class="line">  sum_str = str(sum(map(int, n)))</span><br><span class="line">  table = &#123;<span class="string">'0'</span>:<span class="string">'ling'</span>, <span class="string">'1'</span>:<span class="string">'yi'</span>, <span class="string">'2'</span>:<span class="string">'er'</span>, <span class="string">'3'</span>:<span class="string">'san'</span>, <span class="string">'4'</span>:<span class="string">'si'</span>, <span class="string">'5'</span>:<span class="string">'wu'</span>, <span class="string">'6'</span>:<span class="string">'liu'</span>, <span class="string">'7'</span>:<span class="string">'qi'</span>, <span class="string">'8'</span>:<span class="string">'ba'</span>, <span class="string">'9'</span>:<span class="string">'jiu'</span>&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">' '</span>.join([table[key] <span class="keyword">for</span> key <span class="keyword">in</span> sum_str])</span><br><span class="line"></span><br><span class="line">test = input()</span><br><span class="line">print(solution(test))</span><br></pre></td></tr></table></figure><h2 id="1004-成绩排名-20"><a href="#1004-成绩排名-20" class="headerlink" title="1004 成绩排名 (20)"></a>1004 成绩排名 (20)</h2><p>读入n名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。<br><strong>输入格式：</strong>每个测试输入包含1个测试用例，格式为:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第<span class="number">1</span>行：正整数n</span><br><span class="line">第<span class="number">2</span>行：第<span class="number">1</span>个学生的姓名 学号 成绩</span><br><span class="line">第<span class="number">3</span>行：第<span class="number">2</span>个学生的姓名 学号 成绩</span><br><span class="line">... ... ...</span><br><span class="line">第n+<span class="number">1</span>行：第n个学生的姓名 学号 成绩</span><br></pre></td></tr></table></figure><p>其中姓名和学号均为不超过10个字符的字符串，成绩为0到100之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。<br><strong>输出格式：</strong>对每个测试用例输出2行，第1行是成绩最高学生的姓名和学号，第2行是成绩最低学生的姓名和学号，字符串间有1空格。<br><strong>输入样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">Joe Math990112 <span class="number">89</span></span><br><span class="line">Mike CS991301 <span class="number">100</span></span><br><span class="line">Mary EE990830 <span class="number">95</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Mike</span> <span class="string">CS991301</span></span><br><span class="line"><span class="attr">Joe</span> <span class="string">Math990112</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(count, grades)</span>:</span></span><br><span class="line">  grades = sorted(grades, key=<span class="keyword">lambda</span> grade: int(grade[<span class="number">2</span>]), reverse=<span class="literal">True</span>)</span><br><span class="line">  print(<span class="string">'&#123;&#125; &#123;&#125;'</span>.format(grades[<span class="number">0</span>][<span class="number">0</span>], grades[<span class="number">0</span>][<span class="number">1</span>]))</span><br><span class="line">  print(<span class="string">'&#123;&#125; &#123;&#125;'</span>.format(grades[count<span class="number">-1</span>][<span class="number">0</span>], grades[count<span class="number">-1</span>][<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">count = int(input())</span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(count):</span><br><span class="line">  data.append(input().split(<span class="string">' '</span>))</span><br><span class="line">solution(count, data)</span><br></pre></td></tr></table></figure><h2 id="1006-换个格式输出整数-15"><a href="#1006-换个格式输出整数-15" class="headerlink" title="1006 换个格式输出整数 (15)"></a>1006 换个格式输出整数 (15)</h2><p>让我们用字母B来表示“百”、字母S表示“十”，用“12…n”来表示个位数字n（&amp;lt10），换个格式来输出任一个不超过3位的正整数。例如234应该被输出为BBSSS1234，因为它有2个“百”、3个“十”、以及个位的4。<br><strong>输入格式：</strong>每个测试输入包含1个测试用例，给出正整数n（&amp;lt1000）。<br><strong>输出格式：</strong>每个测试用例的输出占一行，用规定的格式输出n。<br><strong>输入样例1：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">234</span></span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BBSSS1234</span><br></pre></td></tr></table></figure><p><strong>输入样例2：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure><p><strong>输出样例2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SS123</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n)</span>:</span></span><br><span class="line">  nums = list(map(int, n))</span><br><span class="line">  nums = [<span class="number">0</span>] * (<span class="number">3</span> - len(nums)) + nums</span><br><span class="line">  print(<span class="string">'B'</span> * nums[<span class="number">0</span>] + <span class="string">'S'</span> * nums[<span class="number">1</span>] + <span class="string">''</span>.join([str(num) <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, nums[<span class="number">2</span>]+<span class="number">1</span>)]))</span><br><span class="line"></span><br><span class="line">test = input()</span><br><span class="line">solution(test)</span><br></pre></td></tr></table></figure><h2 id="1009-说反话-20"><a href="#1009-说反话-20" class="headerlink" title="1009 说反话 (20)"></a>1009 说反话 (20)</h2><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。<br><strong>输入格式：</strong>测试输入包含一个测试用例，在一行内给出总长度不超过80的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用1个空格分开，输入保证句子末尾没有多余的空格。<br><strong>输出格式：</strong>每个测试用例的输出占一行，输出倒序后的句子。<br><strong>输入样例：</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Hello World Here I Come</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Come I Here World Hello</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(english)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">' '</span>.join(english[::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">english = input().split()</span><br><span class="line">print(solution(english))</span><br></pre></td></tr></table></figure><h2 id="1010-一元多项式求导（25）"><a href="#1010-一元多项式求导（25）" class="headerlink" title="1010 一元多项式求导（25）"></a>1010 一元多项式求导（25）</h2><p>设计函数求一元多项式的导数。（注：xn（n为整数）的一阶导数为nxn−1。）<br><strong>输入格式:</strong><br>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。<br><strong>输出格式:</strong><br>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 <code>0 0</code>。<br><strong>输入样例:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">-5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">-2</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span> <span class="number">3</span> <span class="number">-10</span> <span class="number">1</span> <span class="number">6</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>Solution:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(nums)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(nums), <span class="number">2</span>):</span><br><span class="line">        coe, index = nums[i], nums[i+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        result.append(<span class="string">'&#123;&#125; &#123;&#125;'</span>.format(coe*index, index<span class="number">-1</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        result.append(<span class="string">'0 0'</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">nums = list(map(int, input().split()))</span><br><span class="line">print(<span class="string">' '</span>.join(solution(nums)))</span><br></pre></td></tr></table></figure><h2 id="1011-A-B和C-15"><a href="#1011-A-B和C-15" class="headerlink" title="1011 A+B和C (15)"></a>1011 A+B和C (15)</h2><p>给定区间[-2^31, 2^31]内的3个整数A、B和C，请判断A+B是否大于C。<br><strong>输入格式：</strong><br>输入第1行给出正整数T(&lt;=10)，是测试用例的个数。随后给出T组测试用例，每组占一行，顺序给出A、B和C。整数间以空格分隔。<br><strong>输出格式：</strong><br>对每组测试用例，在一行中输出“Case #X: true”如果A+B&gt;C，否则输出“Case #X: false”，其中X是测试用例的编号（从1开始）。<br><strong>输入样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">2147483647 </span><span class="number">0</span> <span class="number">2147483646</span></span><br><span class="line"><span class="symbol">0 </span>-<span class="number">2147483648</span> -<span class="number">2147483647</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Case</span> <span class="string">#1</span>: <span class="literal">false</span></span><br><span class="line"><span class="keyword">Case</span> <span class="string">#2</span>: <span class="literal">true</span></span><br><span class="line"><span class="keyword">Case</span> <span class="string">#3</span>: <span class="literal">true</span></span><br><span class="line"><span class="keyword">Case</span> <span class="string">#4</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(abcs)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(abcs)):</span><br><span class="line">        print(<span class="string">'Case #&#123;&#125;: &#123;&#125;'</span>.format(i + <span class="number">1</span>, str(abcs[i][<span class="number">0</span>] + abcs[i][<span class="number">1</span>] &gt; abcs[i][<span class="number">2</span>]).lower()))</span><br><span class="line"></span><br><span class="line">count = int(input())</span><br><span class="line">abcs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(count):</span><br><span class="line">    abcs.append(list(map(int, input().split())))</span><br><span class="line">solution(abcs)</span><br></pre></td></tr></table></figure><h2 id="1012-数字分类-20"><a href="#1012-数字分类-20" class="headerlink" title="1012 数字分类 (20)"></a>1012 数字分类 (20)</h2><p>给定一系列正整数，请按要求对数字进行分类，并输出以下5个数字：<br>A1 = 能被5整除的数字中所有偶数的和；<br>A2 = 将被5除后余1的数字按给出顺序进行交错求和，即计算n1-n2+n3-n4…；<br>A3 = 被5除后余2的数字的个数；<br>A4 = 被5除后余3的数字的平均数，精确到小数点后1位；<br>A5 = 被5除后余4的数字中最大数字。<br><strong>输入格式：</strong><br>每个输入包含1个测试用例。每个测试用例先给出一个不超过1000的正整数N，随后给出N个不超过1000的待分类的正整数。数字间以空格分隔。<br><strong>输出格式：</strong><br>对给定的N个正整数，按题目要求计算A1~A5并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。<br>若其中某一类数字不存在，则在相应位置输出“N”。<br><strong>输入样例1：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">20</span> <span class="number">16</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">30 </span><span class="number">11</span> <span class="number">2</span> <span class="number">9.7</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><p><strong>输入样例2：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">8 </span><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">9</span> <span class="number">16</span></span><br></pre></td></tr></table></figure><p><strong>输出样例2：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N <span class="number">11</span> <span class="number">2</span> N <span class="number">9</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(nums)</span>:</span></span><br><span class="line">    a1, a2, a3, a4, a5 = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, [], []</span><br><span class="line">    symbol, flag = <span class="number">1</span>, <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">        remainder = num % <span class="number">5</span></span><br><span class="line">        <span class="keyword">if</span> remainder == <span class="number">0</span> <span class="keyword">and</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            a1 += num</span><br><span class="line">        <span class="keyword">elif</span> remainder == <span class="number">1</span>:</span><br><span class="line">            a2 = a2 + symbol * num</span><br><span class="line">            symbol *= <span class="number">-1</span></span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> remainder == <span class="number">2</span>:</span><br><span class="line">            a3 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> remainder == <span class="number">3</span>:</span><br><span class="line">            a4.append(num)</span><br><span class="line">        <span class="keyword">elif</span> remainder == <span class="number">4</span>:</span><br><span class="line">            a5.append(num)</span><br><span class="line">    a1 = a1 <span class="keyword">if</span> a1 &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'N'</span></span><br><span class="line">    a2 = a2 <span class="keyword">if</span> flag &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'N'</span></span><br><span class="line">    a3 = a3 <span class="keyword">if</span> a3 &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'N'</span></span><br><span class="line">    a4 = round(sum(a4) / len(a4), <span class="number">1</span>) <span class="keyword">if</span> len(a4) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'N'</span></span><br><span class="line">    a5 = max(a5) <span class="keyword">if</span> len(a5) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'N'</span></span><br><span class="line">    print(a1, a2, a3, a4, a5)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nums = list(map(int, input().split()))</span><br><span class="line">solution(nums[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><h2 id="1017-A除以B（20）"><a href="#1017-A除以B（20）" class="headerlink" title="1017 A除以B（20）"></a>1017 A除以B（20）</h2><p>本题要求计算 A/B，其中 A 是不超过 1000 位的正整数，B 是 1 位正整数。你需要输出商数 Q 和余数 R，使得 A=B×Q+R 成立。<br><strong>输入格式:</strong><br>输入在一行中依次给出 A 和 B，中间以 1 空格分隔。<br><strong>输出格式：</strong><br>在一行中依次输出 Q 和 R，中间以 1 空格分隔。<br><strong>输入样例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123456789050987654321</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17636684150141093474</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>Solution:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    q = a // b</span><br><span class="line">    r = a % b</span><br><span class="line">    print(q, r)</span><br><span class="line"></span><br><span class="line">a, b = list(map(int, input().split()))</span><br><span class="line">solution(a, b)</span><br></pre></td></tr></table></figure><h2 id="1021-个位数统计-15"><a href="#1021-个位数统计-15" class="headerlink" title="1021 个位数统计 (15)"></a>1021 个位数统计 (15)</h2><p>给定一个k位整数N = d<del>k-1</del><em>10^k-1^ + … + d<del>1</del></em>10^1^ + d<del>0</del> (0&lt;=d<del>i</del>&lt;=9, i=0,…,k-1, d<del>k-1</del>&gt;0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定N = 100311，则有2个0，3个1，和1个3。<br><strong>输入格式：</strong><br>每个输入包含1个测试用例，即一个不超过1000位的正整数N。<br><strong>输出格式：</strong><br>对N中每一种不同的个位数字，以D:M的格式在一行中输出该位数字D及其在N中出现的次数M。要求按D的升序输出。<br><strong>输入样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100311</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">2</span></span><br><span class="line"><span class="number">1</span>:<span class="number">3</span></span><br><span class="line"><span class="number">3</span>:<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(num)</span>:</span></span><br><span class="line">  result = &#123;&#125;</span><br><span class="line">  num = list(num)</span><br><span class="line">  num.sort()</span><br><span class="line">  <span class="keyword">for</span> key <span class="keyword">in</span> num:</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> result:</span><br><span class="line">      result[key] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      result[key] = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> k,v <span class="keyword">in</span> result.items():</span><br><span class="line">    print(<span class="string">'&#123;&#125;:&#123;&#125;'</span>.format(k,v))</span><br><span class="line">test = input()</span><br><span class="line">solution(test)</span><br></pre></td></tr></table></figure><h2 id="1023-组个最小数-20"><a href="#1023-组个最小数-20" class="headerlink" title="1023 组个最小数 (20)"></a>1023 组个最小数 (20)</h2><p>给定数字0-9各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意0不能做首位）。例如：给定两个0，两个1，三个5，一个8，我们得到的最小的数就是10015558。<br>现给定数字，请编写程序输出能够组成的最小的数。<br><strong>输入格式：</strong><br>每个输入包含1个测试用例。每个测试用例在一行中给出10个非负整数，顺序表示我们拥有数字0、数字1、……数字9的个数。整数间用一个空格分隔。10个数字的总个数不超过50，且至少拥有1个非0的数字。<br><strong>输出格式：</strong><br>在一行中输出能够组成的最小的数。<br><strong>输入样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10015558</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(counts)</span>:</span></span><br><span class="line">    result = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">      result += str(i) * counts[i]</span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">0</span>] + <span class="string">'0'</span> * counts[<span class="number">0</span>] + result[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">counts = list(map(int, input().split(<span class="string">' '</span>)))</span><br><span class="line">print(solution(counts))</span><br></pre></td></tr></table></figure><h2 id="1031-查验身份证-15"><a href="#1031-查验身份证-15" class="headerlink" title="1031 查验身份证(15)"></a>1031 查验身份证(15)</h2><p>一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：<br>首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值Z；最后按照以下关系对应Z值与校验码M的值：<br>Z：0 1 2 3 4 5 6 7 8 9 10\ M：1 0 X 9 8 7 6 5 4 3 2<br>现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。<br><strong>输入格式：</strong><br>输入第一行给出正整数N（&lt;= 100）是输入的身份证号码的个数。随后N行，每行给出1个18位身份证号码。<br><strong>输出格式：</strong><br>按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出“All passed”。<br><strong>输入样例1：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">320124198808240056</span></span><br><span class="line"><span class="number">12010</span>X198901011234</span><br><span class="line"><span class="number">110108196711301866</span></span><br><span class="line"><span class="number">37070419881216001</span>X</span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12010</span>X198901011234</span><br><span class="line"><span class="number">110108196711301866</span></span><br><span class="line"><span class="number">37070419881216001</span>X</span><br></pre></td></tr></table></figure><p><strong>输入样例2：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">320124198808240056</span></span><br><span class="line"><span class="number">110108196711301862</span></span><br></pre></td></tr></table></figure><p><strong>输出样例2：</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">All</span> passed</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(ids)</span>:</span></span><br><span class="line">  table = &#123;<span class="number">0</span>:<span class="string">'1'</span>, <span class="number">1</span>:<span class="string">'0'</span>, <span class="number">2</span>:<span class="string">'X'</span>, <span class="number">3</span>:<span class="string">'9'</span>, <span class="number">4</span>:<span class="string">'8'</span>, <span class="number">5</span>:<span class="string">'7'</span>, <span class="number">6</span>:<span class="string">'6'</span>, <span class="number">7</span>:<span class="string">'5'</span>, <span class="number">8</span>:<span class="string">'4'</span>, <span class="number">9</span>:<span class="string">'3'</span>, <span class="number">10</span>:<span class="string">'2'</span>&#125;</span><br><span class="line">  weight = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line">  flag = <span class="literal">True</span></span><br><span class="line">  <span class="keyword">for</span> id <span class="keyword">in</span> ids:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> id[:<span class="number">17</span>].isdigit():</span><br><span class="line">      print(id)</span><br><span class="line">      flag = <span class="literal">False</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    weight_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>):</span><br><span class="line">      weight_sum += int(id[i]) * weight[i]</span><br><span class="line">    <span class="keyword">if</span> table[weight_sum % <span class="number">11</span>] != id[<span class="number">17</span>]:</span><br><span class="line">      print(id)</span><br><span class="line">      flag = <span class="literal">False</span></span><br><span class="line">  <span class="keyword">if</span> (flag):</span><br><span class="line">    print(<span class="string">'All passed'</span>)</span><br><span class="line"></span><br><span class="line">count = int(input())</span><br><span class="line">data = [input() <span class="keyword">for</span> i <span class="keyword">in</span> range(count)]</span><br><span class="line">solution(data)</span><br></pre></td></tr></table></figure><h2 id="1037-在霍格沃茨找零钱（20）"><a href="#1037-在霍格沃茨找零钱（20）" class="headerlink" title="1037 在霍格沃茨找零钱（20）"></a>1037 在霍格沃茨找零钱（20）</h2><p>如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”现在，给定哈利应付的价钱P和他实付的钱A，你的任务是写一个程序来计算他应该被找的零钱。<br><strong>输入格式：</strong><br>输入在1行中分别给出P和A，格式为“Galleon.Sickle.Knut”，其间用1个空格分隔。这里Galleon是[0, 10^7^]区间内的整数，Sickle是[0, 17)区间内的整数，Knut是[0, 29)区间内的整数。<br><strong>输出格式：</strong><br>在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。<br><strong>输入样例1：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10.16</span><span class="number">.27</span> <span class="number">14.1</span><span class="number">.28</span></span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.2</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p><strong>输入样例2：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14.1</span><span class="number">.28</span> <span class="number">10.16</span><span class="number">.27</span></span><br></pre></td></tr></table></figure><p><strong>输出样例2：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-3.2</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(p, a)</span>:</span></span><br><span class="line">    <span class="comment"># 1*Galleon--&gt;17*Sickle  1*Sickle--&gt;29*Knut</span></span><br><span class="line">    <span class="comment"># Galleon Sickle Knut</span></span><br><span class="line">    p_knut = p[<span class="number">0</span>] * <span class="number">17</span> * <span class="number">29</span> + p[<span class="number">1</span>] * <span class="number">29</span> + p[<span class="number">2</span>]</span><br><span class="line">    a_knut = a[<span class="number">0</span>] * <span class="number">17</span> * <span class="number">29</span> + a[<span class="number">1</span>] * <span class="number">29</span> + a[<span class="number">2</span>]</span><br><span class="line">    change = a_knut - p_knut</span><br><span class="line">    symbol = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> change &lt; <span class="number">0</span>:</span><br><span class="line">        change = abs(change)</span><br><span class="line">        symbol = <span class="number">-1</span></span><br><span class="line">    change_galleon = change // (<span class="number">17</span> * <span class="number">29</span>)</span><br><span class="line">    change_sickle = change % (<span class="number">17</span> * <span class="number">29</span>) // <span class="number">29</span></span><br><span class="line">    change_kunt = change % <span class="number">29</span></span><br><span class="line">    print(<span class="string">'&#123;&#125;.&#123;&#125;.&#123;&#125;'</span>.format(change_galleon * symbol, change_sickle, change_kunt))</span><br><span class="line"></span><br><span class="line">pa = input().split()</span><br><span class="line">p = list(map(int, pa[<span class="number">0</span>].split(<span class="string">'.'</span>)))</span><br><span class="line">a = list(map(int, pa[<span class="number">1</span>].split(<span class="string">'.'</span>)))</span><br><span class="line">solution(p, a)</span><br></pre></td></tr></table></figure><h2 id="1038-统计同成绩学生-20"><a href="#1038-统计同成绩学生-20" class="headerlink" title="1038 统计同成绩学生(20)"></a>1038 统计同成绩学生(20)</h2><p>本题要求读入N名学生的成绩，将获得某一给定分数的学生人数输出。<br><strong>输入格式：</strong><br>输入在第1行给出不超过10^5^的正整数N，即学生总人数。随后1行给出N名学生的百分制整数成绩，中间以空格分隔。最后1行给出要查询的分数个数K（不超过N的正整数），随后是K个分数，中间以空格分隔。<br><strong>输出格式：</strong><br>在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。<br><strong>输入样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="symbol">60 </span><span class="number">75</span> <span class="number">90</span> <span class="number">55</span> <span class="number">75</span> <span class="number">99</span> <span class="number">82</span> <span class="number">90</span> <span class="number">75</span> <span class="number">50</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">75</span> <span class="number">90</span> <span class="number">88</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">2</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(grades, targets)</span>:</span></span><br><span class="line">    result = &#123;target:<span class="number">0</span> <span class="keyword">for</span> target <span class="keyword">in</span> targets&#125;</span><br><span class="line">    <span class="keyword">for</span> grade <span class="keyword">in</span> grades:</span><br><span class="line">        <span class="keyword">if</span> grade <span class="keyword">in</span> result:</span><br><span class="line">            result[grade] += <span class="number">1</span></span><br><span class="line">    print(<span class="string">' '</span>.join(map(str, [result[target] <span class="keyword">for</span> target <span class="keyword">in</span> targets])))</span><br><span class="line"></span><br><span class="line">input()</span><br><span class="line">grades = list(map(int, input().split()))</span><br><span class="line">targets = list(map(int, input().split()))</span><br><span class="line">solution(grades, targets[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><h2 id="1041-考试座位号-15"><a href="#1041-考试座位号-15" class="headerlink" title="1041 考试座位号(15)"></a>1041 考试座位号(15)</h2><p>每个PAT考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。<br><strong>输入格式：</strong><br>输入第一行给出一个正整数N（&lt;=1000），随后N行，每行给出一个考生的信息：“准考证号 试机座位号 考试座位号”。其中准考证号由14位数字组成，座位从1到N编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。<br>考生信息之后，给出一个正整数M（&lt;=N），随后一行中给出M个待查询的试机座位号码，以空格分隔。<br><strong>输出格式：</strong><br>对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用1个空格分隔。<br><strong>输入样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">10120150912233 </span><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">10120150912119 </span><span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">10120150912126 </span><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">10120150912002 </span><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">10120150912002 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">10120150912119 </span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(datas, targets)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> target <span class="keyword">in</span> targets:</span><br><span class="line">        <span class="keyword">if</span> target <span class="keyword">in</span> datas:</span><br><span class="line">            print(datas[target])</span><br><span class="line"></span><br><span class="line">n = int(input())</span><br><span class="line">datas = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    data = input().split()</span><br><span class="line">    datas[data[<span class="number">1</span>]] = data[<span class="number">0</span>] + <span class="string">' '</span> + data[<span class="number">2</span>]</span><br><span class="line">input()</span><br><span class="line">targets = input().split()</span><br><span class="line">solution(datas, targets)</span><br></pre></td></tr></table></figure><h2 id="1042-字符统计-20"><a href="#1042-字符统计-20" class="headerlink" title="1042 字符统计(20)"></a>1042 字符统计(20)</h2><p>请编写程序，找出一段给定文字中出现最频繁的那个英文字母。<br><strong>输入格式：</strong><br>输入在一行中给出一个长度不超过1000的字符串。字符串由ASCII码表中任意可见字符及空格组成，至少包含1个英文字母，以回车结束（回车不算在内）。<br><strong>输出格式：</strong><br>在一行中输出出现频率最高的那个英文字母及其出现次数，其间以空格分隔。如果有并列，则输出按字母序最小的那个字母。统计时不区分大小写，输出小写字母。<br><strong>输入样例：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a<span class="built_in"> simple </span>TEST.  There ARE numbers <span class="keyword">and</span> other symbols 1&amp;2&amp;3<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e <span class="number">7</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(chars)</span>:</span></span><br><span class="line">    statistical = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">        <span class="keyword">if</span> char.isalpha():</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">in</span> statistical:</span><br><span class="line">                statistical[char] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                statistical[char] = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 传到key的值为元组，如:('e', 7)</span></span><br><span class="line">    key = max(sorted(statistical.items()), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">    print(key[<span class="number">0</span>], key[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">chars = input().lower()</span><br><span class="line">solution(chars)</span><br></pre></td></tr></table></figure><h2 id="1046-划拳-15"><a href="#1046-划拳-15" class="headerlink" title="1046 划拳(15)"></a>1046 划拳(15)</h2><p>划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就赢了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。<br>下面给出甲、乙两人的划拳记录，请你统计他们最后分别喝了多少杯酒。<br><strong>输入格式：</strong><br>输入第一行先给出一个正整数N（&lt;=100），随后N行，每行给出一轮划拳的记录，格式为：<br>甲喊 甲划 乙喊 乙划<br>其中“喊”是喊出的数字，“划”是划出的数字，均为不超过100的正整数（两只手一起划）。<br><strong>输出格式：</strong><br>在一行中先后输出甲、乙两人喝酒的杯数，其间以一个空格分隔。<br><strong>输入样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">8 </span><span class="number">10</span> <span class="number">9</span> <span class="number">12</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">10</span> <span class="number">5</span> <span class="number">10</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">8</span> <span class="number">5</span> <span class="number">12</span></span><br><span class="line"><span class="symbol">12 </span><span class="number">18</span> <span class="number">1</span> <span class="number">13</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">16</span> <span class="number">12</span> <span class="number">15</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(records)</span>:</span></span><br><span class="line">  first, second = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> record <span class="keyword">in</span> records:</span><br><span class="line">    <span class="comment"># 甲喊、乙喊、甲划、乙划</span></span><br><span class="line">    c1, c2, g1, g2 = record[<span class="number">0</span>], record[<span class="number">2</span>], record[<span class="number">1</span>], record[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">if</span> g1 == g2:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> c1 + c2 == g1:</span><br><span class="line">      second += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> c1 + c2 == g2:</span><br><span class="line">      first += <span class="number">1</span></span><br><span class="line">  print(first, second)</span><br><span class="line"></span><br><span class="line">n = int(input())</span><br><span class="line">records = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    records.append(list(map(int, input().split(<span class="string">' '</span>))))</span><br><span class="line">solution(records)</span><br></pre></td></tr></table></figure><h2 id="1047-编程团体赛-20"><a href="#1047-编程团体赛-20" class="headerlink" title="1047 编程团体赛(20)"></a>1047 编程团体赛(20)</h2><p>编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。<br>现给定所有队员的比赛成绩，请你编写程序找出冠军队。<br><strong>输入格式：</strong><br>输入第一行给出一个正整数N（&lt;=10000），即所有参赛队员总数。随后N行，每行给出一位队员的成绩，格式为：“队伍编号-队员编号 成绩”，其中“队伍编号”为1到1000的正整数，“队员编号”为1到10的正整数，“成绩”为0到100的整数。<br><strong>输出格式：</strong><br>在一行中输出冠军队的编号和总成绩，其间以一个空格分隔。注意：题目保证冠军队是唯一的。<br><strong>输入样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">3</span><span class="number">-10</span> <span class="number">99</span></span><br><span class="line"><span class="number">11</span><span class="number">-5</span> <span class="number">87</span></span><br><span class="line"><span class="number">102</span><span class="number">-1</span> <span class="number">0</span></span><br><span class="line"><span class="number">102</span><span class="number">-3</span> <span class="number">100</span></span><br><span class="line"><span class="number">11</span><span class="number">-9</span> <span class="number">89</span></span><br><span class="line"><span class="number">3</span><span class="number">-2</span> <span class="number">61</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">11 </span><span class="number">176</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(scores)</span>:</span></span><br><span class="line">    statistical_scores = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> score <span class="keyword">in</span> scores:</span><br><span class="line">        <span class="keyword">if</span> score[<span class="number">0</span>] <span class="keyword">in</span> statistical_scores:</span><br><span class="line">            statistical_scores[score[<span class="number">0</span>]] += int(score[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            statistical_scores[score[<span class="number">0</span>]] = int(score[<span class="number">2</span>])</span><br><span class="line">    team_score = max(statistical_scores.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">    print(team_score[<span class="number">0</span>], team_score[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">n = int(input())</span><br><span class="line">scores = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    scores.append(input().replace(<span class="string">'-'</span>, <span class="string">' '</span>).split())</span><br><span class="line">solution(scores)</span><br></pre></td></tr></table></figure><h2 id="1053-住房空置率（20）"><a href="#1053-住房空置率（20）" class="headerlink" title="1053 住房空置率（20）"></a>1053 住房空置率（20）</h2><p>在不打扰居民的前提下，统计住房空置率的一种方法是根据每户用电量的连续变化规律进行判断。判断方法如下：</p><ul><li>在观察期内，若存在超过一半的日子用电量低于某给定的阈值 e，则该住房为“可能空置”；</li><li>若观察期超过某给定阈值 D 天，且满足上一个条件，则该住房为“空置”。<br>现给定某居民区的住户用电量数据，请你统计“可能空置”的比率和“空置”比率，即以上两种状态的住房占居民区住房总套数的百分比。</li></ul><p><strong>输入格式</strong>：<br>输入第一行给出正整数 N（≤1000），为居民区住房总套数；正实数 e，即低电量阈值；正整数 D，即观察期阈值。随后 N 行，每行按以下格式给出一套住房的用电量数据：<br>K E1 E2 … EK<br>其中 K 为观察的天数，Ei 为第 i 天的用电量。<br><strong>输出格式</strong>：<br>在一行中输出“可能空置”的比率和“空置”比率的百分比值，其间以一个空格分隔，保留小数点后 1 位。<br><strong>输入样例</strong>：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">0.5</span> <span class="number">10</span></span><br><span class="line"><span class="symbol">6 </span><span class="number">0.3</span> <span class="number">0.4</span> <span class="number">0.5</span> <span class="number">0.2</span> <span class="number">0.8</span> <span class="number">0.6</span></span><br><span class="line"><span class="symbol">10 </span><span class="number">0.0</span> <span class="number">0.1</span> <span class="number">0.2</span> <span class="number">0.3</span> <span class="number">0.0</span> <span class="number">0.8</span> <span class="number">0.6</span> <span class="number">0.7</span> <span class="number">0.0</span> <span class="number">0.5</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">0.4</span> <span class="number">0.3</span> <span class="number">0.5</span> <span class="number">0.1</span> <span class="number">0.7</span></span><br><span class="line"><span class="symbol">11 </span><span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span></span><br><span class="line"><span class="symbol">11 </span><span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0.1</span> <span class="number">1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span></span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">40.0</span>% <span class="number">20.0</span>%</span><br></pre></td></tr></table></figure><p>（样例解释：第2、3户为“可能空置”，第4户为“空置”，其他户不是空置。）<br><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n, e, d, dates, consumptions)</span>:</span></span><br><span class="line">    count_maybe, count_must = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        consumption = consumptions[i]</span><br><span class="line">        <span class="keyword">if</span> len(list(filter(<span class="keyword">lambda</span> x: x &lt; e, consumption))) &gt; len(consumption) / <span class="number">2</span>:</span><br><span class="line">            count_maybe += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> dates[i] &gt; d:</span><br><span class="line">                count_must += <span class="number">1</span></span><br><span class="line">                count_maybe -= <span class="number">1</span></span><br><span class="line">    print(<span class="string">'&#123;&#125;% &#123;&#125;%'</span>.format(round(count_maybe / n * <span class="number">100</span>, <span class="number">1</span>), round(count_must / n * <span class="number">100</span>, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">n, e, d = input().split()</span><br><span class="line">n, e, d = int(n), float(e), int(d)</span><br><span class="line">dates, consumptions = [], []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    data = input().split()</span><br><span class="line">    dates.append(int(data[<span class="number">0</span>]))</span><br><span class="line">    consumptions.append(list(map(float, data[<span class="number">1</span>:])))</span><br><span class="line">solution(n, e, d, dates, consumptions)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目来自&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/problems&quot;&gt;PAT网站&lt;/a&gt;的 BasicLevel 题目&lt;br&gt;本文用来记录个人解答的PAT题目，仅供个人学习使用，未经允许不得转载，以下均为Python3解法&lt;/p&gt;
    
    </summary>
    
    
      <category term="Arithmetic" scheme="http://smileorigin.site/categories/Arithmetic/"/>
    
    
      <category term="Experience" scheme="http://smileorigin.site/tags/Experience/"/>
    
      <category term="Original" scheme="http://smileorigin.site/tags/Original/"/>
    
      <category term="PAT" scheme="http://smileorigin.site/tags/PAT/"/>
    
      <category term="BasicLevel" scheme="http://smileorigin.site/tags/BasicLevel/"/>
    
  </entry>
  
  <entry>
    <title>数据库三范式（笔记）</title>
    <link href="http://smileorigin.site/database/paradigm/"/>
    <id>http://smileorigin.site/database/paradigm/</id>
    <published>2018-08-03T09:58:00.000Z</published>
    <updated>2020-06-20T07:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容摘自<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/7309898?fr=aladdin">百度百科</a><br>用作个人笔记，便于查看，并非原创</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小</p><ul><li>第一范式（1NF）<br>  所谓的第一范式指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合、数组、记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式表中的每个域只能是实体的一个属性或一个属性的一部分。简而言之，第一范式就是无重复的域<br>  在任何一个关系型数据库中，第一范式是对关系模式设计基本要求，一般设计中都必须满足第一范式。不过有些关系模型中突破了第一范式的限制，这种称为非1NF的关系模型。换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的关系模型</li><li>第二范式（2NF）<br>  在第一范式的基础上，非码属性必须完全依赖于候选码（在第一范式基础上消除非主属性对主码的部分函数依赖）<br>  第二范式是在第一范式的基础上建立起来的，即满足第二范式必须先满足第一范式。第二范式要求数据库表中的每个实例或记录必须可以被唯一地区分。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。例如：在员工表中的身份证号码可以实现每个员工的区分，该身份证即为候选键，任何一个候选键都可以被选做主键。在找不到候选键时，可额外增加属性以实现区分，如果在员工关系中，没有对其身份证进行存储，而姓名可能会在数据库运行的某个时间重复，无法区分出实体时，设计譬如ID等不重复的编号以实现区分，被添加的编号或ID选做主键<br>  第二范式<strong>要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性</strong>，如果存在，那么这个属性和关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键</li><li>第三范式（3NF）<br>  在2NF基础上，<strong>任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</strong><br>  第三范式是第二范式的一个子集，即满足第三范式必须满足第二范式。简而言之，第三范式要求一个关系中不包含已在其它关系已包含的非主关键字信息。例如，存在一个部门信息表，其中每个部门有部门编号、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入到员工信息表中。如果不存在部门信息表，则根据第三范式也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性，也就是在满足第二范式的基础上，任何非主属性不得传递依赖于主属性</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>学生系统为例分析三范式的应用</p><h3 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h3><p>数据库表中的字段都是单一属性的，不可再分。这个单一属性由基本类型构成，包括整型、实数、字符型、逻辑型、日期型等。在当前的任何关系数据库管理系统（DBMS）中，傻瓜也不可能做出不符合第一范式的数据库，因为这些DBMS不允许你把数据库表的第一列再分为二列或多列。因此，你想在现有的DBMS中设计出不符合第一范式的数据库都是不可能的<br>首先我们确定要设计的内容包括哪些：学号、学生姓名、年龄、性别、课程名称、课程学分、系别、学科成绩、系办地址、系办电话等信息。为了简单我们暂时只考虑这些字段信息。我们对于这些信息，所关心的问题有如下几个方面</p><ul><li>学生有哪些基本信息？</li><li>学生选了哪些课，成绩是什么？</li><li>每个课的学分是多少？</li><li>学生属于哪个系，系的基本信息是什么？</li></ul><h3 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h3><p>第二范式（2NF）首先，我们考虑把所有这些信息放到一个表中（学号、学生姓名、年龄、性别、课程、课程学分、系别、学科成绩、系办地址、系办电话）下面存在如下的依赖关系<br>（学号， 课程名称） –&gt; （姓名， 年龄， 成绩， 学分）</p><ul><li>问题分析<br>  不满足第二范式的要求，会产生如下问题：</li><li>数据冗余<br>  同一门课程由n个学生选修，“学分”就重复n-1次；同一个学生选修了m门课程，姓名和年龄就重复了m-1次</li><li>更新异常<ol><li>若调整了某门课程的学分，数据表中所有行的“学分”值都要更新，否则会出现同一门课程学分不同的情况</li><li>假设要开设一门新的课程，暂时还没有人选修。这样，由于还没有“学号”关键字，课程名称和学分也无法记录入数据库</li></ol></li><li>删除异常<br>  假设一批学生已经完成课程的选修，这些选修记录就应该从数据库表中删除。但是，与此同时，课程名称和学分信息也被删除了。很显然，这也会导致插入异常</li><li>解决方案<br>  把选课关系表SelectCourse改为如下三个表：<ul><li>学生：Student（学号、 姓名、 年龄、 性别、 系办地址、 系办电话）</li><li>课程：Course（课程名称、 学分）</li><li>选课关系：SelectCourse（学号、 课程名称、 成绩）</li></ul></li></ul><h3 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h3><p>接着看上面的学生表Student（学号、 姓名、 年龄、 性别、 系别、 系办地址、 系办电话），关键字为单一关键字“学号”，因为存在如下决定关系：<br>（学号） –&gt; （姓名、 年龄、 性别、 系别、 系办地址、 系办电话）<br>但是还存在下面的决定关系：<br>（学号） –&gt; （系别） –&gt; （系办地点、 系办电话）<br>即存在非关键字段“系办电话”、 “系办电话”对关键字段“学号”的传递函数依赖<br>它也会存在数据冗余、更新异常、插入异常和删除异常的情况<br>根据第三范式把学生关系表分为如下两个表就可以满足第三范式：  </p><ul><li>学生：（学号、 姓名、 年龄、 性别、 系别）</li><li>系别：（系别、 系办地址、 系办电话）<br>上面的数据库表就是符合I、II、III范式的，消除了数据冗余、更新异常、插入异常和删除异常</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下内容摘自&lt;a href=&quot;https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/7309898?fr=aladdin&quot;&gt;百度百科&lt;/a&gt;&lt;br&gt;用作个人笔记，便于查看，并非原创&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database" scheme="http://smileorigin.site/categories/Database/"/>
    
    
      <category term="SQL" scheme="http://smileorigin.site/tags/SQL/"/>
    
      <category term="Notes" scheme="http://smileorigin.site/tags/Notes/"/>
    
      <category term="NonOriginal" scheme="http://smileorigin.site/tags/NonOriginal/"/>
    
  </entry>
  
  <entry>
    <title>MySQL练习</title>
    <link href="http://smileorigin.site/database/mysql/pratices/"/>
    <id>http://smileorigin.site/database/mysql/pratices/</id>
    <published>2018-08-02T10:00:00.000Z</published>
    <updated>2020-06-20T07:40:24.617Z</updated>
    
    <content type="html"><![CDATA[<p>There is recorded some MySQL pratices.</p><a id="more"></a><h2 id="数据库和数据准备"><a href="#数据库和数据准备" class="headerlink" title="数据库和数据准备"></a>数据库和数据准备</h2><ul><li>数据库建立<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> STUDENT</span><br><span class="line"> (</span><br><span class="line">SNO <span class="built_in">VARCHAR</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">SNAME <span class="built_in">VARCHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">SSEX <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">SBIRTHDAY DATETIME,</span><br><span class="line"><span class="keyword">CLASS</span> <span class="built_in">VARCHAR</span>(<span class="number">5</span>)</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> COURSE</span><br><span class="line"> (</span><br><span class="line">CNO <span class="built_in">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">CNAME <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TNO <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SCORE</span><br><span class="line"> (</span><br><span class="line">SNO <span class="built_in">VARCHAR</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">CNO <span class="built_in">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">DEGREE <span class="built_in">NUMERIC</span>(<span class="number">10</span>, <span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TEACHER</span><br><span class="line"> (</span><br><span class="line">TNO <span class="built_in">VARCHAR</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TNAME <span class="built_in">VARCHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, TSEX <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TBIRTHDAY DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>, PROF <span class="built_in">VARCHAR</span>(<span class="number">6</span>),</span><br><span class="line">DEPART <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"> );</span><br></pre></td></tr></table></figure></li><li>数据填充<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,<span class="keyword">CLASS</span>) <span class="keyword">VALUES</span> (<span class="number">108</span> ,<span class="string">'曾华'</span> ,<span class="string">'男'</span> ,<span class="string">'1977-09-01'</span>,<span class="number">95033</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,<span class="keyword">CLASS</span>) <span class="keyword">VALUES</span> (<span class="number">105</span> ,<span class="string">'匡明'</span> ,<span class="string">'男'</span> ,<span class="string">'1975-10-02'</span>,<span class="number">95031</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,<span class="keyword">CLASS</span>) <span class="keyword">VALUES</span> (<span class="number">107</span> ,<span class="string">'王丽'</span> ,<span class="string">'女'</span> ,<span class="string">'1976-01-23'</span>,<span class="number">95033</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,<span class="keyword">CLASS</span>) <span class="keyword">VALUES</span> (<span class="number">101</span> ,<span class="string">'李军'</span> ,<span class="string">'男'</span> ,<span class="string">'1976-02-20'</span>,<span class="number">95033</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,<span class="keyword">CLASS</span>) <span class="keyword">VALUES</span> (<span class="number">109</span> ,<span class="string">'王芳'</span> ,<span class="string">'女'</span> ,<span class="string">'1975-02-10'</span>,<span class="number">95031</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,<span class="keyword">CLASS</span>) <span class="keyword">VALUES</span> (<span class="number">103</span> ,<span class="string">'陆君'</span> ,<span class="string">'男'</span> ,<span class="string">'1974-06-03'</span>,<span class="number">95031</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> COURSE(CNO,CNAME,TNO)<span class="keyword">VALUES</span> (<span class="string">'3-105'</span> ,<span class="string">'计算机导论'</span>,<span class="number">825</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> COURSE(CNO,CNAME,TNO)<span class="keyword">VALUES</span> (<span class="string">'3-245'</span> ,<span class="string">'操作系统'</span> ,<span class="number">804</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> COURSE(CNO,CNAME,TNO)<span class="keyword">VALUES</span> (<span class="string">'6-166'</span> ,<span class="string">'数据电路'</span> ,<span class="number">856</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> COURSE(CNO,CNAME,TNO)<span class="keyword">VALUES</span> (<span class="string">'9-888'</span> ,<span class="string">'高等数学'</span> ,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">103</span>,<span class="string">'3-245'</span>,<span class="number">86</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">105</span>,<span class="string">'3-245'</span>,<span class="number">75</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">109</span>,<span class="string">'3-245'</span>,<span class="number">68</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">103</span>,<span class="string">'3-105'</span>,<span class="number">92</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">105</span>,<span class="string">'3-105'</span>,<span class="number">88</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">109</span>,<span class="string">'3-105'</span>,<span class="number">76</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">101</span>,<span class="string">'3-105'</span>,<span class="number">64</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">107</span>,<span class="string">'3-105'</span>,<span class="number">91</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">108</span>,<span class="string">'3-105'</span>,<span class="number">78</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">101</span>,<span class="string">'6-166'</span>,<span class="number">85</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">107</span>,<span class="string">'6-106'</span>,<span class="number">79</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">108</span>,<span class="string">'6-166'</span>,<span class="number">81</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TEACHER(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART) <span class="keyword">VALUES</span> (<span class="number">804</span>,<span class="string">'李诚'</span>,<span class="string">'男'</span>,<span class="string">'1958-12-02'</span>,<span class="string">'副教授'</span>,<span class="string">'计算机系'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TEACHER(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART) <span class="keyword">VALUES</span> (<span class="number">856</span>,<span class="string">'张旭'</span>,<span class="string">'男'</span>,<span class="string">'1969-03-12'</span>,<span class="string">'讲师'</span>,<span class="string">'电子工程系'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TEACHER(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART) <span class="keyword">VALUES</span> (<span class="number">825</span>,<span class="string">'王萍'</span>,<span class="string">'女'</span>,<span class="string">'1972-05-05'</span>,<span class="string">'助教'</span>,<span class="string">'计算机系'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TEACHER(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART) <span class="keyword">VALUES</span> (<span class="number">831</span>,<span class="string">'刘冰'</span>,<span class="string">'女'</span>,<span class="string">'1977-08-14'</span>,<span class="string">'助教'</span>,<span class="string">'电子工程系'</span>);</span><br></pre></td></tr></table></figure></li><li>数据填充完成<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM STUDENT;</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| SNO | SNAME  | SSEX | SBIRTHDAY           | CLASS |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| 108 | 曾华   | 男   | 1977-09-01 00:00:00 | 95033 |</span><br><span class="line">| 105 | 匡明   | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 107 | 王丽   | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 101 | 李军   | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 109 | 王芳   | 女   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 103 | 陆君   | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM COURSE;</span><br><span class="line">+-------+-----------------+-----+</span><br><span class="line">| CNO   | CNAME           | TNO |</span><br><span class="line">+-------+-----------------+-----+</span><br><span class="line">| 3-105 | 计算机导论      | 825 |</span><br><span class="line">| 3-245 | 操作系统        | 804 |</span><br><span class="line">| 6-166 | 数据电路        | 856 |</span><br><span class="line">| 9-888 | 高等数学        | 100 |</span><br><span class="line">+-------+-----------------+-----+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM SCORE;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| SNO | CNO   | DEGREE |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-245 |   86.0 |</span><br><span class="line">| 105 | 3-245 |   75.0 |</span><br><span class="line">| 109 | 3-245 |   68.0 |</span><br><span class="line">| 103 | 3-105 |   92.0 |</span><br><span class="line">| 105 | 3-105 |   88.0 |</span><br><span class="line">| 109 | 3-105 |   76.0 |</span><br><span class="line">| 101 | 3-105 |   64.0 |</span><br><span class="line">| 107 | 3-105 |   91.0 |</span><br><span class="line">| 108 | 3-105 |   78.0 |</span><br><span class="line">| 101 | 6-166 |   85.0 |</span><br><span class="line">| 107 | 6-106 |   79.0 |</span><br><span class="line">| 108 | 6-166 |   81.0 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">12 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM TEACHER;</span><br><span class="line">+-----+--------+------+---------------------+-----------+-----------------+</span><br><span class="line">| TNO | TNAME  | TSEX | TBIRTHDAY           | PROF      | DEPART          |</span><br><span class="line">+-----+--------+------+---------------------+-----------+-----------------+</span><br><span class="line">| 804 | 李诚   | 男   | 1958-12-02 00:00:00 | 副教授    | 计算机系        |</span><br><span class="line">| 856 | 张旭   | 男   | 1969-03-12 00:00:00 | 讲师      | 电子工程系      |</span><br><span class="line">| 825 | 王萍   | 女   | 1972-05-05 00:00:00 | 助教      | 计算机系        |</span><br><span class="line">| 831 | 刘冰   | 女   | 1977-08-14 00:00:00 | 助教      | 电子工程系      |</span><br><span class="line">+-----+--------+------+---------------------+-----------+-----------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="查询STUDENT表中的所有记录的SNAME、SSEX和CLASS列"><a href="#查询STUDENT表中的所有记录的SNAME、SSEX和CLASS列" class="headerlink" title="查询STUDENT表中的所有记录的SNAME、SSEX和CLASS列"></a>查询STUDENT表中的所有记录的SNAME、SSEX和CLASS列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT SNAME, SSEX, CLASS FROM STUDENT;</span><br><span class="line">+--------+------+-------+</span><br><span class="line">| SNAME  | SSEX | CLASS |</span><br><span class="line">+--------+------+-------+</span><br><span class="line">| 曾华   | 男   | 95033 |</span><br><span class="line">| 匡明   | 男   | 95031 |</span><br><span class="line">| 王丽   | 女   | 95033 |</span><br><span class="line">| 李军   | 男   | 95033 |</span><br><span class="line">| 王芳   | 女   | 95031 |</span><br><span class="line">| 陆君   | 男   | 95031 |</span><br><span class="line">+--------+------+-------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询教师所有的单位即不重复的DEPART列"><a href="#查询教师所有的单位即不重复的DEPART列" class="headerlink" title="查询教师所有的单位即不重复的DEPART列"></a>查询教师所有的单位即不重复的DEPART列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT DEPART FROM TEACHER GROUP BY DEPART;</span><br><span class="line">+-----------------+</span><br><span class="line">| DEPART          |</span><br><span class="line">+-----------------+</span><br><span class="line">| 电子工程系      |</span><br><span class="line">| 计算机系        |</span><br><span class="line">+-----------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询STUDENT表的所有记录"><a href="#查询STUDENT表的所有记录" class="headerlink" title="查询STUDENT表的所有记录"></a>查询STUDENT表的所有记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM STUDENT;</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| SNO | SNAME  | SSEX | SBIRTHDAY           | CLASS |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| 108 | 曾华   | 男   | 1977-09-01 00:00:00 | 95033 |</span><br><span class="line">| 105 | 匡明   | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 107 | 王丽   | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 101 | 李军   | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 109 | 王芳   | 女   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 103 | 陆君   | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询SCORE表中成绩在60到80之间的所有记录"><a href="#查询SCORE表中成绩在60到80之间的所有记录" class="headerlink" title="查询SCORE表中成绩在60到80之间的所有记录"></a>查询SCORE表中成绩在60到80之间的所有记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM SCORE WHERE DEGREE BETWEEN 60 AND 80;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| SNO | CNO   | DEGREE |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 105 | 3-245 |   75.0 |</span><br><span class="line">| 109 | 3-245 |   68.0 |</span><br><span class="line">| 109 | 3-105 |   76.0 |</span><br><span class="line">| 101 | 3-105 |   64.0 |</span><br><span class="line">| 108 | 3-105 |   78.0 |</span><br><span class="line">| 107 | 6-106 |   79.0 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询SCORE表中成绩为85，86或88的记录"><a href="#查询SCORE表中成绩为85，86或88的记录" class="headerlink" title="查询SCORE表中成绩为85，86或88的记录"></a>查询SCORE表中成绩为85，86或88的记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM SCORE WHERE DEGREE IN(85, 86, 88);</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| SNO | CNO   | DEGREE |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-245 |   86.0 |</span><br><span class="line">| 105 | 3-105 |   88.0 |</span><br><span class="line">| 101 | 6-166 |   85.0 |</span><br><span class="line">+-----+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="查询STUDENT表中“95031”班或性别为“女”的同学记录"><a href="#查询STUDENT表中“95031”班或性别为“女”的同学记录" class="headerlink" title="查询STUDENT表中“95031”班或性别为“女”的同学记录"></a>查询STUDENT表中“95031”班或性别为“女”的同学记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM STUDENT WHERE CLASS=<span class="string">'95031'</span> OR SSEX=<span class="string">'女'</span>;</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| SNO | SNAME  | SSEX | SBIRTHDAY           | CLASS |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| 105 | 匡明   | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 107 | 王丽   | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 109 | 王芳   | 女   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 103 | 陆君   | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="以CLASS降序查询STUDENT表的所有记录"><a href="#以CLASS降序查询STUDENT表的所有记录" class="headerlink" title="以CLASS降序查询STUDENT表的所有记录"></a>以CLASS降序查询STUDENT表的所有记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM STUDENT ORDER BY CLASS DESC;</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| SNO | SNAME  | SSEX | SBIRTHDAY           | CLASS |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| 108 | 曾华   | 男   | 1977-09-01 00:00:00 | 95033 |</span><br><span class="line">| 107 | 王丽   | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 101 | 李军   | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 105 | 匡明   | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 109 | 王芳   | 女   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 103 | 陆君   | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="以CNO升序、DEGREE降序查询SCORE表的所有记录"><a href="#以CNO升序、DEGREE降序查询SCORE表的所有记录" class="headerlink" title="以CNO升序、DEGREE降序查询SCORE表的所有记录"></a>以CNO升序、DEGREE降序查询SCORE表的所有记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM SCORE ORDER BY CNO, DEGREE DESC;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| SNO | CNO   | DEGREE |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-105 |   92.0 |</span><br><span class="line">| 107 | 3-105 |   91.0 |</span><br><span class="line">| 105 | 3-105 |   88.0 |</span><br><span class="line">| 108 | 3-105 |   78.0 |</span><br><span class="line">| 109 | 3-105 |   76.0 |</span><br><span class="line">| 101 | 3-105 |   64.0 |</span><br><span class="line">| 103 | 3-245 |   86.0 |</span><br><span class="line">| 105 | 3-245 |   75.0 |</span><br><span class="line">| 109 | 3-245 |   68.0 |</span><br><span class="line">| 107 | 6-106 |   79.0 |</span><br><span class="line">| 101 | 6-166 |   85.0 |</span><br><span class="line">| 108 | 6-166 |   81.0 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">12 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询“95031”班的学生人数"><a href="#查询“95031”班的学生人数" class="headerlink" title="查询“95031”班的学生人数"></a>查询“95031”班的学生人数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(*) FROM STUDENT WHERE CLASS=<span class="string">'95031'</span>;</span><br><span class="line">+----------+</span><br><span class="line">| COUNT(*) |</span><br><span class="line">+----------+</span><br><span class="line">|        3 |</span><br><span class="line">+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询SCORE表中的最高分的学生学号和课程号"><a href="#查询SCORE表中的最高分的学生学号和课程号" class="headerlink" title="查询SCORE表中的最高分的学生学号和课程号"></a>查询SCORE表中的最高分的学生学号和课程号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT SNO, CNO FROM SCORE WHERE DEGREE IN (SELECT MAX(DEGREE) FROM SCORE);</span><br><span class="line">+-----+-------+</span><br><span class="line">| SNO | CNO   |</span><br><span class="line">+-----+-------+</span><br><span class="line">| 103 | 3-105 |</span><br><span class="line">+-----+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询‘3-105’号课程的平均分"><a href="#查询‘3-105’号课程的平均分" class="headerlink" title="查询‘3-105’号课程的平均分"></a>查询‘3-105’号课程的平均分</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT AVG(DEGREE) FROM SCORE WHERE CNO=<span class="string">'3-105'</span>;</span><br><span class="line">+-------------+</span><br><span class="line">| AVG(DEGREE) |</span><br><span class="line">+-------------+</span><br><span class="line">|    81.50000 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询SCORE表中至少有2名学生选修的并以3开头的课程的平均分数"><a href="#查询SCORE表中至少有2名学生选修的并以3开头的课程的平均分数" class="headerlink" title="查询SCORE表中至少有2名学生选修的并以3开头的课程的平均分数"></a>查询SCORE表中至少有2名学生选修的并以3开头的课程的平均分数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT AVG(DEGREE) FROM SCORE GROUP BY CNO HAVING COUNT(CNO)&gt;1 AND CNO LIKE <span class="string">'3%'</span>;</span><br><span class="line">+-------------+</span><br><span class="line">| AVG(DEGREE) |</span><br><span class="line">+-------------+</span><br><span class="line">|    81.50000 |</span><br><span class="line">|    76.33333 |</span><br><span class="line">+-------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询最低分大于70，最高分小于90的SNO列"><a href="#查询最低分大于70，最高分小于90的SNO列" class="headerlink" title="查询最低分大于70，最高分小于90的SNO列"></a>查询最低分大于70，最高分小于90的SNO列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT SNO FROM SCORE GROUP BY SNO HAVING MIN(DEGREE)&gt;70 AND MAX(DEGREE)&lt;90;</span><br><span class="line">+-----+</span><br><span class="line">| SNO |</span><br><span class="line">+-----+</span><br><span class="line">| 105 |</span><br><span class="line">| 108 |</span><br><span class="line">+-----+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询所有学生的SNAME、CNO和DEGREE列"><a href="#查询所有学生的SNAME、CNO和DEGREE列" class="headerlink" title="查询所有学生的SNAME、CNO和DEGREE列"></a>查询所有学生的SNAME、CNO和DEGREE列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT A.SNAME, B.CNO, B.DEGREE FROM STUDENT A, SCORE B WHERE A.SNO=B.SNO;</span><br><span class="line">+--------+-------+--------+</span><br><span class="line">| SNAME  | CNO   | DEGREE |</span><br><span class="line">+--------+-------+--------+</span><br><span class="line">| 陆君   | 3-245 |   86.0 |</span><br><span class="line">| 匡明   | 3-245 |   75.0 |</span><br><span class="line">| 王芳   | 3-245 |   68.0 |</span><br><span class="line">| 陆君   | 3-105 |   92.0 |</span><br><span class="line">| 匡明   | 3-105 |   88.0 |</span><br><span class="line">| 王芳   | 3-105 |   76.0 |</span><br><span class="line">| 李军   | 3-105 |   64.0 |</span><br><span class="line">| 王丽   | 3-105 |   91.0 |</span><br><span class="line">| 曾华   | 3-105 |   78.0 |</span><br><span class="line">| 李军   | 6-166 |   85.0 |</span><br><span class="line">| 王丽   | 6-106 |   79.0 |</span><br><span class="line">| 曾华   | 6-166 |   81.0 |</span><br><span class="line">+--------+-------+--------+</span><br><span class="line">12 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"><span class="comment"># 解法二使用内连接</span></span><br><span class="line">mysql&gt; SELECT STUDENT.SNAME, SCORE.CNO, SCORE.DEGREE FROM STUDENT INNER JOIN SCORE ON STUDENT.SNO=SCORE.SNO;</span><br><span class="line">+--------+-------+--------+</span><br><span class="line">| SNAME  | CNO   | DEGREE |</span><br><span class="line">+--------+-------+--------+</span><br><span class="line">| 陆君   | 3-245 |   86.0 |</span><br><span class="line">| 匡明   | 3-245 |   75.0 |</span><br><span class="line">| 王芳   | 3-245 |   68.0 |</span><br><span class="line">| 陆君   | 3-105 |   92.0 |</span><br><span class="line">| 匡明   | 3-105 |   88.0 |</span><br><span class="line">| 王芳   | 3-105 |   76.0 |</span><br><span class="line">| 李军   | 3-105 |   64.0 |</span><br><span class="line">| 王丽   | 3-105 |   91.0 |</span><br><span class="line">| 曾华   | 3-105 |   78.0 |</span><br><span class="line">| 李军   | 6-166 |   85.0 |</span><br><span class="line">| 王丽   | 6-106 |   79.0 |</span><br><span class="line">| 曾华   | 6-166 |   81.0 |</span><br><span class="line">+--------+-------+--------+</span><br><span class="line">12 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询所有学生的SNO、CNAME和DEGREE列"><a href="#查询所有学生的SNO、CNAME和DEGREE列" class="headerlink" title="查询所有学生的SNO、CNAME和DEGREE列"></a>查询所有学生的SNO、CNAME和DEGREE列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT A.SNO, B.CNAME, A.DEGREE FROM SCORE A, COURSE B WHERE A.CNO=B.CNO;</span><br><span class="line">+-----+-----------------+--------+</span><br><span class="line">| SNO | CNAME           | DEGREE |</span><br><span class="line">+-----+-----------------+--------+</span><br><span class="line">| 103 | 操作系统        |   86.0 |</span><br><span class="line">| 105 | 操作系统        |   75.0 |</span><br><span class="line">| 109 | 操作系统        |   68.0 |</span><br><span class="line">| 103 | 计算机导论      |   92.0 |</span><br><span class="line">| 105 | 计算机导论      |   88.0 |</span><br><span class="line">| 109 | 计算机导论      |   76.0 |</span><br><span class="line">| 101 | 计算机导论      |   64.0 |</span><br><span class="line">| 107 | 计算机导论      |   91.0 |</span><br><span class="line">| 108 | 计算机导论      |   78.0 |</span><br><span class="line">| 101 | 数据电路        |   85.0 |</span><br><span class="line">| 108 | 数据电路        |   81.0 |</span><br><span class="line">+-----+-----------------+--------+</span><br><span class="line">11 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解法二使用内连接</span></span><br><span class="line">mysql&gt; SELECT A.SNO, C.CNAME, B.DEGREE FROM STUDENT A INNER JOIN SCORE B INNER JOIN COURSE C ON A.SNO=B.SNO AND B.CNO=C.CNO;</span><br><span class="line">+-----+-----------------+--------+</span><br><span class="line">| SNO | CNAME           | DEGREE |</span><br><span class="line">+-----+-----------------+--------+</span><br><span class="line">| 108 | 计算机导论      |   78.0 |</span><br><span class="line">| 108 | 数据电路        |   81.0 |</span><br><span class="line">| 105 | 操作系统        |   75.0 |</span><br><span class="line">| 105 | 计算机导论      |   88.0 |</span><br><span class="line">| 107 | 计算机导论      |   91.0 |</span><br><span class="line">| 101 | 计算机导论      |   64.0 |</span><br><span class="line">| 101 | 数据电路        |   85.0 |</span><br><span class="line">| 109 | 操作系统        |   68.0 |</span><br><span class="line">| 109 | 计算机导论      |   76.0 |</span><br><span class="line">| 103 | 操作系统        |   86.0 |</span><br><span class="line">| 103 | 计算机导论      |   92.0 |</span><br><span class="line">+-----+-----------------+--------+</span><br><span class="line">11 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询所有学生的SNAME、CNAME和DEGREE列"><a href="#查询所有学生的SNAME、CNAME和DEGREE列" class="headerlink" title="查询所有学生的SNAME、CNAME和DEGREE列"></a>查询所有学生的SNAME、CNAME和DEGREE列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT A.SNAME, B.CNAME, C.DEGREE FROM STUDENT A, COURSE B, SCORE C WHERE A.SNO=C.SNO AND B.CNO=C.CNO;</span><br><span class="line">+--------+-----------------+--------+</span><br><span class="line">| SNAME  | CNAME           | DEGREE |</span><br><span class="line">+--------+-----------------+--------+</span><br><span class="line">| 曾华   | 计算机导论      |   78.0 |</span><br><span class="line">| 曾华   | 数据电路        |   81.0 |</span><br><span class="line">| 匡明   | 操作系统        |   75.0 |</span><br><span class="line">| 匡明   | 计算机导论      |   88.0 |</span><br><span class="line">| 王丽   | 计算机导论      |   91.0 |</span><br><span class="line">| 李军   | 计算机导论      |   64.0 |</span><br><span class="line">| 李军   | 数据电路        |   85.0 |</span><br><span class="line">| 王芳   | 操作系统        |   68.0 |</span><br><span class="line">| 王芳   | 计算机导论      |   76.0 |</span><br><span class="line">| 陆君   | 操作系统        |   86.0 |</span><br><span class="line">| 陆君   | 计算机导论      |   92.0 |</span><br><span class="line">+--------+-----------------+--------+</span><br><span class="line">11 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解法二内连接</span></span><br><span class="line">mysql&gt; SELECT STUDENT.SNAME, COURSE.CNAME, SCORE.DEGREE FROM STUDENT INNER JOIN SCORE INNER JOIN COURSE ON STUDENT.SNO=SCORE.SNO AND SCORE.CNO=COURSE.CNO;</span><br><span class="line">+--------+-----------------+--------+</span><br><span class="line">| SNAME  | CNAME           | DEGREE |</span><br><span class="line">+--------+-----------------+--------+</span><br><span class="line">| 曾华   | 计算机导论      |   78.0 |</span><br><span class="line">| 曾华   | 数据电路        |   81.0 |</span><br><span class="line">| 匡明   | 操作系统        |   75.0 |</span><br><span class="line">| 匡明   | 计算机导论      |   88.0 |</span><br><span class="line">| 王丽   | 计算机导论      |   91.0 |</span><br><span class="line">| 李军   | 计算机导论      |   64.0 |</span><br><span class="line">| 李军   | 数据电路        |   85.0 |</span><br><span class="line">| 王芳   | 操作系统        |   68.0 |</span><br><span class="line">| 王芳   | 计算机导论      |   76.0 |</span><br><span class="line">| 陆君   | 操作系统        |   86.0 |</span><br><span class="line">| 陆君   | 计算机导论      |   92.0 |</span><br><span class="line">+--------+-----------------+--------+</span><br><span class="line">11 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询“95033”班所选课程的平均分"><a href="#查询“95033”班所选课程的平均分" class="headerlink" title="查询“95033”班所选课程的平均分"></a>查询“95033”班所选课程的平均分</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT AVG(DEGREE) FROM SCORE INNER JOIN STUDENT S ON S.CLASS=<span class="string">'95033'</span>;</span><br><span class="line">+-------------+</span><br><span class="line">| AVG(DEGREE) |</span><br><span class="line">+-------------+</span><br><span class="line">|    80.25000 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解法二</span></span><br><span class="line">mysql&gt; mysql&gt; SELECT AVG(DEGREE) FRO WHERE SNO IN(SELECT SNO FROM STUDENT WHERE CLASS=<span class="string">'95033'</span>);</span><br><span class="line">+-------------+</span><br><span class="line">| AVG(DEGREE) |</span><br><span class="line">+-------------+</span><br><span class="line">|    79.66667 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="假设使用如下命令建立了一个grade表"><a href="#假设使用如下命令建立了一个grade表" class="headerlink" title="假设使用如下命令建立了一个grade表"></a>假设使用如下命令建立了一个grade表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE grade(low int,upp int,rank char(1));</span><br><span class="line">INSERT INTO grade VALUES(90,100,<span class="string">'A'</span>);</span><br><span class="line">INSERT INTO grade VALUES(80,89,<span class="string">'B'</span>);</span><br><span class="line">INSERT INTO grade VALUES(70,79,<span class="string">'C'</span>);</span><br><span class="line">INSERT INTO grade VALUES(60,69,<span class="string">'D'</span>);</span><br><span class="line">INSERT INTO grade VALUES(0,59,<span class="string">'E'</span>);</span><br></pre></td></tr></table></figure><ul><li><p>查询所有同学的SNO、CNO和rank列</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT A.SNO, A.CNO, B.rank FROM SCORE A, grade B WHERE A.DEGREE BETWEEN low and upp;</span><br><span class="line">+-----+-------+------+</span><br><span class="line">| SNO | CNO   | rank |</span><br><span class="line">+-----+-------+------+</span><br><span class="line">| 103 | 3-245 | B    |</span><br><span class="line">| 105 | 3-245 | C    |</span><br><span class="line">| 109 | 3-245 | D    |</span><br><span class="line">| 103 | 3-105 | A    |</span><br><span class="line">| 105 | 3-105 | B    |</span><br><span class="line">| 109 | 3-105 | C    |</span><br><span class="line">| 101 | 3-105 | D    |</span><br><span class="line">| 107 | 3-105 | A    |</span><br><span class="line">| 108 | 3-105 | C    |</span><br><span class="line">| 101 | 6-166 | B    |</span><br><span class="line">| 107 | 6-106 | C    |</span><br><span class="line">| 108 | 6-166 | B    |</span><br><span class="line">+-----+-------+------+</span><br><span class="line">12 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>查询选修“3-105”课程的成绩高于“109”号同学成绩的所有同学的记录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM STUDENT WHERE SNO IN (SELECT SNO FROM SCORE WHERE CNO=<span class="string">'3-105'</span> AND DEGREE&gt;(SELECT DEGREE FROM SCORE WHERE SNO=<span class="string">'109'</span> AND CNO=<span class="string">'3-105'</span>));</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| SNO | SNAME  | SSEX | SBIRTHDAY           | CLASS |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| 103 | 陆君   | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">| 105 | 匡明   | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 107 | 王丽   | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 108 | 曾华   | 男   | 1977-09-01 00:00:00 | 95033 |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>查询”95033”班和”95031”班全体学生的记录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM STUDENT WHERE CLASS IN(<span class="string">'95033'</span>, <span class="string">'95031'</span>);</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| SNO | SNAME  | SSEX | SBIRTHDAY           | CLASS |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| 108 | 曾华   | 男   | 1977-09-01 00:00:00 | 95033 |</span><br><span class="line">| 105 | 匡明   | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 107 | 王丽   | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 101 | 李军   | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 109 | 王芳   | 女   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 103 | 陆君   | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>查询存在有85分以上成绩的课程CNO</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT CNO FROM SCORE GROUP BY CNO HAVING CNO IN (SELECT CNO FROM SCORE WHERE DEGREE&gt;85);</span><br><span class="line">+-------+</span><br><span class="line">| CNO   |</span><br><span class="line">+-------+</span><br><span class="line">| 3-105 |</span><br><span class="line">| 3-245 |</span><br><span class="line">+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>查询出“计算机系“教师所教课程的成绩表</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM SCORE WHERE CNO IN(SELECT CNO FROM COURSE WHERE TNO IN(SELECT TNO FROM TEACHER WHERE DEPART=<span class="string">'计算机系'</span>));</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| SNO | CNO   | DEGREE |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-245 |   86.0 |</span><br><span class="line">| 105 | 3-245 |   75.0 |</span><br><span class="line">| 109 | 3-245 |   68.0 |</span><br><span class="line">| 103 | 3-105 |   92.0 |</span><br><span class="line">| 105 | 3-105 |   88.0 |</span><br><span class="line">| 109 | 3-105 |   76.0 |</span><br><span class="line">| 101 | 3-105 |   64.0 |</span><br><span class="line">| 107 | 3-105 |   91.0 |</span><br><span class="line">| 108 | 3-105 |   78.0 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">9 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"><span class="comment"># 解法二</span></span><br><span class="line">mysql&gt; SELECT * FROM SCORE WHERE CNO IN(SELECT C.CNO FROM TEACHER T, COURSE C WHERE T.DEPART=<span class="string">'计算机系'</span> AND T.TNO=C.TNO);</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| SNO | CNO   | DEGREE |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-245 |   86.0 |</span><br><span class="line">| 105 | 3-245 |   75.0 |</span><br><span class="line">| 109 | 3-245 |   68.0 |</span><br><span class="line">| 103 | 3-105 |   92.0 |</span><br><span class="line">| 105 | 3-105 |   88.0 |</span><br><span class="line">| 109 | 3-105 |   76.0 |</span><br><span class="line">| 101 | 3-105 |   64.0 |</span><br><span class="line">| 107 | 3-105 |   91.0 |</span><br><span class="line">| 108 | 3-105 |   78.0 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">9 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There is recorded some MySQL pratices.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database" scheme="http://smileorigin.site/categories/Database/"/>
    
    
      <category term="Notes" scheme="http://smileorigin.site/tags/Notes/"/>
    
      <category term="MySQL" scheme="http://smileorigin.site/tags/MySQL/"/>
    
      <category term="Pratices" scheme="http://smileorigin.site/tags/Pratices/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 多表操作</title>
    <link href="http://smileorigin.site/database/mysql/multi-table-operation/"/>
    <id>http://smileorigin.site/database/mysql/multi-table-operation/</id>
    <published>2018-08-02T02:00:00.000Z</published>
    <updated>2020-06-20T07:40:18.467Z</updated>
    
    <content type="html"><![CDATA[<p>There is recorded some MySQL multilist operation.</p><a id="more"></a><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><ul><li><p>使用别名进行多表查询</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select t1.* from t_user t1, t_deptment t2 where t1.id &#x3D; t2.id;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | sex  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | u1   | a    |</span><br><span class="line">|  2 | u2   | b    |</span><br><span class="line">|  3 | u3   | c    |</span><br><span class="line">+----+------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select t1.id,t1.name, t2.id,t2.name from</span><br><span class="line">    -&gt; t_user t1, t_deptment t2</span><br><span class="line">    -&gt; where t1.id &#x3D; t2.id</span><br><span class="line">    -&gt; and t2.id &#x3D; 2;</span><br><span class="line">+----+------+----+------+</span><br><span class="line">| id | name | id | name |</span><br><span class="line">+----+------+----+------+</span><br><span class="line">|  2 | u2   |  2 | bb   |</span><br><span class="line">+----+------+----+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>如果在GROUP BY后接WHERE的话会报错，GROUP BY后不能接WHERE子句，但是可以接HAVING子句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select id from t_user group by id where id &gt; 2;</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;where id &gt; 2&#39; at line 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select id from t_user group by id having id &gt; 2;</span><br><span class="line">+----+</span><br><span class="line">| id |</span><br><span class="line">+----+</span><br><span class="line">|  3 |</span><br><span class="line">|  4 |</span><br><span class="line">+----+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h2><p>多表连接记得使用条件判断取出拥有相同条件的多表的数据，否则会出现重复的数据<br>多个表使用多个<code>inner join</code>连接<br>要查询的表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1;</span><br><span class="line">+----+------+</span><br><span class="line">| c1 | c2   |</span><br><span class="line">+----+------+</span><br><span class="line">| a  | b    |</span><br><span class="line">| b  | c    |</span><br><span class="line">| c  | d    |</span><br><span class="line">+----+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t2;</span><br><span class="line">+----+------+</span><br><span class="line">| c3 | c4   |</span><br><span class="line">+----+------+</span><br><span class="line">| b  | d    |</span><br><span class="line">| c  | f    |</span><br><span class="line">| h  | j    |</span><br><span class="line">+----+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>将两个表符合条件的数据查询出来并列在一起</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1 inner join t2 on c1 &#x3D; c3;</span><br><span class="line">+----+------+----+------+</span><br><span class="line">| c1 | c2   | c3 | c4   |</span><br><span class="line">+----+------+----+------+</span><br><span class="line">| b  | c    | b  | d    |</span><br><span class="line">| c  | d    | c  | f    |</span><br><span class="line">+----+------+----+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h3><p>将两个表符合条件的数据查询出来并列在一起，不符合的数据只放置第一个表的数据，另一个表的数据置空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1 left join t2 on c1 &#x3D; c3;</span><br><span class="line">+----+------+------+------+</span><br><span class="line">| c1 | c2   | c3   | c4   |</span><br><span class="line">+----+------+------+------+</span><br><span class="line">| b  | c    | b    | d    |</span><br><span class="line">| c  | d    | c    | f    |</span><br><span class="line">| a  | b    | NULL | NULL |</span><br><span class="line">+----+------+------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h3><p>将两个表符合条件的数据查询出来并列在一起，不符合的数据只放置第二个表的数据，另一个表的数据置空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1 right join t2 on c1 &#x3D; c3;</span><br><span class="line">+------+------+----+------+</span><br><span class="line">| c1   | c2   | c3 | c4   |</span><br><span class="line">+------+------+----+------+</span><br><span class="line">| b    | c    | b  | d    |</span><br><span class="line">| c    | d    | c  | f    |</span><br><span class="line">| NULL | NULL | h  | j    |</span><br><span class="line">+------+------+----+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There is recorded some MySQL multilist operation.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database" scheme="http://smileorigin.site/categories/Database/"/>
    
    
      <category term="Notes" scheme="http://smileorigin.site/tags/Notes/"/>
    
      <category term="MySQL" scheme="http://smileorigin.site/tags/MySQL/"/>
    
      <category term="Multilist" scheme="http://smileorigin.site/tags/Multilist/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://smileorigin.site/database/mysql/mysql/"/>
    <id>http://smileorigin.site/database/mysql/mysql/</id>
    <published>2018-08-01T08:36:00.000Z</published>
    <updated>2020-06-20T07:40:21.683Z</updated>
    
    <content type="html"><![CDATA[<p>There is recorded some MySQL operation.</p><a id="more"></a><h2 id="Windows下连接和启动MySQL"><a href="#Windows下连接和启动MySQL" class="headerlink" title="Windows下连接和启动MySQL"></a>Windows下连接和启动MySQL</h2><ul><li><code>mysql -u root -p</code><br>  将<code>MySql</code>的安装目录下的<code>bin</code>目录设置到<code>PATH</code>环境变量下，打开CMD就能直接连接MySQL了。CMD输入<code>mysql -u root -p</code>，<code>root</code>为用户名，回车后输入密码即可进入到MySQL命令行模式<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200206011955.png" alt=""></li><li><code>net start mysql57</code><br>  运行管理员权限的<code>CMD</code>，输入命令即可启动MySQL<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200206012005.png" alt=""></li><li><code>net stop mysql57</code><br>  运行管理员权限的<code>CMD</code>，输入命令即可关闭MySQL<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200206012013.png" alt=""></li></ul><h2 id="本文使用的部分单词说明"><a href="#本文使用的部分单词说明" class="headerlink" title="本文使用的部分单词说明"></a>本文使用的部分单词说明</h2><ul><li>db_name：数据库名称</li><li>table_name：数据表名称</li><li>old_name：要修改的字段的名称</li><li>new_name：要修改字段的新名称</li><li>column_name：列的名称</li><li>type：类型和范围，例如：varchar(2)</li><li>view_name：视图名称</li></ul><h2 id="数据库命令行操作"><a href="#数据库命令行操作" class="headerlink" title="数据库命令行操作"></a>数据库命令行操作</h2><ul><li>显示现有数据库<br>  <code>show databases;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| fruitdb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">| wehelp_test        |</span><br><span class="line">+--------------------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure></li><li>新建数据库<br>  <code>create database db_name;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database fruitsb;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>新建指定字符集类型数据库<br>  <code>create database db_name character set utf8;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database test1 character <span class="built_in">set</span> utf8;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>删除数据库<br>  <code>drop database db_name;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database fruitsb;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>修改数据库字符集<br>  <code>alter database db_name character set utf8;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter database test1 character <span class="built_in">set</span> utf8;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>切换当前使用的数据库<br>  <code>use db_name;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test1;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure></li><li>显示数据库的创建语句<br>  <code>show create table table_name;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table SCORE;</span><br><span class="line">+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Table | Create Table                                                                                                                                            |</span><br><span class="line">+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| SCORE | CREATE TABLE `SCORE` (</span><br><span class="line">`SNO` varchar(3) NOT NULL,</span><br><span class="line">`CNO` varchar(5) NOT NULL,</span><br><span class="line">`DEGREE` decimal(10,1) NOT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 |</span><br><span class="line">+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>修改密码  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">update user <span class="built_in">set</span> authentication_string=password(<span class="string">"123456"</span>) <span class="built_in">where</span> User=<span class="string">'root'</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据表命令行操作"><a href="#数据表命令行操作" class="headerlink" title="数据表命令行操作"></a>数据表命令行操作</h2><ul><li>创建数据表  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use my_test</span><br><span class="line">create table <span class="built_in">test</span>(</span><br><span class="line">id int auto_increment primary key,</span><br><span class="line">age int);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure></li><li>显示当前数据库的所有数据表<br>  <code>show tables;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_test1 |</span><br><span class="line">+-----------------+</span><br><span class="line">| <span class="built_in">test</span>            |</span><br><span class="line">| test2           |</span><br><span class="line">+-----------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>显示数据表结构<br>  <code>desc table_name;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc <span class="built_in">test</span>;</span><br><span class="line">+-------+---------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type    | Null | Key | Default | Extra          |</span><br><span class="line">+-------+---------+------+-----+---------+----------------+</span><br><span class="line">| name  | int(11) | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| age   | int(11) | YES  |     | NULL    |                |</span><br><span class="line">+-------+---------+------+-----+---------+----------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure></li><li>添加字段<br>  <code>alter table table_name add column_name type;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table <span class="built_in">test</span> add sex int(2);</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure></li><li>删除字段<br>  <code>alter table table_name drop column_name;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table <span class="built_in">test</span> drop sex;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc <span class="built_in">test</span>;</span><br><span class="line">+-------+---------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type    | Null | Key | Default | Extra          |</span><br><span class="line">+-------+---------+------+-----+---------+----------------+</span><br><span class="line">| name  | int(11) | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| age   | int(11) | YES  |     | NULL    |                |</span><br><span class="line">+-------+---------+------+-----+---------+----------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>修改字段<br>  <code>alter table table_name modify column_name type;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table <span class="built_in">test</span> modify age varchar(2);</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure></li><li>修改字段名称<br>  <code>alter table table_name change column old_name new_name type;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table <span class="built_in">test</span> change column name id int;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc <span class="built_in">test</span>;</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type       | Null | Key | Default | Extra |</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)    | NO   | PRI | NULL    |       |</span><br><span class="line">| age   | varchar(2) | YES  |     | NULL    |       |</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>修改表名  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE T_TEST RENAME TO TT;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| TT             |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="SELECT语句"><a href="#SELECT语句" class="headerlink" title="SELECT语句"></a>SELECT语句</h2><ul><li>查询所有数据：<code>select * from table_name;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+------+</span><br><span class="line">| id | age  |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | 男   |</span><br><span class="line">|  2 | 女   |</span><br><span class="line">|  3 | 中   |</span><br><span class="line">+----+------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>查询指定列数据：<code>select column_name1, column_name2, ..., column_nameN from table_name;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select age from <span class="built_in">test</span>;</span><br><span class="line">+------+</span><br><span class="line">| age  |</span><br><span class="line">+------+</span><br><span class="line">| 男   |</span><br><span class="line">| 女   |</span><br><span class="line">| 中   |</span><br><span class="line">+------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="INSERT语句"><a href="#INSERT语句" class="headerlink" title="INSERT语句"></a>INSERT语句</h2><ul><li>添加数据行<br>  <code>insert into table_name values(value1, value2, ..., valueN);</code><br>  <code>insert into table_name(column_name1, column_name2, ..., column_nameN) values(value1, value2, ..., valueN);</code>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into <span class="built_in">test</span>(id,age) value(4,<span class="string">'未知'</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  1 | 男     |</span><br><span class="line">|  2 | 女     |</span><br><span class="line">|  3 | 中     |</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">+----+--------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>添加多条数据<br>  <code>insert into table_name(column_name1, column_name2, ..., column_nameN) values(value1, value2, ..., valueN), (value1, value2, ..., valueN), ..., (value1, value2, ..., valueN);</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into <span class="built_in">test</span> value(1,<span class="string">'男'</span>),(2,<span class="string">'女'</span>),(3,<span class="string">'中'</span>);</span><br><span class="line">Query OK, 3 rows affected (0.01 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+------+</span><br><span class="line">| id | age  |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | 男   |</span><br><span class="line">|  2 | 女   |</span><br><span class="line">|  3 | 中   |</span><br><span class="line">+----+------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="WHERE子句"><a href="#WHERE子句" class="headerlink" title="WHERE子句"></a>WHERE子句</h2><p>可用于SELECT、UPDATE、DELETE语句，可以使用AND或者OR指定一个或多个条件来自<br>（图片来自<a href="http://www.runoob.com/mysql/mysql-where-clause.html">菜鸟教程</a>）<br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200206012949.png" alt=""></p><ul><li>指定查询的参数值：<code>select * from table_name where column_name=value;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">test</span> <span class="built_in">where</span> age=<span class="string">'未知'</span>;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">+----+--------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>多条件指定查询：<code>select * from table_name [where condition1 [and [or]] condition2.....;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">test</span> <span class="built_in">where</span> id &gt; 2 and id &lt; 5;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  3 | 中     |</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">+----+--------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="UPDATE语句"><a href="#UPDATE语句" class="headerlink" title="UPDATE语句"></a>UPDATE语句</h2><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL UPDATE 命令来操作。.</p><ul><li>语法<br>  <code>UPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause]</code><ul><li>你可以同时更新一个或多个字段。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在一个单独表中同时更新数据。</li></ul></li><li>示例：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update <span class="built_in">test</span> <span class="built_in">set</span> age=<span class="string">'xx'</span> <span class="built_in">where</span> id=2;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  1 | 男     |</span><br><span class="line">|  2 | xx     |</span><br><span class="line">|  3 | 中     |</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">+----+--------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="DELETE语句"><a href="#DELETE语句" class="headerlink" title="DELETE语句"></a>DELETE语句</h2><p>删除数据的通用语法：<code>delete from table_name [where Clause];</code></p><ul><li>删除一条数据示例  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete from <span class="built_in">test</span> <span class="built_in">where</span> id=2;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  1 | 男     |</span><br><span class="line">|  3 | 中     |</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">+----+--------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="LIKE子句"><a href="#LIKE子句" class="headerlink" title="LIKE子句"></a>LIKE子句</h2><ul><li>可以用来做模糊查询</li><li>语法<br>  以下是 SQL SELECT 语句使用 LIKE 子句从数据表中读取数据的通用语法：  <figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">SELECT</span> field1, field2,...fieldN </span><br><span class="line"><span class="meta">FROM</span> table_name</span><br><span class="line"><span class="meta">WHERE</span> field1 <span class="meta">LIKE</span> condition1 [<span class="meta">AND</span> [<span class="meta">OR</span>]] filed2 = <span class="string">'somevalue'</span></span><br></pre></td></tr></table></figure><ul><li>你可以在 WHERE 子句中指定任何条件</li><li>你可以在 WHERE 子句中使用LIKE子句</li><li>你可以使用LIKE子句代替等号 =</li><li>LIKE 通常与 % 一同使用，类似于一个元字符的搜索</li><li>你可以使用 AND 或者 OR 指定一个或多个条件</li><li>你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件</li><li>使用’__’指定位数进行精确查询，一个下划线代表一位<br>（本段内容来自<a href="http://www.runoob.com/mysql/mysql-like-clause.html">菜鸟教程</a>)</li></ul></li><li>使用示例：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询age字段中以‘知’结尾的数据行</span></span><br><span class="line">mysql&gt; select * from <span class="built_in">test</span> <span class="built_in">where</span> age like <span class="string">'%知'</span>;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">+----+--------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>精确查询示例：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询name字段中以Tom开头后面还有4个字符的数据行</span></span><br><span class="line">mysql&gt; select * from <span class="built_in">test</span> <span class="built_in">where</span> name like <span class="string">'Tom____'</span>;</span><br><span class="line">+------+------+---------+</span><br><span class="line">| id   | age  | name    |</span><br><span class="line">+------+------+---------+</span><br><span class="line">|    3 | 24   | TomCook |</span><br><span class="line">+------+------+---------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="ORDER-BY子句"><a href="#ORDER-BY子句" class="headerlink" title="ORDER BY子句"></a>ORDER BY子句</h2><p>当我们需对读取的数据进行排序就可以使用<code>ORDER BY</code>子句</p><ul><li>语法<br>  以下是 SQL SELECT 语句使用 ORDER BY 子句将查询数据排序后再返回数据：  <figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,<span class="params">...</span>fieldN table_name1, table_name2<span class="params">...</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> field1, <span class="meta">[</span>field2<span class="params">...</span><span class="meta">]</span> <span class="meta">[</span>ASC <span class="meta">[</span>DESC<span class="meta">]</span>]</span><br></pre></td></tr></table></figure><ul><li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li><li>你可以设定多个字段来排序。</li><li>你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li><li>你可以添加 WHERE…LIKE 子句来设置条件。<br>（本段内容来自<a href="http://www.runoob.com/mysql/mysql-order-by.html">菜鸟教程</a>）</li></ul></li><li>使用示例：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">test</span> order by id desc;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">|  3 | 中     |</span><br><span class="line">|  1 | 男     |</span><br><span class="line">+----+--------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="GROUP-BY语句"><a href="#GROUP-BY语句" class="headerlink" title="GROUP BY语句"></a>GROUP BY语句</h2><p>GROUP BY语句根据一个或多个列对结果集进行分组</p><ul><li>语法  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, <span class="keyword">function</span>(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">operator</span> <span class="keyword">value</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column_name;</span><br></pre></td></tr></table></figure>  （本段内容来自<a href="http://www.runoob.com/mysql/mysql-group-by-statement.html">菜鸟教程</a>）</li><li>使用示例：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  1 | 男     |</span><br><span class="line">|  3 | 中     |</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">|  7 | a      |</span><br><span class="line">|  8 | a      |</span><br><span class="line">|  9 | b      |</span><br><span class="line">| 10 | 男     |</span><br><span class="line">+----+--------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select age from <span class="built_in">test</span> group by age;</span><br><span class="line">+--------+</span><br><span class="line">| age    |</span><br><span class="line">+--------+</span><br><span class="line">| a      |</span><br><span class="line">| b      |</span><br><span class="line">| 中     |</span><br><span class="line">| 未知   |</span><br><span class="line">| 男     |</span><br><span class="line">+--------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="BETWEEN语句"><a href="#BETWEEN语句" class="headerlink" title="BETWEEN语句"></a>BETWEEN语句</h2><ul><li>BETWEEN是闭区间x BETWEEN 3 AND 4  (3 &lt;= x &lt;= 4)</li><li>语法：<code>where column_name between value1 and value2</code>、<code>where column_name not between value1 and value2</code></li><li>示例：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">test</span> <span class="built_in">where</span> id between 2 and 10;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  3 | 中     |</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">|  7 | a      |</span><br><span class="line">|  8 | a      |</span><br><span class="line">|  9 | b      |</span><br><span class="line">| 10 | 男     |</span><br><span class="line">+----+--------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h2><ul><li>floor<br>  向下取整</li><li>round<br>  四舍五入</li><li>ceil<br>  向上取整</li></ul><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul><li>创建视图<br>  <code>CREATE VIEW VIEW_NAME AS SELECT COLUMN_NAME1,COLUMN_NAME2... FROM TABLE_NAME;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE VIEW V_SCORE AS SELECT * FROM SCORE;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure></li><li>读取视图数据<br>  <code>SELECT COLUMN_NAME1,COLUMN_NAME2... FROM VIEW_NAME;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM V_SCORE;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| SNO | CNO   | DEGREE |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-245 |   86.0 |</span><br><span class="line">| 105 | 3-245 |   75.0 |</span><br><span class="line">| 109 | 3-245 |   68.0 |</span><br><span class="line">| 103 | 3-105 |   92.0 |</span><br><span class="line">| 105 | 3-105 |   88.0 |</span><br><span class="line">| 109 | 3-105 |   76.0 |</span><br><span class="line">| 101 | 3-105 |   64.0 |</span><br><span class="line">| 107 | 3-105 |   91.0 |</span><br><span class="line">| 108 | 3-105 |   78.0 |</span><br><span class="line">| 101 | 6-166 |   85.0 |</span><br><span class="line">| 107 | 6-106 |   79.0 |</span><br><span class="line">| 108 | 6-166 |   81.0 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">12 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>别名创建视图<br>  <code>CREATE VIEW VIEW_NAME (ALIAS_NAME1, ALIAS_NAME2...) AS SELECT COLUMN_NAME1, COLUMN_NAME2... FROM TABLE_NAME;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE VIEW V_STUDENT(NAME, SEX) AS SELECT SNAME, SSEX FROM STUDENT;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM V_STUDENT;</span><br><span class="line">+--------+-----+</span><br><span class="line">| NAME   | SEX |</span><br><span class="line">+--------+-----+</span><br><span class="line">| 曾华   | 男  |</span><br><span class="line">| 匡明   | 男  |</span><br><span class="line">| 王丽   | 女  |</span><br><span class="line">| 李军   | 男  |</span><br><span class="line">| 王芳   | 女  |</span><br><span class="line">| 陆君   | 男  |</span><br><span class="line">+--------+-----+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>视图修改<br>  修改视图数据会影响主表数据，因为视图数据就是从主表读取的，修改视图数据相当于直接修改主表<br>  <code>CREATE OR REPLACE VIEW VIEW_NAME (COLUMN_NAME1, COLUMN_NAME2...) AS SELECT COLUMN_NAME1, COLUMN_NAME2... FROM TABLE_NAME;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE OR REPLACE VIEW V_SCORE (SNO, CNO) AS SELECT SNO, CNO FROM SCORE;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM V_SCORE;</span><br><span class="line">+-----+-------+</span><br><span class="line">| SNO | CNO   |</span><br><span class="line">+-----+-------+</span><br><span class="line">| 103 | 3-245 |</span><br><span class="line">| 105 | 3-245 |</span><br><span class="line">| 109 | 3-245 |</span><br><span class="line">| 103 | 3-105 |</span><br><span class="line">| 105 | 3-105 |</span><br><span class="line">| 109 | 3-105 |</span><br><span class="line">| 101 | 3-105 |</span><br><span class="line">| 107 | 3-105 |</span><br><span class="line">| 108 | 3-105 |</span><br><span class="line">| 101 | 6-166 |</span><br><span class="line">| 107 | 6-106 |</span><br><span class="line">| 108 | 6-166 |</span><br><span class="line">+-----+-------+</span><br><span class="line">12 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>删除视图<br>  <code>DROP VIEW VIEW_NAME</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP VIEW V_SCORE;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>显示视图详情<br>  <code>DESC VIEW_NAME;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DESC V_SCORE;</span><br><span class="line">+--------+---------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type          | Null | Key | Default | Extra |</span><br><span class="line">+--------+---------------+------+-----+---------+-------+</span><br><span class="line">| SNO    | varchar(3)    | NO   |     | NULL    |       |</span><br><span class="line">| CNO    | varchar(5)    | NO   |     | NULL    |       |</span><br><span class="line">| DEGREE | decimal(10,1) | NO   |     | NULL    |       |</span><br><span class="line">+--------+---------------+------+-----+---------+-------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="MySQL执行语句返回结果"><a href="#MySQL执行语句返回结果" class="headerlink" title="MySQL执行语句返回结果"></a>MySQL执行语句返回结果</h2><h3 id="FOUND-ROWS"><a href="#FOUND-ROWS" class="headerlink" title="FOUND_ROWS()"></a><code>FOUND_ROWS()</code></h3><p>FOUND_ROWS()函数可以返回查询到的记录数目<br>A <code>SELECT</code> statement may include a <code>LIMIT</code> clause to restrict the number of rows the server returns to the client. In some cases, it is desirable to know how many rows the statement would have returned without the <code>LIMIT</code>, but without running the statement again. To obtain this row count, include an <code>SQL_CALC_FOUND_ROWS</code> option in the <code>SELECT</code> statement, and then invoke <code>FOUND_ROWS()</code> afterward</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name</span><br><span class="line">-&gt; WHERE id &gt; 100 LIMIT 10;</span><br><span class="line">mysql&gt; SELECT FOUND_ROWS();</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t_fruits;</span><br><span class="line">+----+------------+-------+-------+--------+</span><br><span class="line">| id | name       | price | count | remark |</span><br><span class="line">+----+------------+-------+-------+--------+</span><br><span class="line">|  2 | orange     |   2.0 |     2 | 橙子   |</span><br><span class="line">|  3 | watermelon |   3.0 |     3 | 西瓜   |</span><br><span class="line">|  4 | longan     |   4.0 |     4 | 龙眼   |</span><br><span class="line">|  5 | kiwis      |   2.2 |   100 |        |</span><br><span class="line">+----+------------+-------+-------+--------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select FOUND_ROWS();</span><br><span class="line">+--------------+</span><br><span class="line">| FOUND_ROWS() |</span><br><span class="line">+--------------+</span><br><span class="line">|            4 |</span><br><span class="line">+--------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="ROW-COUNT"><a href="#ROW-COUNT" class="headerlink" title="ROW_COUNT()"></a><code>ROW_COUNT()</code></h3><p>ROW_COUNT()函数可以返回受到影响的行数  </p><ol><li>DDL statements: 0. This applies to statements such as <code>CREATE TABLE</code> or <code>DROP TABLE</code>.</li><li>DML statements other than <code>SELECT</code>: The number of affected rows. This applies to statements such as <code>UPDATE</code>, <code>INSERT</code>, or <code>DELETE</code> (as before), but now also to statements such as <code>ALTER TABLE</code> and <code>LOAD DATA INFILE</code>(</li><li><code>SELECT</code>: -1 if the statement returns a result set, or the number of rows “affected” if it does not. For example, for <code>SELECT * FROM t1</code>, ROW_COUNT()  returns -1. For <code>SELECT * FROM t1 INTO OUTFILE &#39;*file_name*&#39;</code>, <code>ROW_COUNT()</code> returns the number of rows written to the file.</li><li><code>SIGNAL</code> statements: 0</li></ol><p>Example</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO t VALUES(1),(2),(3);</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT ROW_COUNT();</span><br><span class="line">+-------------+</span><br><span class="line">| ROW_COUNT() |</span><br><span class="line">+-------------+</span><br><span class="line">|           3 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELETE FROM t WHERE i IN(1,2);</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT ROW_COUNT();</span><br><span class="line">+-------------+</span><br><span class="line">| ROW_COUNT() |</span><br><span class="line">+-------------+</span><br><span class="line">|           2 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>本节内容英语说明来自官方文档</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There is recorded some MySQL operation.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database" scheme="http://smileorigin.site/categories/Database/"/>
    
    
      <category term="Notes" scheme="http://smileorigin.site/tags/Notes/"/>
    
      <category term="MySQL" scheme="http://smileorigin.site/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>LinuxCommand</title>
    <link href="http://smileorigin.site/linux/command/"/>
    <id>http://smileorigin.site/linux/command/</id>
    <published>2018-07-12T05:51:00.000Z</published>
    <updated>2020-06-20T07:40:43.389Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些常用的 Linux 命令</p><a id="more"></a><h2 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h2><ul><li><p>安装软件<br><code>apt-get install package_name</code>——packagename为要安装的软件的包名</p></li><li><p>升级列表中的软件包的地址<br><code>apt-get update</code></p></li><li><p>升级所有已安装的软件（要先执行<code>apt-get update</code>才能确保软件都更新到最新）<br><code>apt-get upgrade</code></p></li><li><p>确认依赖的软件仓库是不是正确<br><code>apt-get check</code></p></li><li><p>从下载的软件包中清理缓存<br><code>apt-get clean</code></p></li><li><p>卸载软件<br><code>sudo apt-get remove packageName</code></p></li><li><p>自动卸载残留依赖包<br><code>sudo apt-get autoremove</code></p></li><li><p>查看文件内容<br><code>cat file1</code></p></li><li><p>查看一个文件的前2行<br><code>head -2 file1</code></p></li><li><p>查看系统信息<br><code>cat /proc/version</code></p></li><li><p>查看CPU信息<br><code>cat /proc/cpuinfo</code>、<code>lscpu</code></p></li><li><p>重启<br><code>reboot</code></p></li><li><p>注销<br><code>logout</code></p></li><li><p>关机<br><code>shutdown -h now</code></p></li><li><p>返回上一级<br><code>cd ..</code></p></li><li><p>返回上两级<br><code>cd ../..</code></p></li><li><p>返回上次所在路径<br><code>cd -</code></p></li><li><p>显示工作路径<br><code>pwd</code></p></li><li><p>查看目录中的文件<br><code>ls</code></p></li><li><p>查看目录中的文件<br><code>ls -F</code></p></li><li><p>显示文件和目录的详细资料<br><code>ls -l</code></p></li><li><p>显示隐藏文件<br><code>ls -a</code></p></li><li><p>创建文件夹<br><code>mkdir name</code></p></li><li><p>创建目录树<br><code>mkdir -p /tmp/dir1/dir2</code></p></li><li><p>删除文件<br><code>rm -f file1</code></p></li><li><p>删除文件夹<br><code>rm -rf dir1</code></p></li><li><p>移动文件夹<br><code>mv dir1 new_dir</code></p></li><li><p>复制文件<br><code>cp file1 file2</code></p></li><li><p>重命名<br><code>mv old.file new.file</code></p></li><li><p>复制一个目录下的所有文件到当前工作目录<br><code>cp dir/* .</code></p></li><li><p>修改一个文件或者目录的时间戳<br><code>touch -t 0712250000 file1</code></p></li><li><p>搜索文件和目录<br><code>find / -name filename</code></p></li><li><p>显示已经挂载的分区列表<br><code>df -h</code></p></li><li><p>估算目录占用的空间<br><code>du -sh dirname</code></p></li><li><p>解压zip压缩包<br><code>unzip file1.zip</code></p></li><li><p>解压gz压缩包<br><code>gunzip file1.gz</code></p></li><li><p>解压rar压缩包<br><code>unrar x file.rar</code></p></li><li><p>解压tgz压缩包<br><code>tar -xzvf  *.tar.gz</code></p></li><li><p>删除export的变量<br><code>unset variable_name</code></p></li></ul><h2 id="Center-OS命令"><a href="#Center-OS命令" class="headerlink" title="Center OS命令"></a>Center OS命令</h2><ul><li><p>查看防火墙状态<br><code>service firewalld status</code></p></li><li><p>关闭防火墙（重启服务器无效）<br><code>systemctl stop firewalld.service</code></p></li><li><p>彻底关闭防火墙<br><code>systemctl disable firewalld.service</code></p></li><li><p>开启防火墙<br><code>systemctl start firewalld.service</code></p></li><li><p>查看激活的连接信息(仅服务进程)<br><code>netstat -tnl</code></p></li><li><p>查看激活的连接信息(仅服务进程，包含端口信息)<br><code>netstat -tnlp</code></p></li><li><p>查看历史命令<br><code>history</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些常用的 Linux 命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://smileorigin.site/categories/Linux/"/>
    
    
      <category term="Experience" scheme="http://smileorigin.site/tags/Experience/"/>
    
      <category term="CommandLine" scheme="http://smileorigin.site/tags/CommandLine/"/>
    
      <category term="Center OS" scheme="http://smileorigin.site/tags/Center-OS/"/>
    
      <category term="Debian" scheme="http://smileorigin.site/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="http://smileorigin.site/database/redis/redis/"/>
    <id>http://smileorigin.site/database/redis/redis/</id>
    <published>2018-03-10T18:59:00.000Z</published>
    <updated>2020-06-20T07:40:31.196Z</updated>
    
    <content type="html"><![CDATA[<p>Redis operation.</p><a id="more"></a><h2 id="安装-Windows"><a href="#安装-Windows" class="headerlink" title="安装(Windows)"></a>安装(Windows)</h2><p>下载地址:<a href="https://github.com/MSOpenTech/redis/releases">https://github.com/MSOpenTech/redis/releases</a><br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200206015725.png" alt=""><br>解压后将文件夹路径配置到<code>PATH</code>环境变量，就可以在CMD窗口直接使用命令了</p><h2 id="安装-Debian"><a href="#安装-Debian" class="headerlink" title="安装(Debian)"></a>安装(Debian)</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-4.0.11.tar.gz</span><br></pre></td></tr></table></figure><h3 id="解压、安装"><a href="#解压、安装" class="headerlink" title="解压、安装"></a>解压、安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar xzf redis-4.0.11.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-4.0.11</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="创建配置和持久化目录"><a href="#创建配置和持久化目录" class="headerlink" title="创建配置和持久化目录"></a>创建配置和持久化目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/redis</span><br><span class="line">mkdir -p /var/redis/6379</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li>使用Redis的配置模板，将<code>redis-4.0.11</code>目录下的配置模板拷贝到<code>/etc/redis</code>下，配置文件名以要使用的端口号命名 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp redis.conf /etc/redis/6379.conf</span><br></pre></td></tr></table></figure></li><li>开启守护线程，使Redis开启后可以在后台运行，不同另开窗口使用 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/redis/6379.conf</span><br></pre></td></tr></table></figure> 将<code>daemonize no</code>修改为<code>daemonize yes</code></li><li>设置持久化文件存储位置，<strong>6379</strong>为该配置使用的端口<br> 配置<code>dir</code>为<code>dir /var/redis/6379</code></li></ol><h3 id="将Redis配置为系统服务"><a href="#将Redis配置为系统服务" class="headerlink" title="将Redis配置为系统服务"></a>将Redis配置为系统服务</h3><ol><li>在<code>redis-4.0.11/utils</code>目录下有个<code>redis_init_script</code>文件，将该文件拷贝到<code>/etc/init.d</code>文件夹下 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> utils</span><br><span class="line">cp redis_init_script /etc/init.d/redis_6379</span><br></pre></td></tr></table></figure></li><li>重新加载配置文件 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li>启用Redis <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start redis_6379</span><br></pre></td></tr></table></figure></li><li>停止服务 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop redis_6379</span><br></pre></td></tr></table></figure></li><li>重启服务 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart redis_6379</span><br></pre></td></tr></table></figure></li><li>其他命令<br>设置密码后Redis无法正常关闭时的关闭方法<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6379 -a password shutdown</span><br></pre></td></tr></table></figure></li></ol><h2 id="中文教程"><a href="#中文教程" class="headerlink" title="中文教程"></a>中文教程</h2><p><a href="http://www.redis.net.cn/tutorial/3501.html">http://www.redis.net.cn/tutorial/3501.html</a></p><h2 id="命令-CMD下"><a href="#命令-CMD下" class="headerlink" title="命令(CMD下)"></a>命令(CMD下)</h2><ul><li>启动<br>  <code>redis-server</code></li><li>使用配置文件启动<br>  <code>redis-server redis.conf</code> redis.conf为要使用的配置文件</li><li>启动Redis客户端<br>  <code>redis-cli</code></li><li>远程启动Redis客户端<br>  <code>redis-cli -h host -p port -a password</code><br>  如:<code>redis-cli -h 127.0.0.1 -p 6379 -a 12345678</code></li></ul><h2 id="命令-Redis客户端下"><a href="#命令-Redis客户端下" class="headerlink" title="命令(Redis客户端下)"></a>命令(Redis客户端下)</h2><ul><li><code>auth password</code><br>  进入<code>redis-cli</code>后，使用此命令进行密码校验（如果有密码的话）</li><li>设置连接密码<br>  <code>config set requirepass 12345678</code></li><li>获取连接密码<br>  <code>config get requirepass</code></li><li>获取数据库中key的数量<br>  <code>dbsize</code></li><li>添加key，value<br>  <code>set key value</code></li><li>获取value<br>  <code>get key</code></li><li>删除key<br>  <code>del key</code></li><li>获取全部key<br>  <code>keys *</code></li><li>查看key的类型<br>  <code>type key</code></li><li>随机取出一个key<br>  <code>randomkey</code></li><li>清空Redis<br>  <code>flushdb</code></li><li>查看该元素是否存在<br>  <code>exists key</code></li></ul><h2 id="Python下使用Redis"><a href="#Python下使用Redis" class="headerlink" title="Python下使用Redis"></a>Python下使用Redis</h2><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.redis = redis.Redis(</span><br><span class="line">host=constants.REDIS_HOST,</span><br><span class="line">port=constants.REDIS_PORT,</span><br><span class="line">db=constants.REDIS_DB,</span><br><span class="line">password=constants.REDIS_PASSWORD)</span><br></pre></td></tr></table></figure><h3 id="添加key-value"><a href="#添加key-value" class="headerlink" title="添加key,value"></a>添加key,value</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.redis.set(<span class="string">'smileorigin'</span>, <span class="string">'testvalue'</span>)</span><br></pre></td></tr></table></figure><h3 id="获取value"><a href="#获取value" class="headerlink" title="获取value"></a>获取value</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.redis.get(<span class="string">'smileorigin'</span>)</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>string是Redis最基本的类型，你可以理解成与一个key对应一个value<br>string类型是二进制安全的，意思是Redis的string可以包含任何数据，比如jpg图片或者序列化的对象<br>string类型是Redis最基本的数据类型，一个键最大能存储512MB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> xiaoyu sb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get xiaoyu </span><br><span class="line"><span class="string">"sb"</span></span><br></pre></td></tr></table></figure><p><strong>xiaoyu</strong> 就是键，<strong>sb</strong> 就是值<br>一个键最大能存储512MB</p><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>Redis hash是一个键值（key==&gt;value）对集合<br>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset smilehash xiaoyu sb xiaojie beautiful</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hget smilehash xiaoyu</span><br><span class="line"><span class="string">"sb"</span></span><br><span class="line">127.0.0.1:6379&gt; hget smilehash xiaojie</span><br><span class="line"><span class="string">"beautiful"</span></span><br></pre></td></tr></table></figure><p><strong>smilehash</strong>为hash对集合的名称，<strong>xiaoyu</strong>、<strong>xiaojie</strong>为键，“<strong>sb</strong>”、“<strong>beautiful</strong>”为对应的值<br>每个hash可以存储2的32次方减1个键值对（40多亿）  </p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>Redis列表是简单的字符串的列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush smile origin</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush smile xiaoyang</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush smile dayang</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange smile 0 2</span><br><span class="line">1) <span class="string">"dayang"</span></span><br><span class="line">2) <span class="string">"xiaoyang"</span></span><br><span class="line">3) <span class="string">"origin"</span></span><br><span class="line">127.0.0.1:6379&gt; lrange smile 0 10</span><br><span class="line">1) <span class="string">"dayang"</span></span><br><span class="line">2) <span class="string">"xiaoyang"</span></span><br><span class="line">3) <span class="string">"origin"</span></span><br></pre></td></tr></table></figure><p>列表最多可存储2的32次方减1个元素（每个列表可存储40多亿）</p><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>Redis的Set是string类型的无序集合，集合是通过哈希表实现的，所以添加、删除、查找的复杂度都是O(1)<br>添加一个string元素到key对应的set集合中，成功返回2，如果元素已经存在返回0，不存在则返回错误  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd testset 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers testset</span><br><span class="line">1) <span class="string">"1"</span></span><br><span class="line">127.0.0.1:6379&gt; sadd testset 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; smembers testset</span><br><span class="line">1) <span class="string">"1"</span></span><br></pre></td></tr></table></figure><p><strong>testset</strong>添加命令执行了两次，但是第一次返回1表示操作成功添加了<strong>testset</strong>，第二次返回0元素已存在不在重复添加<br>集合最多可存储2的32次方减1个成员（每个集合可存储40多亿个成员）</p><h3 id="zset（sorted-set：有序集合）"><a href="#zset（sorted-set：有序集合）" class="headerlink" title="zset（sorted set：有序集合）"></a>zset（sorted set：有序集合）</h3><p>Redis zset和set一样也是string类型元素的集合，且不允许重复成员，不同的是每个元素都会关联一个double类型的分数。Redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的，但是分数（score）却可以重复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd test_zset 1 a</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd test_zset 1.1 b</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd test_zset 1.1 b</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; zadd test_zset 1.2 g</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore test_zset 0 10</span><br><span class="line">1) <span class="string">"a"</span></span><br><span class="line">2) <span class="string">"b"</span></span><br><span class="line">3) <span class="string">"g"</span></span><br></pre></td></tr></table></figure><h2 id="各个数据类型应用场景"><a href="#各个数据类型应用场景" class="headerlink" title="各个数据类型应用场景"></a>各个数据类型应用场景</h2><table><thead><tr><th>类型</th><th>简介</th><th>特性</th><th>场景</th></tr></thead><tbody><tr><td>String（字符串）</td><td>二进制安全</td><td>可以包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512M</td><td></td></tr><tr><td>Hash（字典）</td><td>键值对集合，即编程语言中的Map类型</td><td>适合存储对象，并且可以像数据库中update一个属性一样只修改某一项属性值</td><td>存储、读取、修改用户属性</td></tr><tr><td>list（列表）</td><td>链表（双向链表）</td><td>增删快，提供了操作某一段元素的API</td><td>1.最新消息排行等功能（比如朋友圈的时间线） 2.消息队列</td></tr><tr><td>Set（集合）</td><td>哈希表实现，元素不重复</td><td>1.添加、删除、查找的复杂度都是O(1) 2.为集合提供了求交集、并集、差集等操作</td><td>1.共同好友 2.利用唯一性统计访问网站的所有独立ip 3.好友推荐时，根据tag求交集，大于某个阈值就可以推荐</td></tr><tr><td>Sorted Set（有序集合）</td><td>将Set中的元素增加一个权重参数score，元素按score有序排列</td><td>数据插入集合时，已经进行天然排序</td><td>1.排行榜 2.带权重的消息队列L</td></tr></tbody></table><h2 id="Redis在Center-os服务器中无法被外部访问"><a href="#Redis在Center-os服务器中无法被外部访问" class="headerlink" title="Redis在Center os服务器中无法被外部访问"></a>Redis在Center os服务器中无法被外部访问</h2><p>出现此情况可能是服务器的防火墙开启了，且未设置Redis的端口为白名单，所以外部访问被拒绝，且4.0版本后的Redis要记得在配置文件中设置密码，否则为了安全默认是禁止外部连接的<br>使用以下命令将Redis使用的<strong>6379</strong>端口设置为列外</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent </span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis operation.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database" scheme="http://smileorigin.site/categories/Database/"/>
    
    
      <category term="Guide" scheme="http://smileorigin.site/tags/Guide/"/>
    
      <category term="Redis" scheme="http://smileorigin.site/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Less common Python knowledge</title>
    <link href="http://smileorigin.site/python/less-common-python-knowledge/"/>
    <id>http://smileorigin.site/python/less-common-python-knowledge/</id>
    <published>2017-12-14T10:10:00.000Z</published>
    <updated>2020-06-20T07:41:13.104Z</updated>
    
    <content type="html"><![CDATA[<p>Something unknow or less common Python knowledge</p><a id="more"></a><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>集合（Set）是一个无序不重复元素的序列，每个元素只会出现一次。当集合中的项目存在与否比起次序或其出现次数更加重要时，我们就会使用集合    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parame = &#123;value01,value02,...&#125;</span><br><span class="line">或者</span><br><span class="line">set(value)</span><br></pre></td></tr></table></figure><p>通过使用集合，你可以测试某些对象的资格或情况，检查它们是否是其它集合的子集，找到两个集合的交集，等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">fruit = &#123;<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>&#125;</span><br><span class="line">color = &#123;<span class="string">'yellow'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>&#125;</span><br><span class="line">print(<span class="string">'apple'</span> <span class="keyword">in</span> fruit)</span><br><span class="line">print(<span class="string">'green'</span> <span class="keyword">in</span> color)</span><br><span class="line"></span><br><span class="line">color_copy = color.copy()</span><br><span class="line">print(<span class="string">'color is'</span>,color)</span><br><span class="line">print(<span class="string">'copy color is'</span>, color_copy)</span><br><span class="line"><span class="comment"># remove 'green',add pink</span></span><br><span class="line">color_copy.remove(<span class="string">'green'</span>)</span><br><span class="line">color_copy.add(<span class="string">'pink'</span>)</span><br><span class="line">print(<span class="string">'remove greeen and add pink to color_copy'</span>)</span><br><span class="line">print(<span class="string">'color is'</span>,color)</span><br><span class="line">print(<span class="string">'copy color is'</span>, color_copy)</span><br><span class="line"></span><br><span class="line">print(color &amp; color_copy)</span><br><span class="line">print(color | color_copy)</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">color <span class="keyword">is</span> &#123;<span class="string">'yellow'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>&#125;</span><br><span class="line">copy color <span class="keyword">is</span> &#123;<span class="string">'yellow'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>&#125;</span><br><span class="line">remove greeen <span class="keyword">and</span> add pink to color_copy</span><br><span class="line">color <span class="keyword">is</span> &#123;<span class="string">'yellow'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>&#125;</span><br><span class="line">copy color <span class="keyword">is</span> &#123;<span class="string">'yellow'</span>, <span class="string">'pink'</span>, <span class="string">'blue'</span>&#125;</span><br><span class="line">&#123;<span class="string">'yellow'</span>, <span class="string">'blue'</span>&#125;</span><br><span class="line">&#123;<span class="string">'yellow'</span>, <span class="string">'green'</span>, <span class="string">'pink'</span>, <span class="string">'blue'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="text-1"><a href="#text-1" class="headerlink" title="text[::-1]"></a>text[::-1]</h2><p>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> text[::<span class="number">-1</span>]</span><br><span class="line">print(reverse(<span class="string">'abcdefg'</span>))</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gfedcba</span><br></pre></td></tr></table></figure><h2 id="Pickle"><a href="#Pickle" class="headerlink" title="Pickle"></a>Pickle</h2><p>Python 提供了一个叫作 Pickle 的标准模块，通过它你可以将任何纯 Python 对象存储到一个文件中，并在稍后将其取回。这叫作持久地（Persistently）存储对象<br>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们存储相关对象的文件的名称</span></span><br><span class="line">shoplistfile = <span class="string">'shoplist.data'</span></span><br><span class="line"><span class="comment"># 我们需要购买的物品清单</span></span><br><span class="line">shoplist = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备写入文件</span></span><br><span class="line">f = open(shoplistfile, <span class="string">'wb'</span>)</span><br><span class="line"><span class="comment"># 存储对象至文件--封装（Pickling）</span></span><br><span class="line">pickle.dump(shoplist, f)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除shoplist变量</span></span><br><span class="line"><span class="keyword">del</span> shoplist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新打开存储文件</span></span><br><span class="line">f = open(shoplistfile, <span class="string">'rb'</span>)</span><br><span class="line"><span class="comment"># 从文件中载入对象--拆封（Unpickling）</span></span><br><span class="line">storedlist = pickle.load(f)</span><br><span class="line">print(storedlist)</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>]</span><br></pre></td></tr></table></figure><h2 id="VarArgs-Parameters"><a href="#VarArgs-Parameters" class="headerlink" title="VarArgs Parameters"></a>VarArgs Parameters</h2><p>有时你可能想定义的函数里面能够有任意数量的变量，也就是参数数量是可变的，这可以通过使用星号来实现<br>当我们声明一个诸如 <code>*</code>param 的星号参数时，从此处开始直到结束的所有位置参数（Positional Arguments）都将被收集并汇集成一个称为“param”的元组（Tuple）<br>类似地，当我们声明一个诸如 <code>**</code>param 的双星号参数时，从此处开始直至结束的所有关键字<br>参数都将被收集并汇集成一个名为 param 的字典（Dictionary）<br>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(a=<span class="number">5</span>, *numbers, **phonebook)</span>:</span></span><br><span class="line">    print(<span class="string">'a'</span>, a)</span><br><span class="line">    <span class="comment">#遍历元组中的所有项目</span></span><br><span class="line">    <span class="keyword">for</span> single_item <span class="keyword">in</span> numbers:</span><br><span class="line">        print(<span class="string">'single_item'</span>, single_item)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#遍历字典中的所有项目</span></span><br><span class="line">    <span class="keyword">for</span> first_part, second_part <span class="keyword">in</span> phonebook.items():</span><br><span class="line">        print(first_part,second_part)</span><br><span class="line">    </span><br><span class="line">print(total(<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,Jack=<span class="number">1123</span>,John=<span class="number">2231</span>,Inge=<span class="number">1560</span>))</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a <span class="number">10</span></span><br><span class="line">single_item <span class="number">1</span></span><br><span class="line">single_item <span class="number">2</span></span><br><span class="line">single_item <span class="number">3</span></span><br><span class="line">Inge <span class="number">1560</span></span><br><span class="line">John <span class="number">2231</span></span><br><span class="line">Jack <span class="number">1123</span></span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="DocStrings"><a href="#DocStrings" class="headerlink" title="DocStrings"></a>DocStrings</h2><p>Python 有一个甚是优美的功能称作文档字符串（Documentation Strings），在称呼它时通常会使用另一个短一些的名docstrings。DocStrings 是一款你应当使用的重要工具，它能够帮助你更好地记录程序并让其更加易于理解<br>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print</span><span class="params">(self, *args, sep=<span class="string">' '</span>, end=<span class="string">'\n'</span>, file=None)</span>:</span> <span class="comment"># known special case of print</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Prints the values to a stream, or to sys.stdout by default.</span></span><br><span class="line"><span class="string">    Optional keyword arguments:</span></span><br><span class="line"><span class="string">    file:  a file-like object (stream); defaults to the current sys.stdout.</span></span><br><span class="line"><span class="string">    sep:   string inserted between values, default a space.</span></span><br><span class="line"><span class="string">    end:   string appended after the last value, default a newline.</span></span><br><span class="line"><span class="string">    flush: whether to forcibly flush the stream.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">print(<span class="keyword">print</span>.__doc__)</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(value, ..., sep=<span class="string">' '</span>, end=<span class="string">'\n'</span>, file=sys.stdout, flush=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">Prints the values to a stream, <span class="keyword">or</span> to sys.stdout by default.</span><br><span class="line">Optional keyword arguments:</span><br><span class="line">file:  a file-like object (stream); defaults to the current sys.stdout.</span><br><span class="line">sep:   string inserted between values, default a space.</span><br><span class="line">end:   string appended after the last value, default a newline.</span><br><span class="line">flush: whether to forcibly flush the stream.</span><br></pre></td></tr></table></figure><h2 id="enumerate-函数"><a href="#enumerate-函数" class="headerlink" title="enumerate()函数"></a>enumerate()函数</h2><p>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中<br>语法</p><ul><li><code>enumerate(sequence, [start=0])</code></li><li>参数<ul><li>sequence    一个序列、迭代器或者其他支持迭代的对象</li><li>start            下标起始位置</li></ul></li><li>返回值<br>返回enumerate(枚举)对象</li></ul><p>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;seasons = [<span class="string">'Spring'</span>, <span class="string">'Summer'</span>, <span class="string">'Fall'</span>, <span class="string">'Winter'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(seasons))</span><br><span class="line">&gt;[(<span class="number">0</span>, <span class="string">'Spring'</span>), (<span class="number">1</span>, <span class="string">'Summer'</span>), (<span class="number">2</span>, <span class="string">'Fall'</span>), (<span class="number">3</span>, <span class="string">'Winter'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(seasons, start=<span class="number">1</span>))       <span class="comment"># 下标从 1 开始</span></span><br><span class="line">&gt;[(<span class="number">1</span>, <span class="string">'Spring'</span>), (<span class="number">2</span>, <span class="string">'Summer'</span>), (<span class="number">3</span>, <span class="string">'Fall'</span>), (<span class="number">4</span>, <span class="string">'Winter'</span>)]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;seq = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, element <span class="keyword">in</span> enumerate(seq):</span><br><span class="line">    ...     print(i, seq[i])</span><br><span class="line">    ... </span><br><span class="line"><span class="number">0</span> one</span><br><span class="line"><span class="number">1</span> two</span><br><span class="line"><span class="number">2</span> three</span><br></pre></td></tr></table></figure><h2 id="all"><a href="#all" class="headerlink" title="all()"></a>all()</h2><p>all() 函数用于判断给定的可迭代参数 iterable 中的所有元素是否都为 TRUE，如果是返回 True，否则返回 False<br>元素除了是 0、空、FALSE 外都算 TRUE。<br>函数等价于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all</span><span class="params">(iterable)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>语法</p><ul><li><code>all(iterable)</code></li><li>参数<br>iterable — 元组或列表</li><li>返回值<br>如果iterable的所有元素不为0、False或者iterable为空，all(iterable)返回True，否则返回False<br>注意：空元组、空列表返回值为True，这里要特别注意</li></ul><h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p><strong>filter()</strong> 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表<br>该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 True 或 False，最后将返回 True 的元素放到新列表中<br>语法</p><ul><li><code>filter(function, iterable)</code></li><li>参数<ul><li>function – 判断函数</li><li>iterable – 可迭代对象</li></ul></li><li>返回值<br>返回筛选完的列表</li></ul><p>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤出列表中的所有奇数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span>     </span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span>   </span><br><span class="line">newlist = filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]) </span><br><span class="line">print(list(newlist))</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h2 id="判断是容器还是生成器"><a href="#判断是容器还是生成器" class="headerlink" title="判断是容器还是生成器"></a>判断是容器还是生成器</h2><p>想要判断某个值是迭代器还是容器，可以拿该值为参数，两次调用iter方法，若结果相同，则是迭代器，调用内置的next方法，即可令迭代器前进一步</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize_defensive</span><span class="params">(numbers)</span>:</span></span><br><span class="line"><span class="keyword">if</span> iter(numbers) <span class="keyword">is</span> iter(numbers):</span><br><span class="line"><span class="keyword">raise</span> TypeError(<span class="string">'Must supply a container'</span>)</span><br></pre></td></tr></table></figure><h2 id="将数值或者列表转换为元组"><a href="#将数值或者列表转换为元组" class="headerlink" title="将数值或者列表转换为元组"></a>将数值或者列表转换为元组</h2><p>将数值转换为元组–使用<code>(value,)</code>即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(a,)</span><br><span class="line">(<span class="number">12</span>,)</span><br></pre></td></tr></table></figure><p>将列表转换为元组–直接强制转换即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple(b)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="排序字典"><a href="#排序字典" class="headerlink" title="排序字典"></a>排序字典</h2><p>使用内置的方法<code>sorted()</code>方法进行排序<br><code>sorted()</code>语法</p><ul><li><code>sorted(iterable, *, key=None, reverse=False)</code></li></ul><p>对字典的key和value进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">'a'</span>:<span class="number">2</span>, <span class="string">'b'</span>:<span class="number">1</span>, <span class="string">'c'</span>:<span class="number">5</span>, <span class="string">'g'</span>:<span class="number">4</span>, <span class="string">'d'</span>:<span class="number">10</span>&#125;</span><br><span class="line"><span class="comment"># 对key进行排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(a)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'g'</span>]</span><br><span class="line"><span class="comment"># 对value进行排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(a.values())</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>根据字典的value对字典进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从小到大，注意排序后的结果是列表，字典key，value被放在元组中</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(a.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">[(<span class="string">'b'</span>, <span class="number">1</span>), (<span class="string">'a'</span>, <span class="number">2</span>), (<span class="string">'g'</span>, <span class="number">4</span>), (<span class="string">'c'</span>, <span class="number">5</span>), (<span class="string">'d'</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="comment"># 从大到小</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(a.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">[(<span class="string">'d'</span>, <span class="number">10</span>), (<span class="string">'c'</span>, <span class="number">5</span>), (<span class="string">'g'</span>, <span class="number">4</span>), (<span class="string">'a'</span>, <span class="number">2</span>), (<span class="string">'b'</span>, <span class="number">1</span>)]</span><br></pre></td></tr></table></figure><h2 id="打乱序列"><a href="#打乱序列" class="headerlink" title="打乱序列"></a>打乱序列</h2><p>语法</p><ul><li><code>random.shuffle(list)</code></li></ul><p>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">data = list(range(<span class="number">20</span>))</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打乱元素</span></span><br><span class="line">random.shuffle(data)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">[<span class="number">7</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">3</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure><h2 id="max-方法依据自定义参数获取最大值"><a href="#max-方法依据自定义参数获取最大值" class="headerlink" title="max()方法依据自定义参数获取最大值"></a>max()方法依据自定义参数获取最大值</h2><p><code>max()</code>语法</p><ul><li><code>max(iterable, *[, key, default])</code></li><li><code>max(arg1, arg2, *args[, key])</code></li></ul><p>根据字典的value取得字典的最大键和值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(a.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">(<span class="string">'d'</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># 如果没有指定判断的参数，则默认根据字典的key进行排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(a.items())</span><br><span class="line">(<span class="string">'g'</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h2 id="判断是否是同一类型"><a href="#判断是否是同一类型" class="headerlink" title="判断是否是同一类型"></a>判断是否是同一类型</h2><p>语法</p><ul><li><code>isinstance(object, classinfo)</code></li></ul><p>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(a, int)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(a, float)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="判断是否是子类"><a href="#判断是否是子类" class="headerlink" title="判断是否是子类"></a>判断是否是子类</h2><p>语法</p><ul><li><code>issubclass(class, classinfo)</code></li></ul><p>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">b</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(a, b)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(b, a)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(b, b)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(b, object)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="对不确定是否存在的字典的键进行赋值"><a href="#对不确定是否存在的字典的键进行赋值" class="headerlink" title="对不确定是否存在的字典的键进行赋值"></a>对不确定是否存在的字典的键进行赋值</h2><p>语法</p><ul><li><code>setdefault(key[, default])</code></li></ul><p>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.setdefault(<span class="string">'b'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">'b'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>本来是这样写的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(datas)</span>:</span></span><br><span class="line"><span class="meta">... </span>    result = &#123;&#125;</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">if</span> data <span class="keyword">in</span> result:</span><br><span class="line"><span class="meta">... </span>                    result[data] += <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>                    result[data] = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> result</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>count(data)</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">2</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>现在只要这样写就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(datas)</span>:</span></span><br><span class="line"><span class="meta">... </span>    result = &#123;&#125;</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line"><span class="meta">... </span>            result.setdefault(data, <span class="number">0</span>)</span><br><span class="line"><span class="meta">... </span>            result[data] += <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> result</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>count(data)</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">2</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Decorators"><a href="#Decorators" class="headerlink" title="Decorators"></a>Decorators</h2><p>装饰器（Decorators）是应用包装函数的快捷方式。这有助于将功能与一些代码一遍又一遍地”包装“。举个例子，我为自己创建了一个<code>retry</code>装饰器，这样我可以将其运用到任何函数之中，如果在一次运行中抛出了任何错误，它就会尝试重新运行，直到最大次数5次，并且每次运行期间都会有一定的延迟。这对于你在对一台远程计算机进行网络调用的情况十分有用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig()</span><br><span class="line">log = logging.getLogger(<span class="string">'retry'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">retry</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(f)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped_f</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        MAX_ATTEMPTS = <span class="number">5</span></span><br><span class="line">        <span class="keyword">for</span> attempt <span class="keyword">in</span> range(<span class="number">1</span>, MAX_ATTEMPTS + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                log.exception(<span class="string">'Attempt %s/%s failed : %s'</span>, attempt, MAX_ATTEMPTS, (args, kwargs))</span><br><span class="line">                sleep(<span class="number">10</span> * attempt)</span><br><span class="line">        log.critical(<span class="string">'All %s attempts failed : %s'</span>, MAX_ATTEMPTS, (args, kwargs))</span><br><span class="line">    <span class="keyword">return</span> wrapped_f</span><br><span class="line"></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@retry</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_database</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(<span class="string">'Write to a database or make a network call or etc.'</span>)</span><br><span class="line">    print(<span class="string">'This will be automatically retried if exception is thrown.'</span>)</span><br><span class="line">    <span class="keyword">global</span> counter</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 这将在第一次调用时抛出异常</span></span><br><span class="line">    <span class="comment"># 在第二次运行时将正常工作(也就是重试)</span></span><br><span class="line">    <span class="keyword">if</span> counter &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(arg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    save_to_database(<span class="string">'Some bad value'</span>)</span><br></pre></td></tr></table></figure><h2 id="字符串补足位数"><a href="#字符串补足位数" class="headerlink" title="字符串补足位数"></a>字符串补足位数</h2><p>通常使用的字符串格式化符号<code>{}</code>里面是可以带参数的</p><ul><li><code>{:5}</code> 代表此格式化的字符串至少有5位，不足的在字符串前面补充空格</li><li><code>{:a&gt;5}</code> 代表此格式化的字符串至少有5位，不足的在字符串前面补充字符<code>a</code>（使用<code>=</code>效果一样）</li><li><code>{:a&lt;5}</code> 代表此格式化的字符串至少有5位，不足的在字符串后面补充字符<code>a</code></li></ul><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:5&#125;'</span>.format(a)</span><br><span class="line"><span class="string">'    6'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:a&gt;5&#125;'</span>.format(a)</span><br><span class="line"><span class="string">'aaaa6'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:a=5&#125;'</span>.format(a)</span><br><span class="line"><span class="string">'aaaa6'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:a&lt;5&#125;'</span>.format(a)</span><br><span class="line"><span class="string">'6aaaa'</span></span><br></pre></td></tr></table></figure><p>还可以使用<code>zfill</code>方法进行补足，<strong>zfill</strong>可以对字符串的左边进行补足，补足元素为<code>0</code>，且在有<code>+</code>、<code>-</code>符号时补足元素会在符号之后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'43'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.zfill(<span class="number">5</span>)</span><br><span class="line"><span class="string">'00043'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">'-43'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.zfill(<span class="number">5</span>)</span><br><span class="line"><span class="string">'-0043'</span></span><br></pre></td></tr></table></figure><h2 id="获取字符的ASCII码"><a href="#获取字符的ASCII码" class="headerlink" title="获取字符的ASCII码"></a>获取字符的ASCII码</h2><p>使用python内置的<code>ord()</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'a'</span>)</span><br><span class="line"><span class="number">97</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'A'</span>)</span><br><span class="line"><span class="number">65</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Something unknow or less common Python knowledge&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://smileorigin.site/categories/Python/"/>
    
    
      <category term="Python" scheme="http://smileorigin.site/tags/Python/"/>
    
      <category term="A byte of Python" scheme="http://smileorigin.site/tags/A-byte-of-Python/"/>
    
  </entry>
  
  <entry>
    <title>Flask</title>
    <link href="http://smileorigin.site/python/framework/flask/flask-coding-technique/"/>
    <id>http://smileorigin.site/python/framework/flask/flask-coding-technique/</id>
    <published>2017-12-13T16:00:00.000Z</published>
    <updated>2020-06-20T07:41:05.416Z</updated>
    
    <content type="html"><![CDATA[<p>记录学习 Flask 过程的笔记</p><a id="more"></a><h2 id="Http方法"><a href="#Http方法" class="headerlink" title="Http方法"></a>Http方法</h2><p>Http有多个访问URL的方法，默认情况下，路由只回应GET请求，但是通过app.route装饰器传递methods参数可以改变这个性为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/login', method=['GET', 'POST'])</span></span><br><span class="line"><span class="meta">@app.route('/j/item/&lt;id&gt;', methods=['DELETE', '[POST'])</span></span><br></pre></td></tr></table></figure><p>如果存在GET，那么也会自动地添加HEAD方法，无需干预。它会确保遵照HTTP RFC（<a href="https://bit.ly/2932IiA">描述HTTP协议的文档</a>）处理HEAD请求，所以你完全可以忽略这部分的HTTP规范。从Flask 6.0起，它也实现了OPTIONS的自动处理<br>下面简要介绍HTTP方法和使用场景</p><ul><li>GET:获取资源，GET操作应该是幂等的</li><li>HEAD:想要获取信息，但是只关心消息头。应用应该像处理GET请求一样来处理它，但是不返回实际内容</li><li>POST:创建一个新的资源</li><li>PUT:完整的替换资源或者创建资源。PUT操作虽然有副作用，但应该是幂等的</li><li>OPTIONS:获取资源支持的所有HTTP方法</li><li>PATCH:局部更新，修改某个已有的资源<br>（幂等：表示在相同的数据和参数下，执行一次或多次产生的效果是一样的）</li></ul><h2 id="使用url-for生成路径代替绝对路径"><a href="#使用url-for生成路径代替绝对路径" class="headerlink" title="使用url_for生成路径代替绝对路径"></a>使用<code>url_for</code>生成路径代替绝对路径</h2><p>不要在模板中写死静态文件路径，应该用url_for生成路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">'static'</span>, filename=<span class="string">'style.css'</span>)</span><br></pre></td></tr></table></figure><p>生成的路径就是’/static/style.css’<br>当然我们也可以定制静态文件的真实目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__, static_folder=<span class="string">'/tmp'</span>)</span><br></pre></td></tr></table></figure><p>那么访问’<a href="https://localhost:9000/static/style.css&#39;，也就是访问/tmp/style.css这个文件">https://localhost:9000/static/style.css&#39;，也就是访问/tmp/style.css这个文件</a></p><h2 id="Flask-Migrate"><a href="#Flask-Migrate" class="headerlink" title="Flask-Migrate"></a>Flask-Migrate</h2><p>在开发过程中我们经常会修改到model，此时一般的操作是先删除表，再使用Flask-SQLAlchemy的create_all()重新建表，数据就会全部丢失了<br>Flask-Migrate是数据库迁移框架，就像代码版本控制工具会监控代码改动一样，一个数据库迁移框架能跟踪数据库表的变化，并且能把新的改动应用到旧的表中</p><ul><li>安装  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-migrate</span><br></pre></td></tr></table></figure></li><li>使用Flask-Script命令行实现Flask-Migrate  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># manage.py</span></span><br><span class="line"><span class="comment"># 官方示例</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate, MigrateCommand</span><br><span class="line">    </span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'sqlite:///app.db'</span></span><br><span class="line">    </span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line">migrate = Migrate(app, db)</span><br><span class="line">    </span><br><span class="line">manager = Manager(app)</span><br><span class="line">manager.add_command(<span class="string">'db'</span>, MigrateCommand)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">128</span>))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure></li><li>运行<ul><li>初始化<code>migrate</code>本地仓库  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py db init</span><br></pre></td></tr></table></figure></li><li>开始迁移  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py db migrate</span><br></pre></td></tr></table></figure></li><li>更新数据库  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py db upgrade</span><br></pre></td></tr></table></figure></li><li>获取帮助信息  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py db --<span class="built_in">help</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>应用应该包含一个requirements.txt，它记录了有着准确版本号的所有包依赖，能在其它环境下使用该文件快速安装所需要的依赖</p><ul><li><p>自动生成<code>requirements.txt</code>文件,命令行输入以下命令</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>在新环境中，如果要快速恢复需要的依赖，只需执行以下命令即可</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录学习 Flask 过程的笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://smileorigin.site/categories/Python/"/>
    
    
      <category term="Framework" scheme="http://smileorigin.site/tags/Framework/"/>
    
      <category term="Flask" scheme="http://smileorigin.site/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>HexoBlogUtils</title>
    <link href="http://smileorigin.site/project/hexo-blog-utils/"/>
    <id>http://smileorigin.site/project/hexo-blog-utils/</id>
    <published>2017-12-03T14:42:00.000Z</published>
    <updated>2020-06-20T07:40:58.288Z</updated>
    
    <content type="html"><![CDATA[<p>正常我们要同步博客内容时都需要先打开命令窗口（Windows），然后调转到博客目录，然后输入hexo命令清除之前生成的缓存，然后生成静态文件，最后在部署到repository,很繁琐，这时候如果有个图标点击几下就部署到respository多舒服。。。所以就心血来潮。。。嗯。。。<br>PS：脚本只有在windows 10下1080p分辨率屏幕的电脑测试过，Python版本为3.6.3</p><a id="more"></a><h2 id="Screen-capture"><a href="#Screen-capture" class="headerlink" title="Screen capture"></a>Screen capture</h2><p>脚本运行后会打开一个界面和一个命令行窗口<br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204010629.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204010643.png" alt=""></p><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><ul><li>Generator<br>  执行<code>hexo clean</code>和<code>hexo g</code>，清理之前生成的静态文件再重新生成静态文件</li><li>Deploy<br>  执行<code>hexo d</code>，将生成的静态文件部署到云端</li><li>GeneratorAndDeploy<br>  直接自动执行前面两个命令，清理静态文件–&gt;重新生成静态文件–&gt;部署到云端</li><li>Server<br>  执行<code>hexo s</code>，启动本地模拟（本地预览博客），默认端口为博客配置设置的，没有设置则为：localhost:4000<br>  <strong>PS:使用该按钮之前记得先使用<code>Gnerator</code>按钮</strong></li><li>ServerWithCustomPort<br>  如果默认端口被占用，则可在下面的输入另外的端口，端口位4位数字，然后点击<code>ServerWithCustomPort</code>即可开始自定义端口的本地模拟<br>  <strong>PS:使用该按钮之前记得先使用<code>Gnerator</code>按钮</strong></li><li>最后一个表情按钮<br>  你猜</li></ul><h2 id="Using（Windows10）"><a href="#Using（Windows10）" class="headerlink" title="Using（Windows10）"></a>Using（Windows10）</h2><ul><li>安装Python3.6.3<br>  <a href="https://www.python.org/downloads/">点击跳转到官网下载</a></li><li>安装<br>  下载完，一路点击安装即可，最后的完成界面有个选项将python的目录添加到<code>PATH</code>环境变量记得勾选</li><li>获取脚本<br>  <a href="https://pan.baidu.com/s/1hrDlD2k">下载脚本</a>（密码：s3r2）或者将下面的脚本内容复制，然后新建一个<code>.py</code>结尾的文件保存进去即可</li><li>执行脚本<br>  右键脚本–&gt;<code>选择打开方式</code>–&gt;<code>选择其他应用</code>–&gt;找到Python的安装目录，选择<code>python.exe</code>双击即可，选定打开方式后记勾选设置为默认打开方式，下次直接双击打开即可。PS：脚本要放在博客目录里才可使用，创建一个脚本的快捷方式到桌面就不用每次都到博客目录运行脚本了<br>  <img src="./.img/HexoBlogUtils/hexo-blog-util-guide.png" alt=""></li><li>注意<br>  本脚本没有使用<strong>子线程</strong>去执行耗时操作，所以在执行一项操作时不要再点击其他按钮，不然windows会提示程序无响应可能导致脚本退出，请等待DOS窗口提示操作完成，或者是按下的按钮浮起来界面显示正常在进行其他操作<br>  使用<code>Server</code>或者<code>ServerWithCustomPort</code>功能时，要退出本地模拟只要点击DOS窗口按<code>CTRL+c</code>快捷键组合就会提示是否退出，输入<code>y</code>即可退出，这时候会发现程序界面按钮恢复默认状态，可以继续进行其他操作，重新开启本地模拟或者部署等</li></ul><h2 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: smileorigin</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@license: (C) Copyright 2017</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@contact: smileorigin@foxmail.com</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@file: hexo_utils.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@time: 12/3/2017 7:02 PM</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@desc:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainView</span><span class="params">(Frame)</span>:</span></span><br><span class="line">    bg = <span class="string">'white'</span></span><br><span class="line">    bt_bg = <span class="string">'#E91E63'</span></span><br><span class="line">    text_color = <span class="string">'#fff'</span></span><br><span class="line">    about_msg = <span class="string">'Author: smileorigin\nBlog: smileorigin.site\nEmail: smileorigin@foxmail.com'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, generatorCallback, deployCallback, serverCallback,</span></span></span><br><span class="line"><span class="function"><span class="params">                 serverCustomPortCallback, generatorAndDeployCallback, master=None)</span>:</span></span><br><span class="line">        Frame.__init__(self, master, bg=self.bg)</span><br><span class="line">        <span class="comment"># expand扩展frame背景充满整窗口</span></span><br><span class="line">        self.pack(expand=YES, fill=<span class="string">'both'</span>)</span><br><span class="line">        self.createWidgets(generatorCallback, deployCallback, serverCallback,</span><br><span class="line">                           serverCustomPortCallback, generatorAndDeployCallback)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createWidgets</span><span class="params">(self, generatorCallback, deployCallback, serverCallback,</span></span></span><br><span class="line"><span class="function"><span class="params">                      serverCustomPortCallback, generatorAndDeployCallback)</span>:</span></span><br><span class="line">        <span class="comment"># four function button</span></span><br><span class="line">        self.generator_bt = Button(self, command=generatorCallback, text=<span class="string">'Generator'</span>, width=<span class="number">20</span>,</span><br><span class="line">                                   bg=self.bt_bg, fg=self.text_color)</span><br><span class="line">        self.generator_bt.pack(pady=<span class="number">10</span>, padx=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        self.deploy_bt = Button(self, command=deployCallback, text=<span class="string">'Deploy'</span>, width=<span class="number">20</span>,</span><br><span class="line">                                bg=self.bt_bg, fg=self.text_color)</span><br><span class="line">        self.deploy_bt.pack()</span><br><span class="line"></span><br><span class="line">        self.generator_and_deploy_bt = Button(self, command=generatorAndDeployCallback,</span><br><span class="line">                                              text=<span class="string">'GeneratorAndDeploy'</span>, width=<span class="number">20</span>,</span><br><span class="line">                                              bg=self.bt_bg, fg=self.text_color)</span><br><span class="line">        self.generator_and_deploy_bt.pack(pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        self.server_bt = Button(self, command=serverCallback, text=<span class="string">'Server'</span>, width=<span class="number">20</span>,</span><br><span class="line">                                bg=self.bt_bg, fg=self.text_color)</span><br><span class="line">        self.server_bt.pack()</span><br><span class="line"></span><br><span class="line">        self.server_custom_port = Button(self, command=serverCustomPortCallback,</span><br><span class="line">                                         text=<span class="string">'ServerWithCustomPort'</span>, width=<span class="number">20</span>, bg=self.bt_bg,</span><br><span class="line">                                         fg=self.text_color)</span><br><span class="line">        self.server_custom_port.pack(pady=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">        self.custom_port_label = Label(self, text=<span class="string">"Port:"</span>, bg=self.bg)</span><br><span class="line">        self.custom_port_label.pack(fill=<span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line">        hint = StringVar()</span><br><span class="line">        hint.set(<span class="string">'5000'</span>)</span><br><span class="line">        self.custom_port_entry = Entry(self, textvariable=hint, bg=self.bg)</span><br><span class="line">        self.custom_port_entry.pack()</span><br><span class="line"></span><br><span class="line">        self.about_bt = Button(self, text=<span class="string">'(⓿_⓿)'</span>, command=self.showMessage, bg=self.bt_bg,</span><br><span class="line">                               fg=self.text_color)</span><br><span class="line">        self.about_bt.pack(pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showMessage</span><span class="params">(self)</span>:</span></span><br><span class="line">        messagebox.showinfo(<span class="string">'About'</span>, self.about_msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># constant values</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># clean</span></span><br><span class="line">cmd_clean = <span class="string">'hexo clean'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># generator</span></span><br><span class="line">cmd_generator = <span class="string">'hexo g'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># deploy</span></span><br><span class="line">cmd_deploy = <span class="string">'hexo d'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># server</span></span><br><span class="line">cmd_server = <span class="string">'hexo s'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># windows width height</span></span><br><span class="line">width = <span class="number">230</span></span><br><span class="line">height = <span class="number">280</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># star</span></span><br><span class="line">star = <span class="string">'*'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># star num</span></span><br><span class="line">star_num = <span class="number">84</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># icon path</span></span><br><span class="line"><span class="comment"># icon_path = '\\favicon.ico'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># out</span></span><br><span class="line">generator_start_text = <span class="string">' generator start '</span></span><br><span class="line">generator_done_text = <span class="string">' generator done '</span></span><br><span class="line">deploy_start_text = <span class="string">' deploy start '</span></span><br><span class="line">deploy_done_text = <span class="string">' deploy done '</span></span><br><span class="line">server_start_text = <span class="string">' server start '</span></span><br><span class="line">server_done_text = <span class="string">' server done'</span></span><br><span class="line">welcome_text = <span class="string">' welcome '</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># method</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># server with another port</span></span><br><span class="line"><span class="comment"># port  string  what's your port do you want to server</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serverWithAnotherPort</span><span class="params">(port)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> cmd_server + <span class="string">' -p '</span> + port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">executeCommand</span><span class="params">(cmd)</span>:</span></span><br><span class="line">    os.system(command=cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">regexFourNum</span><span class="params">(str)</span>:</span></span><br><span class="line">    p = re.compile(<span class="string">'^[0-9]&#123;4&#125;'</span>)</span><br><span class="line">    <span class="keyword">return</span> p.match(str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printStar</span><span class="params">(num)</span>:</span></span><br><span class="line">    print(star * num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printStarNotEnter</span><span class="params">(num)</span>:</span></span><br><span class="line">    print(star * num, end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printStringWithStar</span><span class="params">(num, string)</span>:</span></span><br><span class="line">    printStar(star_num)</span><br><span class="line">    string_len = len(string)</span><br><span class="line">    half_star_num = (int)((num - string_len) / <span class="number">2</span>)</span><br><span class="line">    remainder = num - half_star_num * <span class="number">2</span> - string_len</span><br><span class="line">    printStarNotEnter(half_star_num + remainder)</span><br><span class="line">    print(string, end=<span class="string">''</span>)</span><br><span class="line">    printStar(half_star_num)</span><br><span class="line">    printStar(star_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generatorCallback</span><span class="params">()</span>:</span></span><br><span class="line">    printStringWithStar(star_num, generator_start_text)</span><br><span class="line">    executeCommand(cmd_clean)</span><br><span class="line">    executeCommand(cmd_generator)</span><br><span class="line">    printStringWithStar(star_num, generator_done_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deployCallback</span><span class="params">()</span>:</span></span><br><span class="line">    printStringWithStar(star_num, deploy_start_text)</span><br><span class="line">    executeCommand(cmd_deploy)</span><br><span class="line">    printStringWithStar(star_num, deploy_done_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serverCallback</span><span class="params">()</span>:</span></span><br><span class="line">    printStringWithStar(star_num, server_start_text)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        executeCommand(cmd_server)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        printStringWithStar(star_num, server_done_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serverCustomPortCallback</span><span class="params">()</span>:</span></span><br><span class="line">    custom_port = str(main_view.custom_port_entry.get())</span><br><span class="line">    <span class="keyword">if</span> custom_port:</span><br><span class="line">        <span class="comment"># port: just 4 number</span></span><br><span class="line">        <span class="keyword">if</span> regexFourNum <span class="keyword">and</span> custom_port.__len__() == <span class="number">4</span>:</span><br><span class="line">            printStringWithStar(star_num, server_start_text)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                executeCommand(serverWithAnotherPort(custom_port))</span><br><span class="line">            <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">                printStringWithStar(star_num, server_done_text)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">'Input error'</span>, <span class="string">'Port needs 4 digits.Example:5000'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># error hint input port</span></span><br><span class="line">        messagebox.showinfo(<span class="string">'Error'</span>, <span class="string">'Please input port.Example:5000'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generatorAndDeployCallback</span><span class="params">()</span>:</span></span><br><span class="line">    generatorCallback()</span><br><span class="line">    deployCallback()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># run code</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------------------------------------------</span></span><br><span class="line">printStringWithStar(star_num, welcome_text)</span><br><span class="line">root = Tk()</span><br><span class="line">main_view = MainView(generatorCallback, deployCallback, serverCallback, serverCustomPortCallback,</span><br><span class="line">                     generatorAndDeployCallback, master=root)</span><br><span class="line">root.title(<span class="string">""</span>)</span><br><span class="line">root.resizable(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">size = <span class="string">'&#123;&#125;x&#123;&#125;+&#123;&#125;+&#123;&#125;'</span>.format(</span><br><span class="line">    width, height, (int)((root.winfo_screenwidth() - width) / <span class="number">2</span>),</span><br><span class="line">    (int)((root.winfo_screenheight() - height) / <span class="number">2</span>))</span><br><span class="line">root.geometry(size)</span><br><span class="line"><span class="comment"># root.iconbitmap(sys.path[0] + icon_path)</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正常我们要同步博客内容时都需要先打开命令窗口（Windows），然后调转到博客目录，然后输入hexo命令清除之前生成的缓存，然后生成静态文件，最后在部署到repository,很繁琐，这时候如果有个图标点击几下就部署到respository多舒服。。。所以就心血来潮。。。嗯。。。&lt;br&gt;PS：脚本只有在windows 10下1080p分辨率屏幕的电脑测试过，Python版本为3.6.3&lt;/p&gt;
    
    </summary>
    
    
      <category term="Project" scheme="http://smileorigin.site/categories/Project/"/>
    
    
      <category term="Python" scheme="http://smileorigin.site/tags/Python/"/>
    
      <category term="Tools" scheme="http://smileorigin.site/tags/Tools/"/>
    
      <category term="Original" scheme="http://smileorigin.site/tags/Original/"/>
    
      <category term="HexoBlog" scheme="http://smileorigin.site/tags/HexoBlog/"/>
    
  </entry>
  
  <entry>
    <title>DynamicTranslate</title>
    <link href="http://smileorigin.site/project/dynamic-translate/"/>
    <id>http://smileorigin.site/project/dynamic-translate/</id>
    <published>2017-10-21T10:39:00.000Z</published>
    <updated>2020-06-20T07:40:55.639Z</updated>
    
    <content type="html"><![CDATA[<p>在日益国际化的现在，英语成为了主流的语言，很多地方，生活和学术上都需要用到英语，很多研究的结果文章也是以英语为主要语言，而现在刚接触技术或者英语的人就很难很快的学好英语，没办法看懂英语内容，而传统的翻译软件存在巨大的局限性，没有办法很快速的进行翻译，一般的输入翻译存在很大的局限性，国内软件又有太多的广告，软件也十分臃肿。因此我们致力于打造一款高效，快速，又界面精美的翻译APP，我们的快捷翻译覆盖99%的操作场景，能让我们告别手动输入查找翻译的复杂过程</p><a id="more"></a><h2 id="部分功能演示视频"><a href="#部分功能演示视频" class="headerlink" title="部分功能演示视频"></a>部分功能演示视频</h2><p><a href="http://v.youku.com/v_show/id_XMzExMTY3Mzk1Mg==.html?spm=a2h3j.8428770.3416059.1">点击查看演示视频</a></p><h2 id="功能引导界面"><a href="#功能引导界面" class="headerlink" title="功能引导界面"></a>功能引导界面</h2><p>程序初次安装打开会有操作提示，可以根据提示熟悉程序操作</p><ul><li>翻译源切换按钮<br>  点击此按钮可切换有道和百度的翻译源（搜索翻译时使用的翻译提供商）<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204013337.png" alt=""></li><li>OCR图片转文字按钮<br>  点击此按钮会展开两个小按钮，如右图右下角所示，一个是相机按钮，一个是相册按钮，通过点其中一个按钮来获取图片并进行裁剪后，识别图中文字进行翻译<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204125724.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204125735.png" alt=""></li><li>魔术手势球<br>  通过简单的上、下、左、右滑动手势，长按、单击操作，进行相关功能的调用，集杂多的按钮为一体，简洁高效<br>  在魔术手势球被拖动的过程中，魔术手势球中间的图标会跟随手势的方向变换相关方向的图标。如上拉是打开设置界面，此时小球中的图标就是设置图标<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204125837.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130014.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130028.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130048.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130103.png" alt=""></li></ul><h2 id="权限引导"><a href="#权限引导" class="headerlink" title="权限引导"></a>权限引导</h2><p>功能引导完毕后，会弹出权限请求界面，点击同意获取“易译”运行需要使用的权限，例如：易译图片识别文字功能需要使用到的<code>拍照</code>、<code>文件存储器的读写</code>的权限<br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130135.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130147.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130158.png" alt=""></p><h2 id="主界面翻译查询功能"><a href="#主界面翻译查询功能" class="headerlink" title="主界面翻译查询功能"></a>主界面翻译查询功能</h2><ul><li>手动输入<br>  在主界面，点击输入框，就可以输入要翻译的内容，点击魔术手势按钮，进行查询，查询过程中魔术收拾按钮会显示进度圈，查询完成后在卡片中会显示翻译结果<br>  点击翻译结果就可以复制到剪切板，点击音标就可以播放单词发音，如果有开启分词模式，长按翻译结果就可调出分词界面，选择需要的内容<br>  查询完翻译后，将魔术手势球向右划就可以将翻译结果添加到记忆本中<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130319.png" alt=""></li><li>语音输入<br>  长按魔术手势球不放即可开始语音输入，此时魔术手势球的图标就会变成语音输入提示图标，放开手指就可结束语音输入，长时间没有声音输入，程序也会自动停止语音输入功能<br>  语音输入结束后，程序会通过讯飞提供的语音技术，将语音转换为文字，自动输入到输入框，此时只需要点击魔术手势球就可以进行翻译了<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130357.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130412.png" alt=""></li></ul><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><ul><li><p>登陆<br>  本程序为了程序的简洁性，提供了便捷的一键登陆省去了用户的注册和使用成本，非常方便<br>  点击“QQ一键登陆”后如果有安装手机QQ则会自动跳转到快捷登陆界面，如果没有安装手机QQ则会跳转到网页登陆界面，登陆完毕后，将会自动获取用户头像和云端记忆本数据，用户可以自由的选择同步方式，也可以选择不同步<br>  第一次登陆成功后，将会显示用户引导，提示“退出操作”<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130449.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130510.png" alt=""><br>  点击头像后就会有一个翻转效果，翻转为一个叉叉的图标，点击就可进行退出操作，将会显示一个炸裂的效果，程序将自定进行退出操作<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130523.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130539.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130603.png" alt=""><br>  登陆成功后，可以进行选择同步方式，不选择则不进行同步，选择后，程序背景波浪将会加速波浪变矮，同步完成后，波浪会恢复正常，提醒同步成功<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130637.png" alt=""></p></li><li><p>多彩主题<br>  设置界面右滑即可进入主题设置界面，“易译”内置20种多彩主题，可以随心切换，也可以开启“随机主题”模式，开启后每次进程序都会切换不同的主题<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130703.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130721.png" alt=""></p></li><li><p>更多设置<br>  在设置界面向右滑动即可进入<strong>更多设置</strong><br>  在这里可以进行更多的设置，如：检查版本更新，清空单词发音的缓存的操作<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130747.png" alt=""></p></li></ul><h2 id="句子词性分析"><a href="#句子词性分析" class="headerlink" title="句子词性分析"></a>句子词性分析</h2><p>在设置中开启分词模式后，在使用复制翻译或者任何触发翻译（除主界面的输入点击翻译）都会优先触发分词功能。    分词功能是用来帮助用户筛选和排序获得的文字，我们日常生活中，复制的要翻译的内容或者获取的要翻译的内容大都会参杂着一些不需要的文字，传统的做法是粘贴后在一个个删除，而有了分词后，就可以直接选择需要的部分，简单快捷，定位准确，选好后直接点击右下角的搜索图标就会跳转到主界面进行翻译<br>选中文字后，可以点击右上角的图标进行复制<br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204130938.png" alt=""><br>左下角的第一个图标可以进行反向选择<br>左下角第二个图标点击后，可以随意拖动文字进行任意排序，点击按钮后按钮会变成打勾按钮，排序好后，点击打勾图标按钮即<br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204131006.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204131015.png" alt=""><br>分词功能覆盖于大部分的程序操作，极大的便利于用户对信息的过滤，快捷的分离信息，分离获取的翻译的内容，值获取想要的部分</p><h2 id="手势悬浮球"><a href="#手势悬浮球" class="headerlink" title="手势悬浮球"></a>手势悬浮球</h2><p>在设置第一页即可找到开启的开关，点击开关后如果程序没有具有展示悬浮球的权限，程序将会自动跳转到系统悬浮窗设置界面，只要打开设置悬浮窗口的开关，返回程序再打开收拾悬浮球的开关即可，打开时会有操作介绍<br>悬浮球是本程序快捷操作的核心，很大程度的辅助了用户的操作</p><ul><li>长按悬浮球然后在拖动就可以进行悬浮球的移动</li><li>单击就可以进入程序的主界面</li><li>下拉可以进行快速的语音输入，图标将会变成“碟片”形式旋转，提示正在收听，当用户不说话时，语音录入将会自动停止，此时如果有打开分词模式将会进入分词模式，如果没有打开分词模式将直接进入主界面进行翻译</li><li>下拉两秒不放，即可<strong>暂时</strong>关闭悬浮球，并在下次打开主界面的时候再次自动打开</li><li>向左或者向右拉动，即可打开全局复制功能<br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204131200.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204131212.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204131221.png" alt=""></li></ul><h2 id="复制翻译"><a href="#复制翻译" class="headerlink" title="复制翻译"></a>复制翻译</h2><p>在设置中打开复制翻译，即可使用复制翻译功能，也可在设置中开启或者关闭复制查词是否只对英语有效，来过滤复制的触发情况<br>在任何界面（除本程序）复制任何要翻译的内容，就会呼出本程序（如果又开启分词模式则进入分词模式，没有开启则直接进入主界面进行翻译）<br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204131245.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204131255.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204131304.png" alt=""></p><h2 id="全局复制"><a href="#全局复制" class="headerlink" title="全局复制"></a>全局复制</h2><p>通过悬浮球左拉或者右拉手势既可触发<br>有些系统或者软件的界面是无法复制的，所以针对此我们推出了全局复制功能，在大部分场景中都可以实现快捷省心的复制。启动全局复制后，会出现选区，可选择复制的文字周围会出现虚线框，点击即可选中，长按触发翻译功能，为了不遮挡可复制范围，下方的两个按钮是可以任意拖动的，不影响具体功能，选中点击确定即可获取选中的所有文本进入翻译<br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204131422.png" alt=""></p><h2 id="OCR"><a href="#OCR" class="headerlink" title="OCR"></a>OCR</h2><ul><li>基本OCR<br>  在主界面图片选取按钮选取图片后就会进入裁剪界面，选择需要识别的文字的区域点击确定即可自动开始识别<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204131437.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204131451.png" alt=""></li><li>悬浮手势球快捷OCR<br>  在任意界面（除主程序界面），通过上拉手势球就可进入OCR快捷识别功能<br>  开启后会在屏幕上显示3个按钮，3个按钮都是可以随意移动的<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204131517.png" alt=""><br>  点击确定按钮可以开启截取模式，截取全屏，然后你可以选择要翻译的内容进行裁剪，然后调用翻译功能（如果有开启分词模式则先进入分词模式）<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204131528.png" alt=""><br>  点击中间的按钮即可开启全屏标注功能，自定翻译全屏幕的英文，然后以叠层的方式覆盖在原文上<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204131550.png" alt=""><br>  点击叠层内容即可显示OCR识别的文字的原文<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204131606.png" alt=""><br>  长按叠层可开启分词模式，对翻译的内容进行选取和复制，或者再次翻译</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在日益国际化的现在，英语成为了主流的语言，很多地方，生活和学术上都需要用到英语，很多研究的结果文章也是以英语为主要语言，而现在刚接触技术或者英语的人就很难很快的学好英语，没办法看懂英语内容，而传统的翻译软件存在巨大的局限性，没有办法很快速的进行翻译，一般的输入翻译存在很大的局限性，国内软件又有太多的广告，软件也十分臃肿。因此我们致力于打造一款高效，快速，又界面精美的翻译APP，我们的快捷翻译覆盖99%的操作场景，能让我们告别手动输入查找翻译的复杂过程&lt;/p&gt;
    
    </summary>
    
    
      <category term="Project" scheme="http://smileorigin.site/categories/Project/"/>
    
    
      <category term="Android" scheme="http://smileorigin.site/tags/Android/"/>
    
      <category term="Translate" scheme="http://smileorigin.site/tags/Translate/"/>
    
      <category term="Design" scheme="http://smileorigin.site/tags/Design/"/>
    
      <category term="Bigbang" scheme="http://smileorigin.site/tags/Bigbang/"/>
    
  </entry>
  
  <entry>
    <title>Git操作</title>
    <link href="http://smileorigin.site/git/git/"/>
    <id>http://smileorigin.site/git/git/</id>
    <published>2017-10-18T05:20:00.000Z</published>
    <updated>2020-07-03T02:30:19.396Z</updated>
    
    <content type="html"><![CDATA[<p>记录Git操作的命令和细节</p><a id="more"></a><h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><h3 id="git-pull-amp-git-fetch"><a href="#git-pull-amp-git-fetch" class="headerlink" title="git pull &amp; git fetch"></a>git pull &amp; git fetch</h3><p><code>git fetch</code>是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中；而<code>git pull</code> 则是将远程主机的最新内容拉下来后直接合并，<code>git pull = git fetch + git merge</code></p><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><ul><li>将文件的修改，文件的新建，添加到暂存区<br>  <code>git add .</code></li><li>将文件的修改、文件的删除，添加到暂存区<br>  <code>git add -u</code></li><li>将文件的修改，文件的删除，文件的新建，添加到暂存区<br>  <code>git add -A</code></li></ul><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><ul><li>撤销commit<br>  <code>git reset --soft HEAD^</code></li><li>添加文件并提交commit<br>  <code>git commit -a -m &#39;message&#39;</code></li><li>修改未提交commit信息<br>  <code>git commit --amend -m</code></li></ul><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><ul><li>推送本地分支到远程仓库<br>  <code>git push origin develop</code></li></ul><h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分支切换</span></span><br><span class="line">git checkout -b develop origin/develop</span><br><span class="line">git checkout -t origin/develop                  <span class="comment"># --track 快捷方式</span></span><br><span class="line">git checkout develop                            <span class="comment"># 如果需要检出的分支没有重名的则可简化为这样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原文件修改</span></span><br><span class="line">git checkout xx.file</span><br><span class="line">git checkout -- xxx.file                        <span class="comment"># 文件与分支同名的情况可加 -- 解决</span></span><br><span class="line">git checkout .                                  <span class="comment"># 撤销当前目录的所有文件的修改</span></span><br></pre></td></tr></table></figure><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地分支</span></span><br><span class="line">git branch -d a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除本地分支</span></span><br><span class="line">git branch -D a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git branch -r -d origin/dev</span><br><span class="line">git push origin :dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改分支名称</span></span><br><span class="line">git branch -m dev develop</span><br></pre></td></tr></table></figure><h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><ul><li>合并远程分支到本地<br>  <code>git merge origin/beta</code></li></ul><h3 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h3><ul><li>暂存代码<br>使用该命令可以将现在的代码保存下来并恢复到最近一次拉取下来的代码状态，可以使用save “last message”可以为暂存的代码添加备注信息<br>  <code>git stash [push -m  &quot;last message&quot;]</code></li><li>恢复暂存代码<br>使用该命令可以将最近一次暂存代码取出和当前的代码进行合并<br>  <code>git stash pop</code></li><li>查看暂存代码列表<br>  <code>git stash list</code></li><li>取出指定版本的暂存代码<br>  <code>git stash apply stash@{1}</code></li><li>查看<code>stash</code>的内容和当前内容的差异（<code>-p</code>详细差异）<br>  <code>git stash show [-p]</code></li></ul><h3 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h3><ul><li>创建<br>  <code>git tag -a v1.9.13 -m &quot;my version 1.9.13&quot;</code></li><li>显示tag信息<br>  <code>git show v1.9.13</code></li><li>提交<br>  <code>git push origin v1.9.13</code></li><li>删除标签<br>  <code>git tag -d v1.9.13</code></li><li>删除本地标签后删除远程仓库标签<br>  <code>git push &lt;remote&gt; :refs/tags/&lt;tagname&gt;</code></li></ul><h3 id="rollback"><a href="#rollback" class="headerlink" title="rollback"></a>rollback</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br><span class="line">git push origin HEAD --force</span><br></pre></td></tr></table></figure><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><ul><li><p>查看文件修改状态<br><code>git status -s</code></p></li><li><p>查看代码作者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git blame [filename]</span><br><span class="line">git blame -L startLineNum, endLineNum</span><br></pre></td></tr></table></figure></li><li><p>添加远程仓库<br><code>git remote add origin git@github.com:stormzhang/test.git</code></p></li><li><p>生成ssh密匙<br><code>ssh-keygen -t rsa</code></p></li><li><p>添加git用户信息<br><code>git config --global user.name &quot;smileorigin&quot;</code><br><code>git config --global user.email &quot;smileorigin@foxmail.com&quot;</code></p></li><li><p>合并指定提交<br><code>git cherry-pick &lt;id&gt;</code></p></li><li><p>gitignore<br>本地仓库的文件忽略规则可以在<strong>【本地仓库/.git/info/exclude】</strong>文件中添加。注意，忽略规则不会提交到共享库中，只对本地有效</p></li></ul><h2 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h2><h3 id="git-commit风格"><a href="#git-commit风格" class="headerlink" title="git commit风格"></a>git commit风格</h3><ul><li><code>build</code>：构建相关</li><li><code>ci</code>：ci 相关</li><li><code>chore</code>：构建过程或辅助工具的变动</li><li><code>docs</code>：文档修改</li><li><code>feat</code>：新功能</li><li><code>fix</code>：修复 bug</li><li><code>perf</code>：改进性能的代码</li><li><code>refactor</code>：重构</li><li><code>revert</code>：版本回退</li><li><code>style</code>：格式改动</li><li><code>test</code>：增加测试</li></ul><h3 id="git-分支管理参考"><a href="#git-分支管理参考" class="headerlink" title="git 分支管理参考"></a>git 分支管理参考</h3><table><thead><tr><th>源分支</th><th>目标分支</th><th>源分支描述</th><th>源分支从哪个分支切出</th></tr></thead><tbody><tr><td>develop</td><td>N/A</td><td>基于此分支开发功能，为项目的开发分支，版本迭代应当基于此分支</td><td>master</td></tr><tr><td>master</td><td>develop</td><td>基于此分支发布文件，为项目的线上分支，<strong>Hotfix</strong> 应当基于此分支</td><td>N/A</td></tr><tr><td>feature/*</td><td>develop</td><td>用于集成功能</td><td>develop</td></tr><tr><td>hotfix/*</td><td>master</td><td>用于热修复补丁</td><td>master</td></tr></tbody></table><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="git-免登录提交"><a href="#git-免登录提交" class="headerlink" title="git 免登录提交"></a>git 免登录提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 的时候，记得 <span class="built_in">clone</span> ssh 的链接</span><br></pre></td></tr></table></figure><h3 id="vimdiff"><a href="#vimdiff" class="headerlink" title="vimdiff"></a>vimdiff</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global diff.tool vimdiff<span class="comment"># 设置diff工具为 vimdiff</span></span><br><span class="line">git config --global difftool.prompt <span class="literal">false</span></span><br><span class="line">git config --global alias.d difftool<span class="comment"># 设置别名</span></span><br></pre></td></tr></table></figure><h3 id="git-lg配置-–-更合理的-git-log-显示"><a href="#git-lg配置-–-更合理的-git-log-显示" class="headerlink" title="git lg配置 – 更合理的 git log 显示"></a>git lg配置 – 更合理的 git log 显示</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lg <span class="string">"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative"</span></span><br></pre></td></tr></table></figure><p>使用后只要在命令行输入<code>git lg</code>就可以查看到日志，效果比原来的<code>git log</code>好太多了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git lg</span><br><span class="line">git lg -p                                           <span class="comment"># 查看每个版本的具体差异</span></span><br></pre></td></tr></table></figure><h3 id="Git-软件版本升级"><a href="#Git-软件版本升级" class="headerlink" title="Git 软件版本升级"></a>Git 软件版本升级</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载旧 git</span></span><br><span class="line">sudo apt-get autoremove git</span><br><span class="line"></span><br><span class="line">sudo apt install make libssl-dev libghc-zlib-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip</span><br><span class="line">wget https://www.kernel.org/pub/software/scm/git/git-2.21.0.tar.gz</span><br><span class="line">tar -xvf git-2.21.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> git-2.21.0</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><ul><li><code>fatal: unable to find remote helper for &#39;https&#39;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/lib/git-core/git-remote-https /bin/</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录Git操作的命令和细节&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://smileorigin.site/categories/Git/"/>
    
    
      <category term="Git" scheme="http://smileorigin.site/tags/Git/"/>
    
      <category term="Experience" scheme="http://smileorigin.site/tags/Experience/"/>
    
  </entry>
  
  <entry>
    <title>SSD1306连接Raspberry和驱动安装</title>
    <link href="http://smileorigin.site/raspberry/oled/"/>
    <id>http://smileorigin.site/raspberry/oled/</id>
    <published>2017-09-21T13:38:00.000Z</published>
    <updated>2020-06-20T07:41:21.775Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派安装配置 SSD1306 OLED 显示屏</p><a id="more"></a><h2 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h2><p><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204004836.png" alt=""></p><h2 id="开启I2C功能"><a href="#开启I2C功能" class="headerlink" title="开启I2C功能"></a>开启I2C功能</h2><ul><li><p>命令行开启I2C功能<br>  在命令行下使用<code>sudo raspi-config</code>进入树莓派设置界面<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204004851.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204004907.png" alt="">  </p></li><li><p>UI界面开启I2C功能<br>  在UI界面直接找到下图的红框项即可<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204004926.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204005008.png" alt="">  </p></li></ul><h2 id="检验是否成功开启I2C"><a href="#检验是否成功开启I2C" class="headerlink" title="检验是否成功开启I2C"></a>检验是否成功开启I2C</h2><ul><li>命令行输入<code>sudo i2cdetect -y 1</code><br>  如果又看到如下类似界面，即I2C开启成功，显示屏成功连接， 3c就是oled屏幕地址</li></ul><h2 id="安装驱动程序"><a href="#安装驱动程序" class="headerlink" title="安装驱动程序"></a>安装驱动程序</h2><ul><li>这里使用<code>Adafruit_Python_SSD1306</code>库,在命令行依次输入以下命令   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-essential python-dev python-pip</span><br><span class="line">sudo pip install RPi.GPIO</span><br><span class="line">sudo apt-get install python-imaging python-smbus</span><br><span class="line">sudo apt-get install git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/adafruit/Adafruit_Python_SSD1306.git</span><br><span class="line"><span class="built_in">cd</span> Adafruit_Python_SSD1306</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure></li><li>安装好库后进入<code>Adafruit_Python_SSD1306</code>目录下即可发现有一个<code>example</code>目录，里面就是程序的实例，该库使用的是<code>Python2.x</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树莓派安装配置 SSD1306 OLED 显示屏&lt;/p&gt;
    
    </summary>
    
    
      <category term="Raspberry" scheme="http://smileorigin.site/categories/Raspberry/"/>
    
    
      <category term="SSD1306" scheme="http://smileorigin.site/tags/SSD1306/"/>
    
  </entry>
  
</feed>
