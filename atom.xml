<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thomas Woo</title>
  
  <subtitle>Heavy is the head who wears the crown.</subtitle>
  <link href="http://smileorigin.site/atom.xml" rel="self"/>
  
  <link href="http://smileorigin.site/"/>
  <updated>2022-08-19T06:41:58.786Z</updated>
  <id>http://smileorigin.site/</id>
  
  <author>
    <name>Thomas Woo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>YUV</title>
    <link href="http://smileorigin.site/media/YUV/"/>
    <id>http://smileorigin.site/media/YUV/</id>
    <published>2022-08-18T13:21:00.000Z</published>
    <updated>2022-08-19T06:41:58.786Z</updated>
    
    <content type="html"><![CDATA[<p><strong>YUV</strong> 是一种颜色编码方法。常使用在各个影像处理组件中。 “Y” 表示**<a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E6%98%8E">亮度</a><strong>（Luminance、Luma），“U” 和 “V” 则是</strong><a href="https://zh.wikipedia.org/wiki/%E8%89%B2%E5%BA%A6_(%E8%89%B2%E5%BD%A9%E5%AD%A6)">色度</a><strong>、</strong><a href="https://zh.wikipedia.org/wiki/%E6%BF%83%E5%BA%A6_(%E8%89%B2%E5%BD%A9%E5%AD%B8)">浓度</a>**（Chrominance、Chroma）。YCrCb 颜色空间是由 YUV 颜色空间派生的一种颜色空间。YCbCr中，Y 是指亮度分量，Cb 指蓝色色度分量，而 Cr 指红色色度分量。在 YUV 家族中，YCbCr 是在计算机系统中应用最多的成员，其应用领域很广泛，JPEG、MPEG 均采用此格式。一般所讲的 YUV 大多是指 YCbCr</p><a id="more"></a><p>为什么会有 YUV？ YUV 的发明是由于彩色电视与黑白电视的过渡时期，早期的黑白电视只能显示黑色和白色两种颜色，随着技术的发展，彩色电视出现了，但对于电视台来说，不可能同时广播两套数字电视信号(当然也不是不行，但是同一个节目信号广播两次也是浪费)，于是人们就在思考能否能以更简便的方式来改进现有的技术方案，即是说，广播电视中心只需要广播一套电视信号就能同时满足黑白电视和彩色电视的显示需求。那具体如何实现呢？这时候 YUV就出来了，我们用 Y 表示黑白图像，用 UV 表示彩色图像，你要是黑白电视，那你接收到 YUV 信号后，只需要拿到 Y 就可以了，因为 Y 代表的就是黑白图像，UV 可以直接扔掉；如果是彩色电视，那你可以收到 YUV 三个信号后再叠加显示，就可以显示出彩色图像。这样便一举解决了彩色电视与黑白电视的兼容问题</p><h2 id="YUV-采样"><a href="#YUV-采样" class="headerlink" title="YUV 采样"></a>YUV 采样</h2><p>我们经常提到：<strong>YUV4:4:4</strong>、<strong>YUV4:2:2</strong>、<strong>YUV4:2:0</strong>，到这里可能会有疑问：“YUV 不是颜色空间吗？为什么后面还会跟着一串数字？” 因为当你看到 YUV 后面跟着一串数字的时候，<strong>YUV</strong> 已经不再是颜色空间的基的含义了，而是意味着在原始 <strong>YUV 流</strong> 上的采样<br><strong>YUV4:4:4</strong>，<strong>YUV4:2:2</strong> 和 <strong>YUV4:2:0</strong> 是三种 <strong>YUV</strong>（在数字电路中指代 YCbCr）的采样，三位数分别代表 Y\U\V（数字电路中为 Y\Cb\Cr，本段后同）通道的抽样比。所以可以理解，<strong>444</strong> 是全采样；而 <strong>422</strong> 是对 Y 进行全采样，对 U\V 分别进行 1&#x2F;2 均匀采样。有趣的问题来了，<strong>420</strong> 难道是完全丢弃了 V通道&#x2F;分量 数据嘛？答案是否定的<br>首先，必须要搞明白一个问题，一帧图像是由一个个像素组成的矩形，譬如 4x4 的尺寸的图像，就是由 16 个像素点组成的。在平时接触的 <strong>RGB</strong> 图像中，每个像素必然至少由 R\G\B 这三个通道组成的（有的图像还有 alpha 分量），每个分量的取值一般都是 [0, 255]，因此经常说一个像素占用 3 字节（如果还有其他分量，比如 RGBA，就另当别论）。<strong>YUV</strong> 图像同理，它的每个像素是由 Y\U\V 组成的</p><h3 id="YUV4-4-4"><a href="#YUV4-4-4" class="headerlink" title="YUV4:4:4"></a>YUV4:4:4</h3><p>YUV4:4:4，就是每个像素对应一个 Y 分量，一个 U 分量，一个 V 分量，即每个 Y 对应一组 UV 分量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">四个像素为：     [Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3]</span><br><span class="line">采样的码流为：    Y0 U0 V0 Y1 U1 V1 Y2 U2 V2 Y3 U3 V3</span><br><span class="line">映射出的像素点为：[Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3]</span><br></pre></td></tr></table></figure><h3 id="YUV4-2-2"><a href="#YUV4-2-2" class="headerlink" title="YUV4:2:2"></a>YUV4:2:2</h3><p>YUV4:2:2 表示 UV 分量的采样率是 Y 分量的一半，即每两个 Y 共用一组 UV 分量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">四个像素为：     [Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3]</span><br><span class="line">采样的码流为：    Y0 U0 Y1 V1 Y2 U2 Y3 U3</span><br><span class="line">映射出的像素点为：[Y0 U0 V1]、[Y1 U0 V1]、[Y2 U2 V3]、[Y3 U2 V3]</span><br></pre></td></tr></table></figure><h3 id="YUV4-2-0"><a href="#YUV4-2-0" class="headerlink" title="YUV4:2:0"></a>YUV4:2:0</h3><p>YUV4:2:0 并不意味着不采样 V 分量。它指的是对每条扫描线来说，只有一种色度分量以 2:1 的采样率存储，相邻的扫描行存储不同的色度分量。也就是说，如果第一行是 4:2:0，下一行就是 4:0:2，在下一行就是 4:2:0，以此类推。换句话说是四个像素共用一个 U，共用一个 V</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">图像像素为：</span><br><span class="line">[Y0 U0 V0]、[Y1 U1 V1]、 [Y2 U2 V2]、 [Y3 U3 V3]</span><br><span class="line">[Y5 U5 V5]、[Y6 U6 V6]、 [Y7 U7 V7] 、[Y8 U8 V8]</span><br><span class="line"></span><br><span class="line">采样的码流为：</span><br><span class="line">Y0 U0 Y1 Y2 U2 Y3 </span><br><span class="line">Y5 V5 Y6 Y7 V7 Y8</span><br><span class="line"></span><br><span class="line">映射出的像素点为：</span><br><span class="line">[Y0 U0 V5]、[Y1 U0 V5]、[Y2 U2 V7]、[Y3 U2 V7]</span><br><span class="line">[Y5 U0 V5]、[Y6 U0 V5]、[Y7 U2 V7]、[Y8 U2 V7]</span><br></pre></td></tr></table></figure><p>RGB 或 YUV4:4:4 每 4 个像素需要的内存 &#x3D; 4 * 3 * 8bit &#x3D; 12 byte，而  YUV4:2:0 则为 (4 + 2) * 8bit &#x3D; 6 byte，只有 YUV4:4:4 或 RGB 的一半，总的数据量 &#x3D; w x h x 1.5(YUV4:4:4 &#x3D; w x h x 3)</p><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20220818191501.png" style="zoom:33%;" /><h2 id="存储格式"><a href="#存储格式" class="headerlink" title="存储格式"></a>存储格式</h2><p>YUV 存储格式有：</p><ul><li>紧凑格式（Packed Format）：将 Y、U、V 值存储成 Macro Pixels 数组，和 <a href="https://zh.wikipedia.org/wiki/RGB">RGB</a> 的存放方式类似（YUV YUV YUV）</li><li>平面格式（Planar Format）：将 Y、U、V 的三个分量分别存放在不同的矩阵中（YYYYY…UUUUU…VVVVV）</li><li>半平面格式（Semi Planar Format）：将 Y 分量单独存储，UV 分量交错存储（YYYYY…UVUVUV、YYYYY…VUVUVU）</li></ul><table><thead><tr><th align="left">采样方式</th><th align="left">格式</th><th align="left">具体名称</th></tr></thead><tbody><tr><td align="left">YUV420</td><td align="left">Planar</td><td align="left">I420 &#x2F; 420P</td></tr><tr><td align="left"></td><td align="left">Planar</td><td align="left">YV12</td></tr><tr><td align="left"></td><td align="left">Semi Planar</td><td align="left">NV12</td></tr><tr><td align="left"></td><td align="left">Semi Planar</td><td align="left">NV21</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">YUV422</td><td align="left">Planar</td><td align="left">422P</td></tr><tr><td align="left"></td><td align="left">Semi Planar</td><td align="left">422SP</td></tr><tr><td align="left"></td><td align="left">Packed</td><td align="left">YUYV &#x2F; YUVY &#x2F; YUY2</td></tr><tr><td align="left"></td><td align="left">Packed</td><td align="left">UYVY</td></tr><tr><td align="left"></td><td align="left">Packed</td><td align="left">VYUY</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">YUV444</td><td align="left">Planar</td><td align="left">444P</td></tr><tr><td align="left"></td><td align="left">Semi Planar</td><td align="left">444SP</td></tr></tbody></table><h3 id="YUV420P-x2F-YUV420SP"><a href="#YUV420P-x2F-YUV420SP" class="headerlink" title="YUV420P&#x2F;YUV420SP"></a>YUV420P&#x2F;YUV420SP</h3><p>YUV420P 是基于 Packed 格式存储，先存储所有的 Y 分量，然后存储所有的 U 分量或者 V 分量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YYYYY...UUUUU...VVVVV</span><br><span class="line">YYYYY...VVVVV...UUUUU</span><br></pre></td></tr></table></figure><p>YUV420SP 基于 Semi Planar 格式存储，与 YUV420P 的区别在于它的 U、V 分量是按照 UV 或者 VU 交替顺序进行存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YYYYYYY...UVUVUVUV...............</span><br><span class="line">YYYYYYY...VUVUVUVU...............</span><br></pre></td></tr></table></figure><h4 id="YU12-和-YV12"><a href="#YU12-和-YV12" class="headerlink" title="YU12 和 YV12"></a>YU12 和 YV12</h4><p>YU12 和 YV12 格式都属于 YUV420P 类型</p><ul><li>YU12：先存 Y 分量，再 U 后 V</li><li>YV12：先存 Y 分量，再 V 后 U</li></ul><h4 id="NV12-和-NV21"><a href="#NV12-和-NV21" class="headerlink" title="NV12 和 NV21"></a>NV12 和 NV21</h4><p>NV12 和 NV21 格式都属于 YUV420SP 类型</p><ul><li>NV12：先存 Y 分量，再 UV 交替存储</li><li>NV21：先存 Y 分量，在 VU 交替存储</li></ul><h3 id="YUV422"><a href="#YUV422" class="headerlink" title="YUV422"></a>YUV422</h3><h4 id="YUYV"><a href="#YUYV" class="headerlink" title="YUYV"></a>YUYV</h4><p>YUYV 格式属于 YUV422，采用 Packed 格式进行存储，Y 和 UV 分量按照 2:1 比例采样，每个像素都采集 Y 分量，每隔一个像素采集它的 UV 分量。Y0 和 Y1 共用 U0 V0 分量，Y2 和 Y3 共用 U2 V2 分量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">采样的码流为：    Y0 U0 Y1 V0 Y2 U2 Y3 V2</span><br><span class="line">映射出的像素点为：[Y0 U0 V0]、[Y1 U0 V0]、[Y2 U2 V2]、[Y3 U2 V2]</span><br></pre></td></tr></table></figure><h4 id="UYVY"><a href="#UYVY" class="headerlink" title="UYVY"></a>UYVY</h4><p>UYVY 也是 YUV422 采样的存储格式中的一种，只不过与 YUYV 排列顺序相反，还有 YVYU， VYUY 这些都是类似的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">采样的码流为：    U0 Y0 V0 Y1 U2 Y2 V2 Y3</span><br><span class="line">映射出的像素点为：[Y0 U0 V0]、[Y1 U0 V0]、[Y2 U2 V2]、[Y3 U2 V2]</span><br></pre></td></tr></table></figure><h4 id="YUV422P"><a href="#YUV422P" class="headerlink" title="YUV422P"></a>YUV422P</h4><p>YUV422P 属于 YUV422 的一种，它是一种 Planar 格式，即 Y、U、V 分别存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YYYYY....UUUUU...VVVVV...</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.cnblogs.com/yongdaimi/p/10647005.html">数字音视频技术: 谈谈 YUV的采样格式和存储格式 - 夜行过客 - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/felaim/article/details/103522381">数字图像处理：YUV与RGB的一些理解_Felaim的博客-CSDN博客</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;YUV&lt;/strong&gt; 是一种颜色编码方法。常使用在各个影像处理组件中。 “Y” 表示**&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%B5%81%E6%98%8E&quot;&gt;亮度&lt;/a&gt;&lt;strong&gt;（Luminance、Luma），“U” 和 “V” 则是&lt;/strong&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%89%B2%E5%BA%A6_(%E8%89%B2%E5%BD%A9%E5%AD%A6)&quot;&gt;色度&lt;/a&gt;&lt;strong&gt;、&lt;/strong&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%BF%83%E5%BA%A6_(%E8%89%B2%E5%BD%A9%E5%AD%B8)&quot;&gt;浓度&lt;/a&gt;**（Chrominance、Chroma）。YCrCb 颜色空间是由 YUV 颜色空间派生的一种颜色空间。YCbCr中，Y 是指亮度分量，Cb 指蓝色色度分量，而 Cr 指红色色度分量。在 YUV 家族中，YCbCr 是在计算机系统中应用最多的成员，其应用领域很广泛，JPEG、MPEG 均采用此格式。一般所讲的 YUV 大多是指 YCbCr&lt;/p&gt;</summary>
    
    
    
    <category term="MultiMedia" scheme="http://smileorigin.site/categories/MultiMedia/"/>
    
    
    <category term="MultiMedia" scheme="http://smileorigin.site/tags/MultiMedia/"/>
    
    <category term="YUV" scheme="http://smileorigin.site/tags/YUV/"/>
    
  </entry>
  
  <entry>
    <title>H.264 标准语法分析（未完）</title>
    <link href="http://smileorigin.site/media/H.264%20%E6%A0%87%E5%87%86%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>http://smileorigin.site/media/H.264%20%E6%A0%87%E5%87%86%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</id>
    <published>2022-01-02T10:00:00.000Z</published>
    <updated>2022-12-12T07:57:51.860Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于标准文档 <strong>T-REC-H.264-202108</strong> 进行编写，主要根据标准文档解释说明 NAL 单元的组成结构及各个语法单元的作用</p><a id="more"></a><h2 id="语法函数、描述符规定和表格说明"><a href="#语法函数、描述符规定和表格说明" class="headerlink" title="语法函数、描述符规定和表格说明"></a>语法函数、描述符规定和表格说明</h2><p>语法函数和描述符规定查看 <strong>H.264 语法函数和描述符规定</strong> 文章</p><p>表格列说明：</p><ul><li><strong>C</strong> 列：表示该语法元素适用的 NAL 单元类型，对应 [NAL unit type 小节中 NAL 单元类型表格的第一列](#NAL unit type)， 例如：类别 2 表示编码片数据分区 A，类别 3 表示编码片数据分区 B，类别 4 表示编码片数据分区 C，ALL 表示适用所有类型的 NAL 单元</li><li>Descriptor 列：描述符列，放置该语法元素对应的描述符</li></ul><h2 id="NAL-unit"><a href="#NAL-unit" class="headerlink" title="NAL unit"></a>NAL unit</h2><p>NAL 单元由 NAL unit Header 和 RBSP 组成，RBSP（Raw Byte Sequence Payload，原始字节序列载荷），下表中 <code>rbsp_byte</code> 即 RBSP 数据之前的部分都是属于 NAL unit Header</p><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20220101161536.png" style="margin-left: auto; margin-right: auto; display: block;" /><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211229174550.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>7.3.1 NAL unit syntax</b></p><p><strong>语法元素说明</strong>：</p><ul><li><p>forbidden_zero_bit</p><p>  长度 1 bit，值为 0。若解码器检测 NAL 单元中的 forbidden_zero_bit 为 1 则会丢弃所有字节流数据，直到检测到新的 NAL 单元</p></li><li><p>nal_ref_idc</p><p>  长度 2 bit，用来指示当前 NAL 单元的优先级</p><p>  nal_ref_idc 不等于 0 时，规定 NAL 单元的内容包含一个序列参数集（SPS），或一个序列参数集扩展（SPS extension），或一个子序列参数集（Subset SPS），或一个图像参数集（PPS），或一个参考图片的片，或在参考图片的片之前的带前缀的 NAL 单元（Prefix NAL unit）</p><p>  一个参考图片的带前缀的 NAL 单元</p><p>  na l_unit_type 等于 5（IDR） 的 NAL 单元的 nal_ref_idc 不应等于 0；</p><p>  所有 nal_unit_type 等于 6、9、10、11 或 12 的 NAL 单元其 nal_ref_idc 应等于 0</p></li><li><p>nal_unit_type</p><p>  长度 5 bit，表示该 NAL 单元的类型</p></li><li><p>svc_extension_flag</p><p>  长度 1 bit，SVC（Scalable Video Coding，可适性视频编码）是传统 H.264&#x2F;MPEG-4 AVC 编码的延伸，可提升更大的编码弹性，并具有<strong>时间可适性</strong>（Temporal Scalability）、<strong>空间可适性</strong>（Spatial Scalability）及<strong>信噪比可适性</strong>（SNR Scalability）三大特性，使视频传输更能适应在异质的网络带宽</p></li><li><p>avc_3d_extension_flag</p><p>  长度 1 bit，与 3D 编码相关</p></li><li><p>rbsp_byte</p><p>  rbsp_byte[i] 表示 RBSP 数据的第 i 字节</p></li><li><p>emulation_prevention_three_byte</p><p>  防竞争码（0x30），见上文描述</p></li></ul><p>伪代码说明：</p><p>NumBytesInNALunit 为该 NAL 单元的大小，单位 byte</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历 NAL 单元的 RBSP 部分，主要的作用是去除防竞争码读取原数据</span></span><br><span class="line"><span class="keyword">for</span> (i = nalUnitHeaderBytes; i &lt; NumBytesInNALunit; i++) &#123;</span><br><span class="line">    <span class="comment">// 若剩余未读取部分 &gt;= 3 字节且该位置起 3 字节的数据为 0x000003</span></span><br><span class="line">    <span class="comment">// 则表示该数据是经过防竞争处理的，读取的时候需要去除该防竞争码</span></span><br><span class="line"><span class="keyword">if</span>(i + <span class="number">2</span> &lt; NumBytesInNALunit &amp;&amp; next_bits( <span class="number">24</span> ) == <span class="number">0x000003</span>) &#123;</span><br><span class="line">        <span class="comment">// 防竞争处理过的数据，读取 2 字节数据（0x0000 部分），并跳过 1 字节数据（0x03）</span></span><br><span class="line">        rbsp_byte[NumBytesInRBSP++]</span><br><span class="line">        rbsp_byte[NumBytesInRBSP++]</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">        <span class="comment">// 满足防竞争处理条件的数据必定是 0x00000* 格式，处理后的数据为 0x0000030*（* 为 0、1、2、3）</span></span><br><span class="line">        <span class="comment">// 直接去除 0x03 得到的 0x00000* 还是跟原数据一致，所以这边直接跳过 0x03，相当于还原原数据</span></span><br><span class="line">        emulation_prevention_three_byte <span class="comment">/* equal to 0x03 */</span></span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 非防竞争处理过的数据，读取当前字节数据并继续读取后续数据</span></span><br><span class="line">        rbsp_byte[NumBytesInRBSP++]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NAL-unit-type"><a href="#NAL-unit-type" class="headerlink" title="NAL unit type"></a>NAL unit type</h3><table><thead><tr><th>NAL unit TYPE</th><th>说明及 RBSP 语法结构</th><th>是否是 VCL（Annex A）</th></tr></thead><tbody><tr><td>0</td><td>未规定</td><td>non-VCL</td></tr><tr><td>1</td><td>非 IDR 图像的编码片（Coded slice of a non-IDR picture）<br />slice_layer_without_partitioning_rbsp( )</td><td>VCL</td></tr><tr><td>2</td><td>编码片数据分区 A（Coded slice data partition A）<br />slice_data_partition_a_layer_rbsp( )</td><td>VCL</td></tr><tr><td>3</td><td>编码片数据分区 B（Coded slice data partition B）<br />slice_data_partition_b_layer_rbsp( )</td><td>VCL</td></tr><tr><td>4</td><td>编码片数据分区 C（Coded slice data partition C）<br />slice_data_partition_c_layer_rbsp( )</td><td>VCL</td></tr><tr><td>5</td><td>IDR 图像的编码片（Coded slice of an IDR picture）<br />slice_layer_without_partitioning_rbsp( )</td><td>VCL</td></tr><tr><td>6</td><td>补充增强信息（SEI，Supplemental Enhancement Information），在解码、显示或其它过程中起辅助作用<br />sei_rbsp( )</td><td>non-VCL</td></tr><tr><td>7</td><td>序列参数集（SPS，Sequence Parameter Set），包含解码配置，如：Profile Level、分辨率和帧率等<br />seq_parameter_set_rbsp( )</td><td>non-VCL</td></tr><tr><td>8</td><td>图像参数集（PPS，Picture Parameter Set），包含有关熵编码模式、分片组、运动预测和去块滤波器等<br />pic_parameter_set_rbsp( )</td><td>non-VCL</td></tr><tr><td>9</td><td>访问单元分隔符（AUD，Access Unit Delimiter）<br />access_unit_delimiter_rbsp( )</td><td>non-VCL</td></tr><tr><td>10</td><td>序列结束符（End of Sequence）<br />end_of_seq_rbsp( )</td><td>non-VCL</td></tr><tr><td>11</td><td>流结束符（End of Stream）<br />end_of_stream_rbsp( )</td><td>non-VCL</td></tr><tr><td>12</td><td>填充数据（Filler）<br />filler_data_rbsp( )</td><td>non-VCL</td></tr><tr><td>13</td><td>序列参数集扩展（Sequence parameter set extension）<br />seq_parameter_set_extension_rbsp( )</td><td>non-VCL</td></tr><tr><td>14</td><td>带前缀的 NAL 单元（Prefix NAL unit）<br />prefix_nal_unit_rbsp( )</td><td>non-VCL</td></tr><tr><td>15</td><td>子序列参数集（Subset sequence parameter set）<br />subset_seq_parameter_set_rbsp( )</td><td>non-VCL</td></tr><tr><td>16</td><td>深度参数集（Depth parameter set）<br />depth_parameter_set_rbsp( )</td><td>non-VCL</td></tr><tr><td>17..18</td><td>保留</td><td>non-VCL</td></tr><tr><td>19</td><td>未分隔的辅助编码图像的编码片<br />(Coded slice of an auxiliary coded picture without partitioning)<br />slice_layer_without_partitioning_rbsp( )</td><td>non-VCL</td></tr><tr><td>20</td><td>编码片扩展(Coded slice extension)<br />slice_layer_extension_rbsp( )</td><td>non-VCL</td></tr><tr><td>21</td><td>深度视图组件或 3D-AVC 纹理视图组件的编码片扩展<br />(Coded slice extension for a depth view component or a 3D-AVC texture view component)<br />slice_layer_extension_rbsp( )</td><td>non-VCL</td></tr><tr><td>22..23</td><td>保留</td><td>non-VCL</td></tr><tr><td>24..31</td><td>未规定</td><td>non-VCL</td></tr></tbody></table><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>Table 7-1 – NAL unit type codes, syntax element categories, and NAL unit type classes</b></p><h2 id="RBSP"><a href="#RBSP" class="headerlink" title="RBSP"></a>RBSP</h2><p>RBSP（Raw Byte Sequence Payload）原始字节序列载荷，是由一串数据比特串（SODB，String Of Data Bits）加上末尾的 trailing bits（使得整个 NAL 单元字节长度是 8 的倍数 ）组成，一个 NAL 单元可以包含多个 SODB，如果 SODB 为空（0 bit）则 RBSP 也为空</p><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20220101161557.png" style="margin-left: auto; margin-right: auto; display: block;" /><h3 id="RBSP-trailing-bits"><a href="#RBSP-trailing-bits" class="headerlink" title="RBSP trailing bits"></a>RBSP trailing bits</h3><p>大部分的 NAL 单元都只采用下述的 RBSP trailing bits 语法</p><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211230171853.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>7.3.2.11 RBSP trailing bits syntax</b></p><p><strong>语法元素说明</strong>：</p><ul><li><p>rbsp_stop_one_bit</p><p>  长度 1bit，总是为 1</p></li><li><p>rbsp_alignment_zero_bit</p><p>  长度为 1bit，总是为 0</p></li></ul><p>若 RBSP 的字节的最后 1Byte 的数据为如下所示，前三位（绿色方块  <code>010</code>）为 SODB 尾部数据，SODB 部分数据只占了该字节的 3 bit，还剩下 5bit 没有使用，此时根据上述语法会在 SODB 数据后的第一位填充 1（stop one bit），在剩余位置填充 0，将该字节填满</p><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20220101161642.png" style="margin-left: auto; margin-right: auto; display: block;" /><p><strong>NAL unit type 为 1～5、19、20 的 NAL 单元的 trailing bits 语法有些不同</strong>，在包含上述的 <code>rbsp_trailing_bits()</code> 语法下，还有额外的逻辑：</p><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211230191504.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>7.3.2.10 RBSP slice trailing bits syntax</b></p><p><strong>语法元素说明</strong>：</p><ul><li><p>cabac_zero_word</p><p>  总是为 0x0000</p></li></ul><p><strong>entropy_coding_mode_flag</strong> 存储在 PPS 中，可查看 [PPS 语法小节](#PPS RBSP)。当该 NAL 单元所使用的 PPS 中的 <strong>entropy_coding_mode_flag</strong> 为 1 时，循环判断当前位置是否为 RBSP 的结尾否则插入 <strong>cabac_zero_word(0x0000)</strong></p><h3 id="SPS-RBSP"><a href="#SPS-RBSP" class="headerlink" title="SPS RBSP"></a>SPS RBSP</h3><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211229174411.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>7.3.2.1 Sequence parameter set RBSP syntax</b></p><p>SPS RBSP 分为两部分 <code>seq_parameter_set_data()</code> 和 <code>rbsp_trailing_bits()</code></p><h4 id="SPS-data"><a href="#SPS-data" class="headerlink" title="SPS data"></a>SPS data</h4><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211229175045.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>7.3.2.1.1 Sequence parameter set data syntax</b></p><p><strong>语法元素说明</strong>：</p><ul><li><p>profile_idc</p><p>  编码时使用的 profile，profile 有 Baseline、Main、Extended 等</p></li><li><p>constraint_set0_flag</p><p>  强制使用 Baseline profile 进行编码</p></li><li><p>constraint_set1_flag</p><p>  强制使用 Main profile 进行编码</p></li><li><p>constraint_set2_flag</p><p>  强制使用 Extended profile 进行编码</p></li><li><p>constraint_set3_flag</p></li><li><p>constraint_set4_flag</p></li><li><p>constraint_set5_flag</p></li><li><p>reserved_zero_2bits</p><p>  两个 0bit 的保留位</p></li><li><p>level_idc</p><p>  编码时使用的 level，level 主要规定了每秒最多能处理多少个宏块、最大的帧大小、最大的解码缓存、最大比特率等性能相关的特性。如果是硬解。则比较容易出现由于视频 level 太高而不能解码的情况</p></li><li><p>seq_parameter_set_id</p><p>  本 SPS 的 ID，这个 ID 主要是给 PPS 使用的</p></li><li><p>chroma_format_idc</p><p>  色度取样，取值如下表，表示使用的 YUV 类型，chroma_format_idc 不存在时使用 YUV 4:2:0；monochrome: 单色</p>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211229190731.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /></li><li><p>separate_colour_plane_flag</p></li><li><p>bit_depth_luma_minus8</p></li><li><p>bit_depth_chroma_minus8</p></li><li><p>qpprime_y_zero_transform_bypass_flag</p></li><li><p>seq_scaling_matrix_present_flag</p></li><li><p>seq_scaling_list_present_flag</p></li><li><p>log2_max_frame_num_minus4</p></li><li><p>pic_order_cnt_type</p></li><li><p>log2_max_pic_order_cnt_lsb_minus4</p></li><li><p>delta_pic_order_always_zero_flag</p></li><li><p>offset_for_non_ref_pic</p></li><li><p>offset_for_top_to_bottom_field</p></li><li><p>num_ref_frames_in_pic_order_cnt_cycle</p></li><li><p>offset_for_ref_frame</p></li><li><p>max_num_ref_frames</p></li><li><p>gaps_in_frame_num_value_allowed_flag</p></li><li><p>pic_width_in_mbs_minus1</p></li><li><p>pic_height_in_map_units_minus1</p></li><li><p>frame_mbs_only_flag</p></li><li><p>mb_adaptive_frame_field_flag</p></li><li><p>direct_8x8_inference_flag</p></li><li><p>frame_cropping_flag</p></li><li><p>frame_crop_left_offset</p></li><li><p>frame_crop_right_offset</p></li><li><p>frame_crop_top_offset</p></li><li><p>frame_crop_bottom_offset</p></li><li><p>vui_parameters_present_flag</p></li></ul><h5 id="Scaling-list"><a href="#Scaling-list" class="headerlink" title="Scaling list"></a>Scaling list</h5><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211230114340.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>7.3.2.1.1.1 Scaling list syntax</b></p><p><strong>语法元素说明</strong>：</p><ul><li>delta_scale</li></ul><h4 id="SPS-extension-RBSP"><a href="#SPS-extension-RBSP" class="headerlink" title="SPS extension RBSP"></a>SPS extension RBSP</h4><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211230114450.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>7.3.2.1.2 Sequence parameter set extension RBSP syntax</b></p><h4 id="Subset-SPS-RBSP"><a href="#Subset-SPS-RBSP" class="headerlink" title="Subset SPS RBSP"></a>Subset SPS RBSP</h4><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211230145413.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>7.3.2.1.3 Subset sequence parameter set RBSP syntax</b></p><h3 id="PPS-RBSP"><a href="#PPS-RBSP" class="headerlink" title="PPS RBSP"></a>PPS RBSP</h3><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211230151052.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>7.3.2.2 Picture parameter set RBSP syntax</b></p><p><strong>语法元素说明</strong>：</p><ul><li><p>entropy_coding_mode_flag</p><p>  长度 1 bit，用于表示熵解码的方式。若等于 0 表示使用 Exp-Golomb coded 或 CAVLC，若等于 1 则表示使用 CABAC</p></li></ul><h3 id="SEI-RBSP"><a href="#SEI-RBSP" class="headerlink" title="SEI RBSP"></a>SEI RBSP</h3><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211230151327.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>7.3.2.3 Supplemental enhancement information RBSP syntax</b></p><h4 id="SEI-message"><a href="#SEI-message" class="headerlink" title="SEI message"></a>SEI message</h4><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211230151636.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>7.3.2.3.1 Supplemental enhancement information message syntax</b></p><h4 id="AUD-RBSP"><a href="#AUD-RBSP" class="headerlink" title="AUD RBSP"></a>AUD RBSP</h4><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211230151817.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>7.3.2.4 Access unit delimiter RBSP syntax</b></p><h4 id="End-of-sequence-RBSP"><a href="#End-of-sequence-RBSP" class="headerlink" title="End of sequence RBSP"></a>End of sequence RBSP</h4><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211230151924.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>7.3.2.5 End of sequence RBSP syntax</b></p><h4 id="End-of-stream-RBSP"><a href="#End-of-stream-RBSP" class="headerlink" title="End of stream RBSP"></a>End of stream RBSP</h4><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211230152105.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>7.3.2.6 End of stream RBSP syntax</b></p><h4 id="Filler-data-RBSP"><a href="#Filler-data-RBSP" class="headerlink" title="Filler data RBSP"></a>Filler data RBSP</h4><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211230152515.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>7.3.2.7 Filler data RBSP syntax</b></p><h4 id="Slice-layer-without-partitioning-RBSP"><a href="#Slice-layer-without-partitioning-RBSP" class="headerlink" title="Slice layer without partitioning RBSP"></a>Slice layer without partitioning RBSP</h4><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211230152800.png" style="width:66%; margin-left: auto; margin-right: auto; display: block;" /><p style="text-align:center;width=100;">T-REC-H.264-202108 <b>7.3.2.8 Slice layer without partitioning RBSP syntax</b></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.itu.int/rec/T-REC-H.264/e">https://www.itu.int/rec/T-REC-H.264/e</a></li><li><a href="https://www.cnblogs.com/TaigaCon/p/5215448.html">https://www.cnblogs.com/TaigaCon/p/5215448.html</a></li><li><a href="https://www.jianshu.com/p/2e6347ff3520">https://www.jianshu.com/p/2e6347ff3520</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文基于标准文档 &lt;strong&gt;T-REC-H.264-202108&lt;/strong&gt; 进行编写，主要根据标准文档解释说明 NAL 单元的组成结构及各个语法单元的作用&lt;/p&gt;</summary>
    
    
    
    <category term="MultiMedia" scheme="http://smileorigin.site/categories/MultiMedia/"/>
    
    
    <category term="MultiMedia" scheme="http://smileorigin.site/tags/MultiMedia/"/>
    
    <category term="H.264" scheme="http://smileorigin.site/tags/H-264/"/>
    
  </entry>
  
  <entry>
    <title>H.264</title>
    <link href="http://smileorigin.site/media/H.264/"/>
    <id>http://smileorigin.site/media/H.264/</id>
    <published>2022-01-01T07:00:00.000Z</published>
    <updated>2022-12-12T07:58:46.537Z</updated>
    
    <content type="html"><![CDATA[<p><strong>H.264&#x2F;AVC</strong>，又称为 <strong>MPEG-4第10部分，高级视频编码</strong>（MPEG-4 Part 10 Advanced Video Coding，缩写为 MPEG-4 AVC）是一种面向块，基于<a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF">运动补偿</a>的视频编码标准。由 <a href="https://zh.wikipedia.org/wiki/ITU-T">ITU-T</a><a href="https://zh.wikipedia.org/wiki/%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81%E4%B8%93%E5%AE%B6%E7%BB%84">视频编码专家组</a> 与 <a href="https://zh.wikipedia.org/wiki/ISO">ISO</a>&#x2F;<a href="https://zh.wikipedia.org/wiki/IEC">IEC</a> 联合工作组（<a href="https://zh.wikipedia.org/wiki/MPEG">MPEG</a>，动态图像专家组）联合组成的联合视频组（<a href="https://zh.wikipedia.org/wiki/JVT">JVT</a>，Joint Video Team）发布<a id="more"></a></p><p>H.264 项目的目的是为了创建一个更佳的视频压缩标准，在更低的比特率的情况下依然能够提供良好视频质量的标准。同时，还要不会太大的增加设计的复杂性。H.264 的另外一个目标是提供足够的灵活性，以允许该标准能够应用于各种各样的网络和系统上，包括低和高比特率、低和高分辨率视频、广播、DVD存储、RTP&#x2F;IP 分组网络和 ITU-T 多媒体电话系统。H.264 标准可以被视为由多个不同的应用框架&#x2F;配置文件组成的“标准系列”</p><h4 id="为什么需要对视频进行编码压缩"><a href="#为什么需要对视频进行编码压缩" class="headerlink" title="为什么需要对视频进行编码压缩"></a>为什么需要对视频进行编码压缩</h4><p>视频本质上是由一张张的图像组成的，将这些图像以一定的时间间隔连续播放就是我们所看到的视频。若有一个分辨率为 1080P，帧率为 60FPS 的视频（使用 YUV 存储）不经压缩每秒钟需要占用的空间约为：<code>1920 * 1080 * 3/2 * 60 = 186624000B ≈ 178MB</code>，200Mbps 的带宽每秒钟的下载速度是 25MB&#x2F;s 左右，需要花费 7s 才能将这一秒的视频下载下来，这是完全不能满足实时播放的需求的，要满足实时播放就需要至少 1.4Gbps 的带宽。H.264 的压缩比能达到  1:100 ～ 1:50，就能将 355.95MB 的视频能压缩到 1.8MB ～ 3.6MB，最高只需要 29 Mbps 的带宽就能满足实时播放的需求</p><h2 id="H-264-基础概念"><a href="#H-264-基础概念" class="headerlink" title="H.264 基础概念"></a>H.264 基础概念</h2><p>在 H.264&#x2F;AVC 在概念上可以分为两层：<strong>视频编码层（VCL，Video Coding Layer）</strong>和<strong>网络抽象层（NAL，Network Abstraction Layer）</strong>。视频编码层面负责高效的表示视频数据内容（H.264 编码压缩的核心，主要负责将视频数据进行编码&#x2F;压缩和切分），网络抽象层负责格式化数据并提供头信息，以保证数据适合在各种信道和存储介质上传播</p><p>H.264 可以分为序列（GOP）、图像（Pictrue）、⽚（Slice）、宏块（Macroblock）、⼦宏块（Sub-Macroblock）五个层次。H.264 把图像分为帧（Frame）和场（Field，分为顶场和底场，一帧相当于两场），其中帧可以分为一个或几个片；片由宏块组成，宏块是编码处理的基本单元，宏块包含一个 16x16 像素的亮度块和两个相应的色度块。对于 H.264 标准来说，I 帧、B 帧、P 帧都是我们把图像这个概念具体化和细小化了，通常说的 “帧” 是指不分场的图像</p><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20220101161340.png" style="margin-left: auto; margin-right: auto; display: block;" /><h2 id="H-264-码流"><a href="#H-264-码流" class="headerlink" title="H.264 码流"></a>H.264 码流</h2><p>H.264 的码流由一个个的 NAL 单元（NAL unit，网络抽象层单元）组成，每个 NAL 单元可以封装一个 Slice 或者 SPS、PPS 等信息。H.264 码流也可称为 NAL 单元流（NAL unit stream），NAL 单元流的组成形式分为两种：Annex B 和 AVCC，Android 硬解码只支持 Annex B，苹果的 VideoToolbox 和浏览器的 MSE 只支持 AVCC。Annex B 和 AVCC 只是在 NAL 单元流的组织形式上有所不同，NAL 单元的结构是一致的遵循同一标准</p><h3 id="Annex-B"><a href="#Annex-B" class="headerlink" title="Annex B"></a>Annex B</h3><p>又称 MPEG-2 Transport Stream（MPEG-TS，ts 格式）。每个 NAL 单元使用起始码分隔开，起始码有两种 <strong>0x000001（3 Byte）</strong>和 <strong>0x00000001（4 Byte）</strong>。在标准中只有 3 字节的起始码前缀的说法（<code>start_code_prefix_one_3bytes = 0x000001</code>），所谓的 4 字节起始码是由 <code>zero_byte(0x00) + start_code_prefix_one_3bytes</code> 组成</p><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20220101161310.png" style="margin-left: auto; margin-right: auto; display: block;" /><p>以下两种情况使用 4 字节起始码，其他的情况使用 3 字节起始码：</p><ol><li>该 NAL 单元类型是 SPS（NAL unit type &#x3D;&#x3D; 7） 或 PPS（NAL unit type &#x3D;&#x3D; 8）（NAL 单元类型会在下文展开）</li><li>若该 NAL 单元是一个访问单元（Access unit，一组 NAL 单元）的第一个 NAL 单元</li></ol><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20220101161416.png" style="margin-left: auto; margin-right: auto; display: block;" /><h4 id="防竞争字节（Emulation-Prevention-Byte）"><a href="#防竞争字节（Emulation-Prevention-Byte）" class="headerlink" title="防竞争字节（Emulation Prevention Byte）"></a>防竞争字节（Emulation Prevention Byte）</h4><p>由于 NAL 单元会使用 <strong>0x000001</strong> 或 <strong>0x00000001</strong> 做为起始码，为了防止在 NAL 单元内部出现起始码将一个 NAL 单元错误的分成几个，H.264 使用防竞争字节来解决该问题（0x30）。当编码器编完一个 NAL 单元时，应检测 NAL 单元内部是否出现如下左侧的四个字节序列，如果存在则在最后一个字节中间插入 <strong>0x30</strong>，在解码过程中再将防竞争字节去除即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x000000 =&gt; 0x00000300    （0x000000，可作为当前 NAL 单元的结束标志）</span><br><span class="line">0x000001 =&gt; 0x00000301    （0x000001，起始码）   </span><br><span class="line">0x000002 =&gt; 0x00000302    （0x000002，作为保留使用）</span><br><span class="line">0x000003 =&gt; 0x00000303    （0x000003，避免 NAL 单元内部原本就存在字节序列 0x000003 的情况）</span><br></pre></td></tr></table></figure><p>虽然 AVCC 没有使用起始码来分隔 NAL 单元但是也会进行防字节竞争处理，依据为下文的 “NAL unit 语法” 部分描述的 NAL 单元内部的防竞争码处理并不区分 Annex B 或 AVCC</p><h4 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h4><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20211227163041.png" style="margin-left: auto; margin-right: auto; display: block;" /><p>红色框为起始码（以下序号对应图上<strong>红</strong>字序号）：</p><ol><li><code>00 00 00 01</code>，为 4 字节起始码，是一个 AUD 单元</li><li><code>00 00 00 01</code>，为 4 字节起始码，是一个 SPS 单元</li><li><code>00 00 00 01</code>，为 4 字节起始码，是一个 PPS 单元</li><li><code>00 00 01</code>，为 3 字节起始码，是一个 SEI 单元</li><li><code>00 00 01</code>，为 3 字节起始码，是一个 IDR 图像单元</li></ol><p>蓝色框为被防竞争处理过的数据（以下序号对应图上<strong>蓝</strong>字序号）：</p><ol><li><code>00 00 03 00</code>，原数据为 <code>00 00 00</code></li><li><code>00 00 03 01</code>，原数据为 <code>00 00 01</code></li><li><code>00 00 03 00</code>，原数据为 <code>00 00 00</code></li></ol><h3 id="AVCC"><a href="#AVCC" class="headerlink" title="AVCC"></a>AVCC</h3><p>又称为 AVC1、MPEG-4 格式，用于 mp4、flv、mkv。每个 NAL 单元前都有一个固定长度的 NAL unit Length（通常是 4 字节）表示该 NAL 单元的大小（字节），该 NAL unit Length 占用几字节需要从 extradata 获取。extradata 在 MP4 封装的文件中一般存储在 MOOV 的 avc1 box 中（<code>MOOV/trak/mdia/minf/stbl/stsd/avc1</code>），实例分析见下文</p><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20220101161455.png" style="margin-left: auto; margin-right: auto; display: block;" /><p>extradata 格式：</p><p>SPS、PPS、SPS 扩展具体内容及结构请查看后续文章<strong>《H.264 标准语法分析》</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">aligned(8) class AVCDecoderConfigurationRecord &#123;</span><br><span class="line">    unsigned int(8) configurationVersion = 1;                                    // 8 bit，总是 0x01</span><br><span class="line">    unsigned int(8) AVCProfileIndication;                                        // 8 bit，表示所使用的 profile，SPS 中的第一字节内容</span><br><span class="line">    unsigned int(8) profile_compatibility;                                       // 8 bit，SPS 中第二字节的内容，指示是否强制使用某个 profile</span><br><span class="line">    unsigned int(8) AVCLevelIndication;                                          // 8 bit，编码时使用的 level，值越大对解码器要求越高，SPS 中的第三字节的内容</span><br><span class="line">    bit(6) reserved = ‘111111’b;                                                 // 6 bit，保留</span><br><span class="line">    unsigned int(2) lengthSizeMinusOne;                                          // 2 bit，值为 NAL unit length - 1</span><br><span class="line">    bit(3) reserved = ‘111’b;                                                    // 3 bit，保留</span><br><span class="line">    unsigned int(5) numOfSequenceParameterSets;                                  // 5 bit，值为 SPS 个数</span><br><span class="line">    <span class="keyword">for</span> (i=0; i &lt; numOfSequenceParameterSets; i++) &#123;                             // 遍历所有的 SPS</span><br><span class="line">        unsigned int(16) sequenceParameterSetLength ;                            // 16 bit，值为当前 SPS 长度</span><br><span class="line">        bit(8*sequenceParameterSetLength) sequenceParameterSetNALUnit;           // SPS 数据</span><br><span class="line">    &#125;</span><br><span class="line">    unsigned int(8) numOfPictureParameterSets;                                   // 8 bit，值为 PPS 个数</span><br><span class="line">    <span class="keyword">for</span> (i=0; i &lt; numOfPictureParameterSets; i++) &#123;                              // 遍历所有的 PPS</span><br><span class="line">    unsigned int(16) pictureParameterSetLength;                              // 16 bit，值为当前 PPS 长度</span><br><span class="line">    bit(8*pictureParameterSetLength) pictureParameterSetNALUnit;             // PPS 数据</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (profile_idc == 100 || profile_idc == 110 ||                              // 若 profile 类别为 100、110、122、144</span><br><span class="line">    profile_idc == 122 || profile_idc == 144) &#123;                              // 则还包含以下信息</span><br><span class="line">        bit(6) reserved = ‘111111’b;                                             // 6 bit，保留</span><br><span class="line">        unsigned int(2) chroma_format;                                           // 2 bit，表示使用的 YUV 类型</span><br><span class="line">        bit(5) reserved = ‘11111’b;                                              // 5 bit，保留</span><br><span class="line">        unsigned int(3) bit_depth_luma_minus8;                                   // 3 bit，亮度比特深度 - 8</span><br><span class="line">        bit(5) reserved = ‘11111’b;                                              // 5 bit，保留</span><br><span class="line">        unsigned int(3) bit_depth_chroma_minus8;                                 // 3 bit，色度比特深度 - 8</span><br><span class="line">        unsigned int(8) numOfSequenceParameterSetExt;                            // 8 bit，SPS 扩展个数</span><br><span class="line">        <span class="keyword">for</span> (i=0; i &lt; numOfSequenceParameterSetExt; i++) &#123;                       // 遍历 SPS 扩展</span><br><span class="line">            unsigned int(16) sequenceParameterSetExtLength;                      // 16 bit，值为当前 SPS 扩展单元长度</span><br><span class="line">            bit(8*sequenceParameterSetExtLength) sequenceParameterSetExtNALUnit; // SPS 扩展单元数据</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p style="text-align:center;width=100;">ISO_IEC_14496-15-AVC-format-2012 5.2.4.1.1 Syntax</b></p><h4 id="实例分析-1"><a href="#实例分析-1" class="headerlink" title="实例分析"></a>实例分析</h4><p>如下图为 MP4 封装的文件的 avc1 box</p><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20220108162252.png" style="margin-left: auto; margin-right: auto; display: block;" /><ul><li><p>白色框</p><p>  前四字节（<code>00 00 00 38</code>）表示该 avc1box 的长度为 56 字节，后四字节（<code>61 76 63 43</code>）表示该 box 的类型为 avcC</p></li><li><p>红色框</p><p>  为 extradata 开始部分，第一字节（<code>01</code>）表示 <strong>configurationVersion</strong> 值为 1；第二字节（<code>64</code>）表示 <strong>AVCProfileIndication</strong> 值为 100；第三字节（<code>00</code>）表示 <strong>profile_compatibility</strong> 值为 0；第四字节（<code>2A</code>）表示 <strong>AVCLevelIndication</strong> 值为 42；第五字节（<code>FF</code>）最后两位表示 <strong>lengthSizeMinusOne</strong> 值为 3</p></li><li><p>橙色框</p><p>  第一个橙色框第一字节（<code>E1</code>）最后五位表示 SPS 个数值为 1；第二个橙色框（<code>00 1A</code>）表示 SPS 长度，值为 26</p></li><li><p>蓝色框</p><p>  第一个蓝色框（<code>01</code>）表示 PPS 的个数，值为 1；第二个蓝色框（<code>00 07</code>）表示 PPS 长度，值为 7</p></li><li><p>黄色框</p><p>  第一字节（<code>FD</code>）最后两位表示 <strong>chroma_format</strong>，值为 1，表示使用 YUV 4:2:0；第二字节（<code>F8</code>）最后三位表示 <strong>bit_depth_luma_minus8</strong>，值为 0；第三字节（<code>F8</code>）最后三位表示 <strong>bit_depth_chroma_minus8</strong> 值为 0</p></li><li><p>紫色框</p><p>  表示 SPS 扩展个数，值为 0</p></li></ul><h2 id="分析工具（macOS）"><a href="#分析工具（macOS）" class="headerlink" title="分析工具（macOS）"></a>分析工具（macOS）</h2><ol><li><a href="https://github.com/HexFiend/HexFiend">Hex fiend</a></li><li><a href="https://github.com/IENT/YUView">YUView</a></li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.itu.int/rec/T-REC-H.264/e">https://www.itu.int/rec/T-REC-H.264/e</a></li><li><a href="https://zhuanlan.zhihu.com/p/86721709">https://zhuanlan.zhihu.com/p/86721709</a></li><li><a href="https://zhuanlan.zhihu.com/p/71928833">https://zhuanlan.zhihu.com/p/71928833</a></li><li><a href="https://blog.xujingkai.cn/post/avcC-annexB/">https://blog.xujingkai.cn/post/avcC-annexB/</a></li><li><a href="https://zh.wikipedia.org/wiki/H.264/MPEG-4_AVC">https://zh.wikipedia.org/wiki/H.264/MPEG-4_AVC</a></li><li><a href="https://www.cnblogs.com/ssyfj/p/14624498.html">https://www.cnblogs.com/ssyfj/p/14624498.html</a></li><li><a href="https://blog.csdn.net/leixiaohua1020/article/details/50534369?spm=1001.2014.3001.5501">https://blog.csdn.net/leixiaohua1020/article/details/50534369?spm=1001.2014.3001.5501</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;H.264&amp;#x2F;AVC&lt;/strong&gt;，又称为 &lt;strong&gt;MPEG-4第10部分，高级视频编码&lt;/strong&gt;（MPEG-4 Part 10 Advanced Video Coding，缩写为 MPEG-4 AVC）是一种面向块，基于&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF&quot;&gt;运动补偿&lt;/a&gt;的视频编码标准。由 &lt;a href=&quot;https://zh.wikipedia.org/wiki/ITU-T&quot;&gt;ITU-T&lt;/a&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81%E4%B8%93%E5%AE%B6%E7%BB%84&quot;&gt;视频编码专家组&lt;/a&gt; 与 &lt;a href=&quot;https://zh.wikipedia.org/wiki/ISO&quot;&gt;ISO&lt;/a&gt;&amp;#x2F;&lt;a href=&quot;https://zh.wikipedia.org/wiki/IEC&quot;&gt;IEC&lt;/a&gt; 联合工作组（&lt;a href=&quot;https://zh.wikipedia.org/wiki/MPEG&quot;&gt;MPEG&lt;/a&gt;，动态图像专家组）联合组成的联合视频组（&lt;a href=&quot;https://zh.wikipedia.org/wiki/JVT&quot;&gt;JVT&lt;/a&gt;，Joint Video Team）发布</summary>
    
    
    
    <category term="MultiMedia" scheme="http://smileorigin.site/categories/MultiMedia/"/>
    
    
    <category term="MultiMedia" scheme="http://smileorigin.site/tags/MultiMedia/"/>
    
    <category term="H.264" scheme="http://smileorigin.site/tags/H-264/"/>
    
  </entry>
  
  <entry>
    <title>FLAC</title>
    <link href="http://smileorigin.site/media/FLAC/"/>
    <id>http://smileorigin.site/media/FLAC/</id>
    <published>2021-09-16T14:00:00.000Z</published>
    <updated>2022-12-12T07:29:28.073Z</updated>
    
    <content type="html"><![CDATA[<p>FLAC（Free Lossless Audio Codec，自由无损音频压缩编码）</p><a id="more"></a><p>特点</p><ul><li><p>无损压缩：被编码的音频（PCM）数据没有任何信息损失，解码输出的音频与编码器的输入的每一个字节都是一样的</p><p>  每个数据帧都有一个当前帧的 16-bit CRC 校验码，用于监测数据传输错误。对整段音频数据，在文件头中还保存有一个针对原始未压缩音频数据的 MD5 标记，用于在解码和测试时对数据进行校验</p></li><li><p>灵活的压缩策略：与 libflac 使用是“质量”的参数，该参数变化从 0（最快）至 8（最小）</p><p>  虽然在压缩过程（压缩文件总是完美的“无损”表示的原始数据）。涉及速度和容量之间的折衷，解码过程中始终是相当快的，而不是非常依赖于压缩</p></li><li><p>快速：FLAC 更看重解码的速度</p><p>  解码只需要整数运算，并且相对于大多数编码方式而言，对计算速度要求很低。在很普通的硬件上就可以轻松实现实时解码</p></li><li><p>硬件支持：由于 FLAC 提供了免费的解码范例，而且解码的复杂程度低，所以 FLAC 是目前少数获得硬件支持的无损压缩编码之一。（APE 格式也有少数硬件支持）</p></li><li><p>可以流化：FLAC 的每个数据帧都包含了解码所需的全部信息</p><p>  解码当前帧无需参照它前面或后面的数据帧。FLAC 使用了同步代码和 CRC（类似于 MPEG 等编码格式），这样解码器在数据流中跳跃定位时可以有最小的时间延迟</p></li><li><p>可以定位：FLAC 支持快速采样精确定位</p><p>  这不仅对于播放有益，更使得 FLAC 文件便于编辑</p></li><li><p>富于弹性的 metadata：可以定义和实现新类型的 metadata 数据块，而不会影响旧的数据流和解码器的使用</p><p>  目前已有的 metadata 类型包括 tag，<a href="https://zh.wikipedia.org/wiki/CUE%E8%84%9A%E6%9C%AC">cue 表</a>，和定位表。已经注册的应用程序可以定义自己专用的 metadata 类型（这一点与 MIDI 标准相似）</p></li><li><p>非常适合于存档应用：FLAC 是一个开放的编码格式，并且没有任何数据的损失，你可以将它转换为你需要的任何其他格式</p><p>  除了每个数据帧的 CRC 和 MD5 标记对数据完整性的保障，flac（FLAC 项目提供的命令行方式编码工具）还提供了一个 verify（校验）选项，当使用该选项进行编码的时候，编码的同时就会立即对已编码数据进行解码并与原始输入数据进行比较，一旦发现不同就会退出并且报警提示</p></li><li><p>便于对 CD 进行备份：FLAC 有一个 cue 表，表内的 metadata 数据块用于保存 CD 的内容列表和所有音轨的索引点</p><p>  你可以将一张 CD 保存到一个单一文件，并导入 CD 的 cue 表格，这样一个 FLAC 文件就可以完整地记录整张 CD 的全部信息。当你的原来的 CD 损坏的时候，你就可以用这个文件恢复出与原来一模一样的CD副本</p></li><li><p>抗损伤：由于 FLAC 的帧结构，当数据流损坏时，数据损失会被限制在受损的数据帧之内</p><p>  一般只会丢失很短的一个片段。而很多其他无损音频压缩格式在遇到损坏时，一个损坏就会造成后面所有数据丢失</p></li></ul><h2 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h2><h3 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h3><p>FLAC 比特流由流开头的 “fLaC” 标记组成，后跟强制性元数据块（STREAMINFO）、任意数量的其他元数据块，然后是音频帧</p><h3 id="Metadata"><a href="#Metadata" class="headerlink" title="Metadata"></a>Metadata</h3><p>FLAC 最多可以支持到 128 种 metadata，已定义的如下：</p><ol><li><p>STREAMINFO</p><p> 此块包含有关整个流的信息，例如：采样率、声道数、样本总数等。它必须作为流中的第一个元数据块出现。 其他元数据块可能紧随其后，而解码器不理解的元数据块将被跳过</p><p> 此块包含有关整个流的信息，例如：采样率、声道数、样本总数等。它必须作为流中的第一个元数据块出现。 其他元数据块可能紧随其后，而解码器不理解的元数据块将被跳过。</p><p> 比较有价值的信息是那 36bits 表示的 Total samples in stream 即流的总采样数，有了这个关键信息，再结合采样率就能用公式：duration &#x3D; totalsample &#x2F; samplerate 就能得到总播放时间，<br> 然后再根据公式 bitrate &#x3D; (filelength - data_start) * 8 &#x2F; duration 就可以得出比特率。公式中的量比较好理解，filelength 是文件总大小，data_start 是首帧起始位置</p><p> 有了比特率就可以用公式：pos &#x3D; seektime * bitrate &#x2F; 8 + data_start 得到 seek 时间点对应的码流偏移量 pos，再从这个偏移位置开始读数据找下一帧的同步头，找到下一帧就可以开始解码播放完成一次 seek 操作</p></li><li><p>APPLICATION</p><p> 此块供第三方应用程序使用。 唯一的必填字段是 32 位标识符。 这个 ID 需要进行<a href="https://xiph.org/flac/id.html">申请</a>， 块的其余部分由注册的应用程序定义</p></li><li><p>PADDING</p><p> 预留空间，主要预留给后期需要编辑元数据的情况使用的，可以直接将要添加的元数据添加在这个区域而不用修改整个文件</p></li><li><p>SEEKTABLE</p><p> 用于存储搜索点的可选块，每个搜索点占用 18字节，一个流中只能有一个 SEEKTABLE，但该表可以有任意数量的搜索点。还有一个特殊的“占位符”搜索点，它会被解码器忽略，但是可用于为将来的搜索点插入保留空间</p></li><li><p>VORBIS_COMMENT</p><p> 用于存储键值对列表。值使用 UTF-8 编码。这是 FLAC 中唯一官方支持的标记机制。一个流中只能有一个 VORBIS_COMMENT 块</p></li><li><p>CUESHEET</p><p> 提示表：此块用于存储可在提示表中使用的各种信息。它支持曲目和索引点，与 Red BOOK CD 数字音频光盘邮寄其他的 CD-DA 元数据兼容。CUESHEET 对于备份 CD-DA 光盘特别有用，但它可以用作播放的通用提示机制</p></li><li><p>PICTURE</p><p> 保存相关图片，图片格式类似于 <a href="http://www.id3.org/id3v2.4.0-frames">ID3v2 中的 APIC 帧</a>，支持 URL（但是不推荐）。FLAC PICTURE 块还包括分辨率、颜色深度和调色板大小，以便客户无需全部扫描即可搜索合适的图片</p></li></ol><h3 id="Audio-Data"><a href="#Audio-Data" class="headerlink" title="Audio Data"></a>Audio Data</h3><p>音频数据由一个或多个音频帧组成，每个帧包含一个帧头，其中包含一个 sync code、有关帧的信息，如：块大小、采样率、声道数等，以及一个 8位的 CRC。帧头还包含帧中第一个样本的样本编号（对于可变块大小的流），或者帧号（对于固定块大小的流），用于精确定位。在帧头之后的是编码的子帧，每个通道一个。最后，是一些由 0 填充的边界。每个子帧都有自己的帧头，用于指定子帧的编码方式</p><p>为了实现在流中的任意帧开始解码，每个帧头都必须包含一些关于流的基本信息，因为解码器可能还没拿到 STREAMINFO 元数据块。</p><h3 id="Struct-Info"><a href="#Struct-Info" class="headerlink" title="Struct Info"></a>Struct Info</h3><h4 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h4><table><thead><tr><th></th><th>长度（bit）</th><th>说明</th></tr></thead><tbody><tr><td>FLAC 文件标识</td><td>32</td><td>“fLaC”，<strong>0x4C 0x61 0x43</strong></td></tr><tr><td>METADATA_BLOCK</td><td>304</td><td>必须包含 STREAMINFO</td></tr><tr><td>METADATA_BLOCK*</td><td>-</td><td>可以有任意数量的 METADATA BLOCK</td></tr><tr><td>FRAME+</td><td>-</td><td>至少包含一个音频帧</td></tr></tbody></table><h4 id="METADATA-BLOCK"><a href="#METADATA-BLOCK" class="headerlink" title="METADATA_BLOCK"></a>METADATA_BLOCK</h4><table><thead><tr><th></th><th>说明</th></tr></thead><tbody><tr><td>METADATA_BLOCK_HEADER</td><td>指定元素块数据类型和大小的头</td></tr><tr><td>METADATA_BLOCK_DATA</td><td></td></tr></tbody></table><h5 id="METADATA-BLOCK-HEADER"><a href="#METADATA-BLOCK-HEADER" class="headerlink" title="METADATA_BLOCK_HEADER"></a>METADATA_BLOCK_HEADER</h5><table><thead><tr><th></th><th>长度（bit）</th><th>说明</th></tr></thead><tbody><tr><td>is_last</td><td>1</td><td>最后元数据块标志：如果此块是音频块之前的最后一个元数据块，则为 “1”，否则为 “0”</td></tr><tr><td>block_type</td><td>7</td><td>块类型<br />0: STREAMINFO<br />1: PADDING<br />2: APPLICATION<br />3: SEEKTABLE<br />4: VORBID_COMMENT<br />5: CUESHEET<br />6: PICTURE<br />7-126: reserved<br />127: 无效，避免与帧同步码混淆</td></tr><tr><td>data_length</td><td>24</td><td>METADATA_BLOCK_DATA 数据长度（byte）</td></tr></tbody></table><h5 id="METADATA-BLOCK-DATA"><a href="#METADATA-BLOCK-DATA" class="headerlink" title="METADATA_BLOCK_DATA"></a>METADATA_BLOCK_DATA</h5><p>查看对应类型块数据的定义</p><ol start="0"><li><p>METADATA_BLOCK_STREAMINFO</p><table><thead><tr><th></th><th>长度（bit）</th><th>说明</th></tr></thead><tbody><tr><td>minimum_block_size</td><td>16</td><td>流中使用的最小块大小（以样本为单位）</td></tr><tr><td>maximum_block_size</td><td>16</td><td>流中使用的最大块大小（以样本为单位）。固定块大小的 <strong>最小块大小 &#x3D;&#x3D; 最大块大小</strong></td></tr><tr><td>minimum_frame size</td><td>24</td><td>流中使用的最小帧大小（以字节为单位）。可能为 0 标识该值未知</td></tr><tr><td>maximum_frame_size</td><td>24</td><td>流中使用的最大帧大小（以字节为单位）。可能为 0 标识该值未知</td></tr><tr><td>sample_rate</td><td>20</td><td>采样率，单位：Hz。尽管有 20 位可用，但最大采样率受帧头结构的限制，为 655350Hz。此外，值 0 无效</td></tr><tr><td>channels</td><td>3</td><td>声道数 - 1。FLAC 支持 1～8 声道</td></tr><tr><td>bits_per_sample</td><td>5</td><td>采样位数 - 1。FLAC 支持每个样本 4 ～ 32 bit。目前，参考编码器和解码器最多支持到每个样本 24 bit</td></tr><tr><td>total_samples</td><td>36</td><td>流中样本总数。若值为 0，则表示样本总数未知</td></tr><tr><td>md5_signature</td><td>128</td><td>音频数据编码前的 MD5 签名。这允许解码器确定音频数据中是否存在错误，即使该错误不会导致无效的比特流</td></tr></tbody></table><p> FLAC 规定最小块大小为 16，最大块大小为 65535，这意味着最大块大小和最小块大小为 0～15 时是无效的</p></li><li><p>METADATA_BLOCK_PADDING</p><table><thead><tr><th>长度（bit）</th><th>说明</th></tr></thead><tbody><tr><td>n</td><td>n ‘0’ 位（n 必须是 8 的倍数）</td></tr></tbody></table></li><li><p>METADATA_BLOCK_APPLICATION</p><table><thead><tr><th>长度（bit）</th><th>说明</th></tr></thead><tbody><tr><td>32</td><td>已注册的应用程序 ID</td></tr><tr><td>n</td><td>应用程序数据（n 必须是 8 的倍数）</td></tr></tbody></table></li><li><p>METADATA_BLOCK_SEEKTABLE</p><table><thead><tr><th>长度（bit）</th><th>说明</th></tr></thead><tbody><tr><td>SEEKPOINT+</td><td>一个或多个搜索点</td></tr></tbody></table><p> 搜索点的个数可以通过源信息头中的源信息数据大小来计算，搜索点个数 &#x3D; 源信息数据大小 &#x2F; 18</p><p> SEEKPOINT</p><table><thead><tr><th></th><th>长度（bit）</th><th>说明</th></tr></thead><tbody><tr><td>sample_number</td><td>64</td><td>目标帧中第一个采样点的序号，或 0xFFFFFFFFFFFFFFFF 用于占位符点</td></tr><tr><td>offset</td><td>64</td><td>从第一个帧头的第一字节到目标帧头的第一字节的偏移量（单位：字节）</td></tr><tr><td>samples</td><td>16</td><td>目标帧中的样本数</td></tr></tbody></table><ul><li><p>对于占位符点，第二个和第三个字段值未定义</p></li><li><p>表中的搜索点必须按照样本编号升序排列</p></li><li><p>除了占位符点之外，表格中的搜索点必须按照样本编号唯一</p></li><li><p>可以有任意数量的占位符点，但是都必须在搜索表的末尾</p></li></ul></li><li><p>METADATA_BLOCK_VORBIS_COMMENT</p><p> 文档：<a href="https://xiph.org/vorbis/doc/v-comment.html%EF%BC%8C%E4%B8%8D%E5%8C%85%E5%90%AB">https://xiph.org/vorbis/doc/v-comment.html，不包含</a> framing bit</p><table><thead><tr><th>字段</th><th>长度（bit）</th><th>说明</th></tr></thead><tbody><tr><td>vendor_length</td><td>32</td><td>vendor_string 长度，小端模式</td></tr><tr><td>vendor_string</td><td>n</td><td></td></tr><tr><td>user_comment_list_length</td><td>32</td><td>comment 个数，小端模式</td></tr><tr><td>comment+</td><td>n</td><td>n 个 comment</td></tr></tbody></table><p> comment</p><table><thead><tr><th>字段</th><th>长度（bit）</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>32</td><td>comment 长度，小端模式</td></tr><tr><td>comment</td><td>n</td><td></td></tr></tbody></table></li><li><p>METADATA_BLOCK_CUESHEET</p><table><thead><tr><th>长度（bit）</th><th>说明</th></tr></thead><tbody><tr><td>128 * 8</td><td>媒体目录编号，ASCII 码可打印字符 0x20-0x7e。通常，媒体目录号的长度可能位 0 到 128 个字节。任何未使用的字符都应该用 NUL 字符右填充。对于 CD-DA，这是一个 13 位的数字，后跟 115 个 NUL 字节</td></tr><tr><td>64</td><td>导入样本的数量。 该字段仅对 CD-DA 提示表有意义； 对于其他用途，它应该是 0。对于 CD-DA，导入是存放目录的 TRACK 00 区域； 更准确地说，它是从媒体的第一个样本到第一个轨道的第一个索引点的第一个样本的样本数。 根据红皮书，导入必须是静音，CD 抓取软件通常不会存储它； 此外，导入时间必须至少为 2 秒，但也可以更长。 由于这些原因，导入长度存储在这里，以便可以计算第一条轨道的绝对位置。 注意，这里存储的导入是到第一个轨道的第一个索引点为止的样本数，不一定是第一个轨道的 INDEX 01； 甚至第一首曲目也可能有 INDEX 00 数据</td></tr><tr><td>1</td><td>如果 CUESHEET 对应于光盘则为 1，否则为 0</td></tr><tr><td>7 + 258 * 8</td><td>保留。所有位都必须设置为零</td></tr><tr><td>8</td><td>曲目数量。至少为 1。对于 CD-DA，此数量不得超过 100（99 条常规曲目和 1 条引出曲目）</td></tr><tr><td>CUESHEET TRACK+</td><td>一首或多首曲目。CUESHEET 块需要有一个引出轨道。它始终是 CUESHEET 中的最后一首曲目。对于 CD-DA，引出曲目编号必须是红皮书规定的 170，否则必须是 255</td></tr></tbody></table><p> CUESHEET_TRACK</p><table><thead><tr><th>长度（bit）</th><th>说明</th></tr></thead><tbody><tr><td>64</td><td>轨道偏移量（单位是采样数）</td></tr><tr><td>8</td><td>轨道编号</td></tr><tr><td>12 * 8</td><td>轨道 ISRC</td></tr><tr><td>1</td><td>轨道类型：0 音乐 1 非音乐</td></tr><tr><td>1</td><td>pre-emphasis 标记：0 no pre-emphasis, 1 pre-emphasis.。 这对应于 CD-DA Q 通道控制位 5</td></tr><tr><td>6 + 13 * 8</td><td>保留。所有位都必须设置为零</td></tr><tr><td>8</td><td>轨道的索引数目。 CUESHEET 中的每个轨道必须至少有一个索引，但引出轨道除外，它必须为零。 对于 CD-DA，这个数字可能不超过 100</td></tr><tr><td>CUESHEET_TRACK_INDEX+</td><td>引出轨道之外的所有轨道都有一个或多个轨道索引点</td></tr></tbody></table><p> CUESHEET_TRACK_INDEX+</p><table><thead><tr><th>长度（bit）</th><th>说明</th></tr></thead><tbody><tr><td>64</td><td>索引点相对于轨道偏移的样本偏移。对于 CD-DA，偏移量必须能被 588 个样本整除（588 个样本 &#x3D; 44100 个样本&#x2F;秒 * 1&#x2F;75 秒），偏移量是从轨道开始的，而不是从音频数据开始</td></tr><tr><td>8</td><td>索引点编号。对于 CD-DA，所以号 0 对应于轨道 pre-gap。轨道中的第一个索引的编号必须为 0 或 1。随后，索引点编号必须增加 1。索引编号在轨道内必须是唯一的</td></tr><tr><td>3 * 8</td><td>保留。所有位都必须设置为零</td></tr></tbody></table></li><li><p>METADATA_BLOCK_PICTURE</p><table><thead><tr><th></th><th>长度（bit）</th><th>说明</th></tr></thead><tbody><tr><td>picture_type</td><td>32</td><td>图片类型按 ID3v2 APIC 帧：<br />0 - Other<br/>1 - 32x32 pixels ‘file icon’ (PNG only)<br/>2 - Other file icon<br/>3 - Cover (front)<br/>4 - Cover (back)<br/>5 - Leaflet page<br/>6 - Media (e.g. label side of CD)<br/>7 - Lead artist&#x2F;lead performer&#x2F;soloist<br/>8 - Artist&#x2F;performer<br/>9 - Conductor<br/>10 - Band&#x2F;Orchestra<br/>11 - Composer<br/>12 - Lyricist&#x2F;text writer<br/>13 - Recording Location<br/>14 - During recording<br/>15 - During performance<br/>16 - Movie&#x2F;video screen capture<br/>17 - A bright coloured fish<br/>18 - Illustration<br/>19 - Band&#x2F;artist logotype<br/>20 - Publisher&#x2F;Studio logotype<br />其他是保留的，不应使用。一个文件中的图片类型 1 和图片类型 2 只能有一个</td></tr><tr><td>mime_type_length</td><td>32</td><td>MIME 类型字符串的长度（单位字节）</td></tr><tr><td>mime_type</td><td>n * 8</td><td>MIME 类型字符串，ASCII 字符。MIME 类型也可能是 –&gt; 表示数据部分是图片的 URL，而不是图片数据本身</td></tr><tr><td>description_length</td><td>32</td><td>图片描述字符串长度（单位字节）</td></tr><tr><td>description</td><td>n * 8</td><td>图片描述，UTF-8 格式</td></tr><tr><td>width</td><td>32</td><td>图片宽度</td></tr><tr><td>height</td><td>32</td><td>图片高度</td></tr><tr><td>color_depth</td><td>32</td><td>图片颜色深度</td></tr><tr><td>colors</td><td>32</td><td>用于索引图片（例如：GIF），所使用的颜色数量。对于非索引图片为 0</td></tr><tr><td>data_length</td><td>32</td><td>图片数据长度（单位字节）</td></tr><tr><td>data</td><td>n * 8</td><td>二进制图像数据</td></tr></tbody></table></li></ol><h4 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h4><table><thead><tr><th>长度（bit）</th><th>说明</th></tr></thead><tbody><tr><td>FRAME_HEADER</td><td></td></tr><tr><td>SUBFRAME+</td><td>每个声道一个 SUBFRAME</td></tr><tr><td>？</td><td>填充 0 用于对齐</td></tr><tr><td>FRAME_FOOTER</td><td>CRC-16</td></tr></tbody></table><h5 id="FRAME-HEADER"><a href="#FRAME-HEADER" class="headerlink" title="FRAME_HEADER"></a>FRAME_HEADER</h5><table><thead><tr><th></th><th>长度（bit）</th><th>说明</th></tr></thead><tbody><tr><td>sync_code</td><td>14</td><td>同步码 ‘11111111111110’</td></tr><tr><td>reserved</td><td>1</td><td>保留<br />0：必选<br />1：保留将来使用</td></tr><tr><td>blocking_strategy</td><td>1</td><td>分块策略：<br />0：固定块大小，帧头包含帧的序号<br />1：可变块大小，帧头包含采样点序号</td></tr><tr><td>block_size</td><td>4</td><td>块内采样数：<br />0000 : 保留<br/>0001 : 192 samples<br/>0010-0101 : 576 * (2^(n-2))  samples, i.e. 576&#x2F;1152&#x2F;2304&#x2F;4608<br/>0110 : get 8 bit (blocksize-1)  from end of header<br/>0111 : get 16 bit (blocksize-1)  from end of header<br/>1000-1111 : 256 * (2^(n-8)) samples, i.e. 256&#x2F;512&#x2F;1024&#x2F;2048&#x2F;4096&#x2F;8192&#x2F;16384&#x2F;32768</td></tr><tr><td>sample_rate</td><td>4</td><td>采样率：<br />0000 : get from STREAMINFO metadata block<br/>0001 : 88.2kHz<br/>0010 : 176.4kHz<br/>0011 : 192kHz<br/>0100 : 8kHz<br/>0101 : 16kHz<br/>0110 : 22.05kHz<br/>0111 : 24kHz<br/>1000 : 32kHz<br/>1001 : 44.1kHz<br/>1010 : 48kHz<br/>1011 : 96kHz<br/>1100 : get 8 bit sample rate (in kHz) from end of header<br/>1101 : get 16 bit sample rate (in Hz) from end of header<br/>1110 : get 16 bit sample rate (in tens of Hz) from end of header<br/>1111 : invalid, to prevent sync-fooling string of 1s</td></tr><tr><td>channel_assignment</td><td>4</td><td>声道分配：<br />0000-0111 : 独立声道-1。定义如下：<br/>    1 channel: mono<br/>    2 channels: left, right<br/>    3 channels: left, right, center<br/>    4 channels: front left, front right, back left, back right<br/>    5 channels: front left, front right, front center, back&#x2F;surround left, back&#x2F;surround right<br/>    6 channels: front left, front right, front center, LFE, back&#x2F;surround left, back&#x2F;surround right<br/>    7 channels: front left, front right, front center, LFE, back center, side left, side right<br/>    8 channels: front left, front right, front center, LFE, back left, back right, side left, side right<br/>    1000 : left&#x2F;side stereo: channel 0 is the left channel, channel 1 is the side(difference) channel<br/>    1001 : right&#x2F;side stereo: channel 0 is the side(difference) channel, channel 1 is the right channel<br/>    1010 : mid&#x2F;side stereo: channel 0 is the mid(average) channel, channel 1 is the side(difference) channel<br/>    1011-1111 : reserved</td></tr><tr><td>bits_per_sample</td><td>3</td><td>采样位数：<br />000 : get from STREAMINFO metadata block<br/>001 : 8 bits per sample<br/>010 : 12 bits per sample<br/>011 : reserved<br/>100 : 16 bits per sample<br/>101 : 20 bits per sample<br/>110 : 24 bits per sample<br/>111 : reserved</td></tr><tr><td>reserved</td><td>1</td><td>保留<br />0：必选<br />1：保留将来使用</td></tr><tr><td>coded_sample_number or coded_frame_number</td><td>？</td><td>if(variable blocksize)<br/>   &lt;8-56&gt;:”UTF-8” coded sample number (decoded number is 36 bits)<br/>else<br/>   &lt;8-48&gt;:”UTF-8” coded frame number (decoded number is 31 bits)</td></tr><tr><td></td><td>？</td><td>if (blocksize bits &#x3D;&#x3D; 011x)<br/>   8&#x2F;16 bit (blocksize-1)</td></tr><tr><td></td><td>？</td><td>if (sample rate bits &#x3D;&#x3D; 11xx)<br/>  8&#x2F;16 bit sample rate</td></tr><tr><td>crc</td><td>8</td><td>CRC-8 (polynomial &#x3D; x^8 + x^2 + x^1 + x^0, initialized with 0) of everything before the crc, including the sync code</td></tr></tbody></table><h5 id="FRAM-FOOTER"><a href="#FRAM-FOOTER" class="headerlink" title="FRAM_FOOTER"></a>FRAM_FOOTER</h5><table><thead><tr><th>长度（bit）</th><th>说明</th></tr></thead><tbody><tr><td>16</td><td>CRC-16 (polynomial &#x3D; x^16 + x^15 + x^2 + x^0, initialized with 0) of everything before the crc, back to and including the frame header sync code</td></tr></tbody></table><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://xiph.org/flac/format.html">https://xiph.org/flac/format.html</a></li><li><a href="https://blog.csdn.net/ffgamelife/article/details/7893747">https://blog.csdn.net/ffgamelife/article/details/7893747</a></li><li><a href="https://zh.wikipedia.org/wiki/FLAC">https://zh.wikipedia.org/wiki/FLAC</a></li><li><a href="https://www.the-roberts-family.net/metadata/flac.html">https://www.the-roberts-family.net/metadata/flac.html</a></li><li><a href="https://blog.csdn.net/yu_yuan_1314/article/details/9491763">https://blog.csdn.net/yu_yuan_1314/article/details/9491763</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;FLAC（Free Lossless Audio Codec，自由无损音频压缩编码）&lt;/p&gt;</summary>
    
    
    
    <category term="MultiMedia" scheme="http://smileorigin.site/categories/MultiMedia/"/>
    
    
    <category term="FLAC" scheme="http://smileorigin.site/tags/FLAC/"/>
    
    <category term="MultiMedia" scheme="http://smileorigin.site/tags/MultiMedia/"/>
    
  </entry>
  
  <entry>
    <title>MP3</title>
    <link href="http://smileorigin.site/media/MP3/"/>
    <id>http://smileorigin.site/media/MP3/</id>
    <published>2021-09-09T12:30:00.000Z</published>
    <updated>2022-12-12T07:29:23.809Z</updated>
    
    <content type="html"><![CDATA[<p><strong>动态图像专家组-1</strong> 或 <strong>动态图像专家组-2</strong> <strong>音频层III</strong>（<strong>MPEG-1</strong> or <strong>MPEG-2 Audio Layer III</strong>），常简称为 <strong>MP3</strong><a id="more"></a>，是当今流行的一种<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%97%E9%9F%B3%E9%A2%91">数字音频</a>编码和<a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E6%90%8D%E6%95%B8%E6%93%9A%E5%A3%93%E7%B8%AE">有损压缩</a>格式，它被设计来大幅降低音频数据量，通过舍弃 <a href="https://zh.wikipedia.org/wiki/%E8%84%89%E5%86%B2%E7%BC%96%E7%A0%81%E8%B0%83%E5%88%B6">PCM</a> 音频资料中对人类听觉不重要的部分，达成压缩成较小文件的目的。而对于大多数用户的听觉感受来说，MP3 的音质与最初的不压缩音频相比没有明显的下降。它是在 1991 年，由位于<a href="https://zh.wikipedia.org/wiki/%E5%BE%B7%E5%9B%BD">德国</a><a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E5%B0%94%E6%9C%97%E6%A0%B9">埃尔朗根</a>的研究组织<a href="https://zh.wikipedia.org/wiki/%E5%BC%97%E5%8A%B3%E6%81%A9%E9%9C%8D%E5%A4%AB%E5%8D%8F%E4%BC%9A">弗劳恩霍夫协会</a>的一组工程师发明和标准化的</p><p>它根据压缩质量和编码复杂程度划分为三层，即Layer-1、Layer2、Layer3， 且分别对应MP1、MP2、MP3 这三种声音文件，并根据不同的用途，使用不同层次的编码</p><p>MP1 和MP2 的压缩率分别为 4:1 和 6:1-8:1，而 MP3 的压缩率则高达10:1-12:1</p><h2 id="比特率"><a href="#比特率" class="headerlink" title="比特率"></a>比特率</h2><p><a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%8E%87">比特率</a>对于 MP3 文件来说是可变的。总的原则是比特率越高则声音文件中包含的原始声音信息越多，这样回放时声音质量也越高。在MP3 编码的早期，整个文件使用一个固定的比特率，称为<a href="https://zh.wikipedia.org/wiki/%E5%9B%BA%E5%AE%9A%E7%A0%81%E7%8E%87">固定码率</a>（CBR）</p><p>MPEG-1 Layer 3 允许使用的比特率是 32、40、48、56、64、80、96、112、128、160、192、224、256 和 320 kbit&#x2F;s，允许的采样频率是 32、44.1 和 48千<a href="https://zh.wikipedia.org/wiki/%E8%B5%AB%E5%85%B9">赫兹</a>，44.1kHz 是最为经常使用的速度（与 <a href="https://zh.wikipedia.org/wiki/CD">CD</a> 的采样速率相同）。MPEG-2 和 MPEG-2.5（非正式的） 包括其他一些比特率：6、12、24、32、40、48、56、64、80、96、112、128、144、160kbit&#x2F;s</p><p><a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E7%A0%81%E7%8E%87">可变码率</a>（VBR）也是可能的。MP3 文件的中的音频切分成有自己不同比特率的帧，这样在文件编码的时候就可以动态地改变比特率。尽管在最初的实现中并没有这项功能。VBR技术现在音频&#x2F;视频编码领域已经得到了广泛的应用，这项技术使得在声音变化大的部分使用较大的比特率而在声音变化小的部分使用较小的比特率成为可能。这个方法类似于声音控制的磁带录音机不记录静止部分节省磁带消耗。一些编码器在很大程度上依赖于这项技术</p><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20210831172935.png" style="zoom:50%;" /><h2 id="设计限制"><a href="#设计限制" class="headerlink" title="设计限制"></a>设计限制</h2><p>MP3 格式存有设计限制，即使使用更好的编码器仍旧不能克服这些限制。一些新的压缩格式如 <a href="https://zh.wikipedia.org/wiki/Opus_(%E9%9F%B3%E9%A2%91%E6%A0%BC%E5%BC%8F)">Opus</a> 等不再有这些限制。</p><ul><li>比特率最大是 320 kbit&#x2F;s，时间分辨率相对于变化迅速的信号来说太低</li><li>对于超过 15.5&#x2F;15.8 <a href="https://zh.wikipedia.org/wiki/KHz">kHz</a>的频率没有因数频带，即超过此频率的声音无法编码在 MP3 内，从<a href="https://zh.wikipedia.org/wiki/%E9%A2%91%E8%B0%B1">频谱</a>来看，15 kHz以上的声音全部消失了，而人耳的<a href="https://zh.wikipedia.org/wiki/%E5%90%AC%E8%A7%89">听觉</a>上限一般在20 kHz</li><li>采样频率最高为 48kHz，对于超过 48kHz 采样频率的音频无法编码在 MP3 内</li><li><a href="https://zh.wikipedia.org/w/index.php?title=%E8%81%94%E5%90%88%E7%AB%8B%E4%BD%93%E5%A3%B0&action=edit&redlink=1">联合立体声</a>（Joint stereo）是基于帧与帧完成的</li><li>没有定义<a href="https://zh.wikipedia.org/w/index.php?title=Encoder&action=edit&redlink=1">编码器</a>／<a href="https://zh.wikipedia.org/w/index.php?title=Decoder&action=edit&redlink=1">解码器</a>的整体时延，这就意味着 <a href="https://zh.wikipedia.org/w/index.php?title=Gapless_playback&action=edit&redlink=1">gapless playback</a> 缺少一个正式的规定</li></ul><h2 id="格式分析"><a href="#格式分析" class="headerlink" title="格式分析"></a>格式分析</h2><h3 id="MP3-Structure"><a href="#MP3-Structure" class="headerlink" title="MP3 Structure"></a>MP3 Structure</h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>TAG_V2(ID3v2)</td><td>包含了作者、作曲、专辑等信息，长度不固定，扩展了 ID3v1 的信息量</td></tr><tr><td>音频数据</td><td>1. 音频数据由系列的数据帧构成<br />2. 每个帧的长度可能固定，也可能不固定，由位率（码率）决定<br />3. 每个帧都包括：帧头、数据实体两部分<br />4. 帧头记录着 MP3 的位率、采样率、版本等信息<br />5. 如果启用 CRC 验证，则帧头后面跟随两字节 CRC 校验<br />    之后可能跟随 32 字节的附加信息，也可能没有附加信息</td></tr><tr><td>TAG_V1(ID3v1)</td><td>包含了作者、作曲、专辑等信息，长度为 128byte</td></tr><tr><td>其他信息</td><td>部分 MP3 可能一些额外的信息</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20210831140828.png"></p><p>MP3 文件的结构图（不支持 MPEG 2.5 版，因此 MP3 同步字为 12 位而不是 11 位）(图来自 MP3 Wiki)</p><h3 id="ID3v2"><a href="#ID3v2" class="headerlink" title="ID3v2"></a>ID3v2</h3><p>ID3v2 一共有四个版本，<strong>ID3v2.1&#x2F;2.2&#x2F;2.3&#x2F;2.4</strong>，目前流行的播放软件一般只支持第三版即 ID3v2.3</p><p>ID3v2.3 由一个标签头和若干个标签帧或者一个扩展标签头组成，至少要有一个标签帧，每一个标签帧记录一种信息，例如作曲、标题等</p><p><strong>本章节描述的是 ID3v2.3</strong></p><h4 id="ID3v2-header"><a href="#ID3v2-header" class="headerlink" title="ID3v2 header"></a>ID3v2 header</h4><table><thead><tr><th>名称</th><th>类型</th><th>示例值</th><th>说明</th></tr></thead><tbody><tr><td>ID3v2&#x2F;file identifier</td><td>char[3]</td><td>“ID3”</td><td>ID3v2 为 “ID3”</td></tr><tr><td>ID3v2 version</td><td>uint16_t</td><td>0x03 0x00</td><td>前一个字节表示主版本号，后一个字节表示修订版本号</td></tr><tr><td>ID3v2 flags</td><td>uint8_t</td><td>abc00000</td><td>目前只使用最高的 3 位，其他位为 0<br />a: 是否使用 unsynchronisation<br />b: 是否有 extended header<br />c: 是否为测试标签</td></tr><tr><td>ID3v2 size</td><td>uint32_t</td><td>4 * 0xxxxxxx</td><td>4字节，每个字节只能用低 7 位，最高位为 0<br />0x00 0x00 0x02 0x01 &#x3D; 257</td></tr></tbody></table><h4 id="ID3v2-extended-header"><a href="#ID3v2-extended-header" class="headerlink" title="ID3v2 extended header"></a>ID3v2 extended header</h4><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Extended header size</td><td>uint32_t</td><td>ID3v2 扩展头大小，不包括该字段本身</td></tr><tr><td>Extended Flags</td><td>uint16_t</td><td>此字段虽然占用两个字节，但是除了首个字节的最高位，其余各位都不使用，且必须为 0。如果首字节的最高位被置 1，那么 ID3v2 扩展头将会多一个字段  ”Total frame CRC“。CRC32 是一种循环冗余校验技术，为了发现标签数据在传输或存储过程中可能出现的错误，使用 CRC32 算法先对标签数据进行一个次运算，这次运算得出的结果是 32 个二进制位。如果标签数据在传输或存储过程中保持原样不变，在这 32 个二进制位的参与下对数据再次进行运算结果一定会是 32 个二进制 0。若 32 位结果中任何一位不是 0，则说明数据在传输或存储的某个环节中已经出现了差错。这里所说的 CRC32 数据指的就是传输或存储之前对数据运算所得的32 个二进制位，显然它必须占用 4 个字节的存储空间，此时的 ID3v2 扩展头大小也就变成了 14 个字节。因此前面所提 “Extended header size” 字段在这种情况存储的值也就变成了 14-4&#x3D;10。需要注意的是，对标签数据的 CRC32 运算应该在 unsynchronisation 方案应用于标签数据之前进行</td></tr><tr><td>Size of padding</td><td>uint32_t</td><td>ID3v2占据了文件的头部，ID3v2后面才是音频帧数据。如果 ID3v2 需要扩大以容纳更多的标签数据，那么音频帧数据也需在文件中向后搬移。为了避免这种情况频繁发生，ID3v2 在其结构尾部预留了一定的存储空间，如果 ID3v2 的扩大没有超出这些预留空间，那就不需要向后移动音频帧的位置了。这些预留的存储空间被称为 pading，由于在 ID3v2 需要扩大之前 padding 空间并未存储有意义的数据，所以 padding 空间中的每个字节都存储着 0x00。padding 空间不参与 CRC 校验运算</td></tr><tr><td>Total frame CRC</td><td>uint32_t</td><td>只有 Extended Flags 首字节最高位为 1 才会存在该字段。此字段占用 4 个字节。CRC 校验仅限于标签数据本身，ID3v2 头和 ID3v2 扩展头都不参与其中，padding 数据也不参与 CRC 校验</td></tr></tbody></table><h4 id="ID3v2-frame-header"><a href="#ID3v2-frame-header" class="headerlink" title="ID3v2 frame header"></a>ID3v2 frame header</h4><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Frame ID</td><td>char[4]</td><td>帧标识</td></tr><tr><td>Size</td><td>uint32_t</td><td>帧内容大小，不包括帧头，不小于 1</td></tr><tr><td>Flags</td><td>uint16_t</td><td>见 Frame header flags</td></tr></tbody></table><h5 id="Declared-ID3v2-frames"><a href="#Declared-ID3v2-frames" class="headerlink" title="Declared ID3v2 frames"></a>Declared ID3v2 frames</h5><table><thead><tr><th>Frame ID（ID3v2.3）</th><th>Frame ID（ID3v2.4）</th><th align="left">英文描述</th><th>中文描述</th></tr></thead><tbody><tr><td>AENC</td><td>ARNC</td><td align="left">Audio encryption</td><td>音频是否加密</td></tr><tr><td>-</td><td><strong>ASPI</strong></td><td align="left">Audio seek point index</td><td>音频搜索点索引</td></tr><tr><td>APIC</td><td>APIC</td><td align="left">Attached picture</td><td>封面图片</td></tr><tr><td>COMM</td><td>COMM</td><td align="left">Comments</td><td>格式：”eng&#x2F;0 备注内容”，其中 eng 表示备注所使用的自然语言</td></tr><tr><td>COMR</td><td>COMR</td><td align="left">Commercial frame</td><td>广告</td></tr><tr><td>ENCR</td><td>ENCR</td><td align="left">Encryption method registration</td><td>加密方法，同 AENC 一同使用</td></tr><tr><td>EQUA</td><td><strong>EQU2</strong></td><td align="left">Equalization</td><td>均衡器，允许用户在文件中预先定义均衡曲线</td></tr><tr><td>ETCO</td><td>ETCO</td><td align="left">Event timing codes</td><td>事件时间编码</td></tr><tr><td>GEOB</td><td>GEOB</td><td align="left">General encapsulated object</td><td>通用封装对象</td></tr><tr><td>GRID</td><td>GRID</td><td align="left">Group identification registration</td><td>能够对其他不相关的帧进行分组</td></tr><tr><td>IPLS</td><td><strong>TIPL</strong></td><td align="left">Involved people list</td><td>参与人员名单</td></tr><tr><td>LINK</td><td>LINK</td><td align="left">Linked information</td><td>外部 ID3v2 标签链接</td></tr><tr><td>MCDI</td><td>MCDI</td><td align="left">Music CD identifier</td><td>CD 音乐标识</td></tr><tr><td>MLLT</td><td>MLLT</td><td align="left">MPEG location lookup table</td><td>时间位置对照表</td></tr><tr><td>OWNE</td><td>OWNE</td><td align="left">Ownership frame</td><td>所有权</td></tr><tr><td>PRIV</td><td>PRIV</td><td align="left">Private frame</td><td>用于存储软件生产商自定义的信息</td></tr><tr><td>PCNT</td><td>PCNT</td><td align="left">Play counter</td><td>文件播放次数计数器</td></tr><tr><td>POPM</td><td>POPM</td><td align="left">Popularimeter</td><td>普通仪表</td></tr><tr><td>POSS</td><td>POSS</td><td align="left">Position synchronisation frame</td><td>第一帧时间偏移量</td></tr><tr><td>RBUF</td><td>RBUF</td><td align="left">Recommended buffer size</td><td>推荐缓冲区大小</td></tr><tr><td>RVAD</td><td><strong>RVA2</strong></td><td align="left">Relative volume adjustment</td><td>音量调节器</td></tr><tr><td>RVRB</td><td>RVRB</td><td align="left">Reverb</td><td>混响调整</td></tr><tr><td>-</td><td><strong>SEEK</strong></td><td align="left">Seek frame</td><td>搜索用</td></tr><tr><td>-</td><td><strong>SIGN</strong></td><td align="left">Signature frame</td><td>签名用</td></tr><tr><td>SYLT</td><td>SYLT</td><td align="left">Synchronized lyric&#x2F;text</td><td>同步歌词或文本</td></tr><tr><td>SYTC</td><td>SYTC</td><td align="left">Synchronized tempo codes</td><td>同步节拍编码</td></tr><tr><td>TALB</td><td>TALB</td><td align="left">Album&#x2F;Movie&#x2F;Show title</td><td>专集</td></tr><tr><td>TBPM</td><td>TBPM</td><td align="left">Beats per minute (BPM)</td><td>拍子</td></tr><tr><td>TCOM</td><td>TCOM</td><td align="left">Composer</td><td>作曲家</td></tr><tr><td>TCON</td><td>TCON</td><td align="left">Content type</td><td>音乐类型，直接用字符串表示</td></tr><tr><td>TCOP</td><td>TCOP</td><td align="left">Copyright message</td><td>版权</td></tr><tr><td>TDAT</td><td>TDRC</td><td align="left">TDAT Date</td><td>灌录日期</td></tr><tr><td>-</td><td><strong>TDEN</strong></td><td align="left">Encoding time</td><td>编码时间</td></tr><tr><td>TDLY</td><td>TDLY</td><td align="left">Playlist delay</td><td>播放延时</td></tr><tr><td>-</td><td><strong>TDRC</strong></td><td align="left">Recording time</td><td>音频纪录时间</td></tr><tr><td>-</td><td><strong>TDRL</strong></td><td align="left">Release time</td><td>音频发行时间</td></tr><tr><td>-</td><td><strong>TDTG</strong></td><td align="left">Tagging time</td><td>音频被标记时间</td></tr><tr><td>TENC</td><td>TENC</td><td align="left">Encoded by</td><td>编码者</td></tr><tr><td>TEXT</td><td>TEXT</td><td align="left">Lyricist&#x2F;Text writer</td><td>填词人</td></tr><tr><td>TFLT</td><td>TFLT</td><td align="left">File type</td><td>文件类型</td></tr><tr><td>TIME</td><td><strong>TDRC</strong></td><td align="left">Time</td><td>灌录的时间</td></tr><tr><td>TIT1</td><td>TIT1</td><td align="left">Content group description</td><td>内容组别</td></tr><tr><td>TIT2</td><td>TIT2</td><td align="left">Title&#x2F;songname&#x2F;content description</td><td>标题</td></tr><tr><td>TIT3</td><td>TIT3</td><td align="left">Subtitle&#x2F;Description refinement</td><td>歌名副标题</td></tr><tr><td>TKEY</td><td>TKEY</td><td align="left">Initial key</td><td>音调</td></tr><tr><td>TLAN</td><td>TLAN</td><td align="left">Language(s)</td><td>语言</td></tr><tr><td>TLEN</td><td>TLEN</td><td align="left">Length</td><td>音频长度</td></tr><tr><td>-</td><td><strong>TMCL</strong></td><td align="left">Musician credits list</td><td>音乐家与乐器对照</td></tr><tr><td>TMED</td><td>TMED</td><td align="left">Media type</td><td>媒体类型</td></tr><tr><td>-</td><td><strong>TMOO</strong></td><td align="left">Mood</td><td>情境</td></tr><tr><td>TOAL</td><td>TOAL</td><td align="left">Original album&#x2F;movie&#x2F;show title</td><td>原唱片集</td></tr><tr><td>TOFN</td><td>TOFN</td><td align="left">Original filename</td><td>原文件名</td></tr><tr><td>TOLY</td><td>TOLY</td><td align="left">Original lyricist(s)&#x2F;text writer(s)</td><td>原歌词</td></tr><tr><td>TOPE</td><td>TOPE</td><td align="left">Original artist(s)&#x2F;performer(s)</td><td>原艺术家&#x2F;演唱者</td></tr><tr><td>TORY</td><td><strong>TDOR</strong></td><td align="left">Original release year</td><td>原发行年份</td></tr><tr><td>TOWN</td><td>TOWN</td><td align="left">File owner&#x2F;licensee</td><td>文件所有者</td></tr><tr><td>TPE1</td><td>TPE1</td><td align="left">Lead performer(s)&#x2F;Soloist(s)</td><td>作者</td></tr><tr><td>TPE2</td><td>TPE2</td><td align="left">Band&#x2F;orchestra&#x2F;accompaniment</td><td>乐队&#x2F;管弦乐队&#x2F;伴奏</td></tr><tr><td>TPE3</td><td>TPE3</td><td align="left">Conductor&#x2F;performer refinement</td><td>指挥家</td></tr><tr><td>TPE4</td><td>TPE4</td><td align="left">Interpreted, remixed, or otherwise modified by</td><td>翻唱&#x2F;混音&#x2F;改编</td></tr><tr><td>TPOS</td><td>TPOS</td><td align="left">Part of a set</td><td>片段来源</td></tr><tr><td>-</td><td><strong>TPRO</strong></td><td align="left">Produced notice</td><td>Produced notice</td></tr><tr><td>TPUB</td><td>TPUB</td><td align="left">Publisher</td><td>出版商</td></tr><tr><td>TRCK</td><td>TRCK</td><td align="left">Track number&#x2F;Position in set</td><td>音轨，格式: N&#x2F;M，其中 N 为专集中的第 N 首，<br />M 为专集中共 M 首，N 和 M 为 ASCII 码表示的数字</td></tr><tr><td>TRDA</td><td><strong>TDRC</strong></td><td align="left">Recording dates</td><td>灌录时期</td></tr><tr><td>TRSN</td><td>TRSN</td><td align="left">Internet radio station name</td><td>网络电台名称</td></tr><tr><td>TRSO</td><td>TRSO</td><td align="left">Internet radio station owner</td><td>网络电台所有者</td></tr><tr><td>TSIZ</td><td><strong>弃用</strong></td><td align="left">Size</td><td>音频长度</td></tr><tr><td>-</td><td><strong>TSOA</strong></td><td align="left">Album sort order</td><td>依专辑排序</td></tr><tr><td>-</td><td><strong>TSOP</strong></td><td align="left">Performer sort order</td><td>依演出者排序</td></tr><tr><td>-</td><td><strong>TSOT</strong></td><td align="left">Title sort order</td><td>依标题排序</td></tr><tr><td>TSRC</td><td>TSRC</td><td align="left">ISRC (international standard recording code)</td><td>国际灌录编码标准</td></tr><tr><td>TSSE</td><td>TSSE</td><td align="left">Software&#x2F;Hardware and settings used for encoding</td><td>编码使用的 软件&#x2F;硬件 设置</td></tr><tr><td>-</td><td><strong>TSST</strong></td><td align="left">Set subtitle</td><td>设置字幕</td></tr><tr><td>TYER</td><td><strong>TDRC</strong></td><td align="left">Year</td><td>年代，是用 ASCII 码表示的数字</td></tr><tr><td>TXXX</td><td>TXXX</td><td align="left">User defined text information frame</td><td>年度</td></tr><tr><td>UFID</td><td>UFID</td><td align="left">Unique file identifier</td><td>唯一的文件标识符</td></tr><tr><td>USER</td><td>USER</td><td align="left">Terms of use</td><td>使用条款</td></tr><tr><td>USLT</td><td>USLT</td><td align="left">Unsychronized lyric&#x2F;text transcription</td><td>歌词</td></tr><tr><td>WCOM</td><td>WCOM</td><td align="left">Commercial information</td><td>广告信息</td></tr><tr><td>WCOP</td><td>WCOP</td><td align="left">Copyright&#x2F;Legal information</td><td>版权信息</td></tr><tr><td>WOAF</td><td>WOAF</td><td align="left">Official audio file webpage</td><td>官方音频文件网页</td></tr><tr><td>WOAR</td><td>WOAR</td><td align="left">Official artist&#x2F;performer webpage</td><td>官方艺术家网页</td></tr><tr><td>WOAS</td><td>WOAS</td><td align="left">Official audio source webpage</td><td>官方音频原始资料网页</td></tr><tr><td>WORS</td><td>WORS</td><td align="left">Official internet radio station homepage</td><td>官方互联网无线配置首页</td></tr><tr><td>WPAY</td><td>WPAY</td><td align="left">Payment</td><td>付款</td></tr><tr><td>WPUB</td><td>WPUB</td><td align="left">Publishers official webpage</td><td>出版商官方网页</td></tr><tr><td>WXXX</td><td>WXXX</td><td align="left">User defined URL link frame</td><td>用户自定义 URL 链接</td></tr></tbody></table><h5 id="Frame-header-flags"><a href="#Frame-header-flags" class="headerlink" title="Frame header flags"></a>Frame header flags</h5><p>Flags 字段定义：<code>%abc00000 %ijk00000</code></p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>a</td><td>标签保护标志。设置时认为此帧作废</td></tr><tr><td>b</td><td>文件保护标记。设置时认为此帧作废</td></tr><tr><td>c</td><td>只读标志。设置时认为此帧不能修改</td></tr><tr><td>d</td><td>压缩标志。设置时一个字节存放两个 BCD 码表示数字</td></tr><tr><td>e</td><td>加密标志</td></tr><tr><td>f</td><td>组标志。设置时说明此帧和其他的某帧是一组</td></tr></tbody></table><h3 id="MP3-Frame"><a href="#MP3-Frame" class="headerlink" title="MP3 Frame"></a>MP3 Frame</h3><p>MP3 Frame &#x3D; MP3 Header + MP3 Data</p><h4 id="Frame-Header"><a href="#Frame-Header" class="headerlink" title="Frame Header"></a>Frame Header</h4><table><thead><tr><th>名称</th><th>位长</th><th>说明</th></tr></thead><tbody><tr><td>同步信息</td><td>11</td><td>所有位均为 1</td></tr><tr><td>版本</td><td>2</td><td>00-MPEG 2.5<br />01-未定义<br />10-MPEG 2<br />11-MPEG 1</td></tr><tr><td>层</td><td>2</td><td>00-未定义<br />01-Layer 3<br />10-Layer 2<br />11-Layer 1</td></tr><tr><td>CRC 校验</td><td>1</td><td>0-校验    1-不校验</td></tr><tr><td>比特率</td><td>4</td><td>取样率，单位是 kbps，例如：采用 MPEG-1 Layer 3，64kbps，值为 0101<br /><strong>具体参照比特率对照表</strong></td></tr><tr><td>采样率</td><td>2</td><td>MPEG-1：    00-44.1kHz        01-48kHz 10-32kHz    11-未定义<br/>MPEG-2：    00-22.05kHz      01-24kHz 10-16kHz    11-未定义<br/>MPEG-2.5： 00-11.025kHz    01-12kHz 10-8kHz      11-未定义</td></tr><tr><td>帧长调节</td><td>1</td><td>用来调整文件头长度，0-无需调整，1-调整，具体调整计算方法见下文</td></tr><tr><td>保留字</td><td>1</td><td></td></tr><tr><td>声道模式</td><td>2</td><td>00-立体声 Stereo<br />01-Joint Stereo<br />10-双声道<br />11-单声道</td></tr><tr><td>扩充模式</td><td>2</td><td>当声道模式为 01 时才使用<br/>Value   强度立体声    MS立体声<br/>  00              off                off<br/>  01              on                off<br/>  10              off                on<br/>  11              on                on</td></tr><tr><td>版权</td><td>1</td><td>文件是否合法<br />0-不合法<br />1-合法</td></tr><tr><td>原版标志</td><td>1</td><td>是否原版<br />0-非原版<br />1-原版</td></tr><tr><td>强调方式</td><td>2</td><td>用于声音经降噪压缩后再补偿的分类，很少用到，今后也可能不会用<br/>00-未定义<br />01-50&#x2F;15ms<br />10-保留<br />11-CCITT J.17</td></tr></tbody></table><h5 id="Bitrate-index"><a href="#Bitrate-index" class="headerlink" title="Bitrate index"></a>Bitrate index</h5><p>单位 <strong>kbps</strong></p><table><thead><tr><th>bits</th><th>V1,L1</th><th>V1,L2</th><th>V1,L3</th><th>V2,L1</th><th>V2,L2</th><th>V2,L3</th></tr></thead><tbody><tr><td>0000</td><td>free</td><td>free</td><td>free</td><td>free</td><td>free</td><td>free</td></tr><tr><td>0001</td><td>32</td><td>32</td><td>32</td><td>32(32)</td><td>32(8)</td><td>8(8)</td></tr><tr><td>0010</td><td>64</td><td>48</td><td>40</td><td>64(48)</td><td>48(16)</td><td>16(16)</td></tr><tr><td>0011</td><td>96</td><td>54</td><td>48</td><td>96(56)</td><td>56(24)</td><td>24(24)</td></tr><tr><td>0100</td><td>128</td><td>64</td><td>56</td><td>128(64)</td><td>64(32)</td><td>32 (32)</td></tr><tr><td>0101</td><td>160</td><td>80</td><td>64</td><td>160(80)</td><td>80(40)</td><td>64 (40)</td></tr><tr><td>0110</td><td>192</td><td>96</td><td>80</td><td>192(96)</td><td>96(48)</td><td>80 (48)</td></tr><tr><td>0111</td><td>224</td><td>112</td><td>96</td><td>224(112)</td><td>112(56)</td><td>56 (56)</td></tr><tr><td>1000</td><td>256</td><td>128</td><td>112</td><td>256(128)</td><td>128(64)</td><td>64 (64)</td></tr><tr><td>1001</td><td>288</td><td>160</td><td>128</td><td>288(144)</td><td>160(80)</td><td>128 (80)</td></tr><tr><td>1010</td><td>320</td><td>192</td><td>160</td><td>320(160)</td><td>192(96)</td><td>160 (96)</td></tr><tr><td>1011</td><td>352</td><td>224</td><td>192</td><td>352(176)</td><td>224(112)</td><td>112 (112</td></tr><tr><td>1100</td><td>384</td><td>256</td><td>224</td><td>384(192)</td><td>256(128)</td><td>128 (128)</td></tr><tr><td>1101</td><td>416</td><td>320</td><td>256</td><td>416(224)</td><td>320(144)</td><td>256 (144)</td></tr><tr><td>1110</td><td>448</td><td>384</td><td>320</td><td>448(256)</td><td>384(160)</td><td>320 (160)</td></tr><tr><td>1111</td><td>bad</td><td>bad</td><td>bad</td><td>bad</td><td>bad</td><td>bad</td></tr></tbody></table><p>名词说明：</p><p>V1 - MPEG 1，V2 - MPEG 2 and MPEG 2.5</p><p>L1 - Layer 1，L2 - Layer 2，L3 - Layer 3</p><p>“free” 表示位率可变，”bad” 表示不允许值</p><h4 id="Frame-Length"><a href="#Frame-Length" class="headerlink" title="Frame Length"></a>Frame Length</h4><p>帧大小即每帧的采样数，表示一帧数据中采样的个数，该值是恒定的，如下表所示：</p><table><thead><tr><th></th><th>MPEG1</th><th>MPEG2(LSF)</th><th>MPEG2.5(LSF)</th></tr></thead><tbody><tr><td>Layer1</td><td>384</td><td>384</td><td>384</td></tr><tr><td>Layer2</td><td>1152</td><td>1152</td><td>1152</td></tr><tr><td>Layer3</td><td>1152</td><td>576</td><td>576</td></tr></tbody></table><p>帧长度是压缩时每一帧的长度，<strong>包括帧头的 4 个字节</strong>。它将填充的空位也计算在内。Layer 1 的一个空位长 4 字节，Layer 2 和 Layer 3 的空位是 1 字节。当读取 MPEG 文件时必须计算该值以便找到相邻的帧。注意：因为有填充和比特率变换，帧长度可能变化</p><p>计算公式如下：</p><ul><li>Layer 1：Len(字节) &#x3D; ((每帧采样数 &#x2F; 8 * 比特率) &#x2F; 采样频率) + 填充 * 4</li><li>Layer2&#x2F;3：Len(字节) &#x3D; ((每帧采样数 &#x2F; 8 * 比特率) &#x2F; 采样频率) + 填充</li></ul><p>例：MPEG1 Layer3 比特率 128000，采样率 44100，填充 0，<strong>帧长度</strong>为：</p><p>((1152 &#x2F; 8 * 128Kbps) &#x2F; 44.1kHz + 0 &#x3D; 417 字节</p><h4 id="Frame-Duration"><a href="#Frame-Duration" class="headerlink" title="Frame Duration"></a>Frame Duration</h4><p>每帧持续时间(毫秒) &#x3D; 每帧采样数 &#x2F; 采样频率 * 1000</p><p>例：1152 &#x2F; 441000 * 1000 &#x3D; 26ms</p><h4 id="Side-Info"><a href="#Side-Info" class="headerlink" title="Side Info"></a>Side Info</h4><p>Side Info 位于有效帧的数据区里对应大小如下：</p><table><thead><tr><th></th><th>MPEG 1</th><th>MPEG 2&#x2F;2.5 (LSF)</th></tr></thead><tbody><tr><td>Stereo, Joint Stereo, Dual Channel</td><td>32</td><td>17</td></tr><tr><td>Mono</td><td>17</td><td>9</td></tr></tbody></table><h3 id="Encoding"><a href="#Encoding" class="headerlink" title="Encoding"></a>Encoding</h3><p>对于 MP3 来说现在有两种编码方式，一种是 CBR，一种是 VBR</p><p><strong>CBR，固定位率</strong>。固定位率的帧的大小在整个文件中都是是固定的（公式如上所述），只要知道文件总长度，和从第一帧帧头读出的信息，就都可以通过计算得出这个 MP3 文件的信息，比如总的帧数，总的播放时间等等，要定位到某一帧或某个时间点也很方便，这种编码方式不需要文件头，第一帧开始就是音频数据</p><p><strong>VBR，可变位率</strong>。VBR 是 XING 公司推出的算法，所以在 MP3 的 FRAME 里会有 “Xing” 这个关键字（也有用”Info”来标识的，现在很多流行的小软件也可以进行 VBR 压缩，它们是否遵守这个约定，那就不得而知了），它存放在 MP3 文件中的第一个有效帧的数据区里，它标识了这个 MP3 文件是 VBR 的。同时第一个帧里存放了 MP3 文件的帧的总个数，这就很容易获得了播放总时间，同时还有 100 个字节存放了播放总时间的100 个时间分段的帧索引，假设 4 分钟的 MP3 歌曲，240s，分成 100 段，每两个相邻 INDEX 的时间差就是 2.4S，所以通过这个INDEX，只要前后处理少数的 FRAME，就能快速找出我们需要快进的帧头。其实这第一帧就相当于文件头了</p><p>不过现在有些编码器在编码 CBR 文件时也像 VBR 那样将信息记入第一帧，比如著名的 lame，它使用 “Info” 来做 CBR 的标记</p><h4 id="VBR-Header"><a href="#VBR-Header" class="headerlink" title="VBR Header"></a>VBR Header</h4><p>VBR 文件头位于 MP3 文件中第一个有效帧的数据区，详细结构如下：</p><table><thead><tr><th>位置</th><th>长度</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>0</td><td>4</td><td>VBR 头标记，4 个字节的 ASCII 字符，内容为 “Xing” 或者 “Info”</td><td>“Xing”</td></tr><tr><td>4</td><td>4</td><td>指示 VBR 头具体内容的标记，多种内容使用逻辑或组合：<br />0x0001-总帧数存储区域存在，不包括第一帧<br />0x0002-文件长度存储区域存在，不包括标签<br />0x0004-TOC 存储区域存在<br />0x0008-质量指示存储区域存在</td><td>0x0007（表示：总帧数、文件长度 和 TOC 存储区域存在）</td></tr><tr><td>8</td><td>4</td><td>帧数为大端双字（可选）</td><td>7344</td></tr><tr><td>8 or 12</td><td>4</td><td>文件字节数为大端双字（可选）</td><td>45000</td></tr><tr><td>8, 12 or 16</td><td>100</td><td>搜索作为整数字节的 100 个 TOC 条目（可选）</td><td></td></tr><tr><td>8, 12, 16, 108, 112 or 116</td><td>4</td><td>质量指标为大端双字<br/>从 0 - 最佳质量到，100 - 最差质量（可选）</td><td>0</td></tr></tbody></table><h4 id="VBRI-Header"><a href="#VBRI-Header" class="headerlink" title="VBRI Header"></a>VBRI Header</h4><p>目前此头信息，只有用 Fraunhofer 的编码器生成的 MPEG 音频文件，才会用到此头</p><table><thead><tr><th>位置</th><th>长度</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>0</td><td>4</td><td>VBRI 头 ID 用 4 字节 ASCII 字符表示，总是 “VBRI”，而不是以 NULL 结尾</td><td>“VBRI”</td></tr><tr><td>4</td><td>2</td><td>版本 ID， Big-Endian WORD</td><td>1</td></tr><tr><td>6</td><td>2</td><td>延迟，Big-Endian float</td><td>7344</td></tr><tr><td>8</td><td>2</td><td>质量指标</td><td>75</td></tr><tr><td>10</td><td>4</td><td>文件总字节数，Big-Endian DWORD</td><td>45000</td></tr><tr><td>14</td><td>4</td><td>文件总帧数，Big-Endian DWORD</td><td>7344</td></tr><tr><td>18</td><td>2</td><td>TOC 表的表项数目，Big-Endian WORD</td><td>100</td></tr><tr><td>20</td><td>2</td><td>TOC 表项的缩放因子，Big-Endian DWORD</td><td>1</td></tr><tr><td>22</td><td>2</td><td>单个 TOC 表项的大小，单位字节，最大为 4，Big-Endian WORD</td><td>2</td></tr><tr><td>24</td><td>2</td><td>帧数&#x2F;表项，Big-Endian WORD</td><td>845</td></tr><tr><td>26</td><td></td><td>用于检索的 TOC 表，整数值，可以通过每个表项大小乘以表项个数的到此 TOC 表的总大小，Big-Endian integral</td><td></td></tr></tbody></table><h4 id="Duration-calc"><a href="#Duration-calc" class="headerlink" title="Duration calc"></a>Duration calc</h4><p>对于能获取到总帧数的文件就可以计算出 MP3 的总时长</p><p>MP3 总时长（s） &#x3D; (每帧采样数 * 总帧数) &#x2F; 采样率</p><p>例如：(1152 * 8888) &#x2F; 48000 &#x3D; 213.312 s</p><h4 id="Seek"><a href="#Seek" class="headerlink" title="Seek"></a>Seek</h4><p>VBR 编码的 seek 操作主要是利用 Xing 头中的 TOC 表（如果这个表存在），<strong>TOC 表（Table Of Contents）</strong>是一个长度为 100 的 byte 数组，数组中每个元素都代表在音频时长内的一个特定的时间点对应的文件的相对位置。 简单的说，TOC 表的组成，就是把整个文件平均分成 256 段，每一段代表一个文件位置，再把总的音频时长平均分为 100 段，每一段代表一个时间点，然后对这 100 个时间点，每一个都找出 256 个文件位置中其对应的那个位置，这个位置是这 256 个位置中的相对位置，取值在 0~255，放在 TOC 表中</p><p>假设文件持续 200 秒，现在需要跳到 50 秒，文件长度为 1000000 byte，那么先用以下公式计算出 50 秒对应 TOC 表的哪个元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOC[(<span class="number">50</span> / <span class="number">200</span>) * <span class="number">100</span>] = TOC[<span class="number">25</span>]</span><br></pre></td></tr></table></figure><p>然后在根据以下公式算出文件位置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(TOC[<span class="number">25</span>] / <span class="number">256</span>) * <span class="number">1000000</span></span><br></pre></td></tr></table></figure><h3 id="FFMPEG-转换音频"><a href="#FFMPEG-转换音频" class="headerlink" title="FFMPEG 转换音频"></a>FFMPEG 转换音频</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># VBR</span></span><br><span class="line">ffmpeg -i demo.flac -vn -c:a libmp3lame -aq 4 -ac 2 demo.mp3</span><br><span class="line"><span class="comment"># CBR</span></span><br><span class="line">ffmpeg -i demo.flac -vn -c:a libmp3lame -b:a 192k -ac 2 demo.mp3</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://id3.org/id3v2.3.0">https://id3.org/id3v2.3.0</a></li><li><a href="https://id3.org/id3v2.4.0-structure">https://id3.org/id3v2.4.0-structure</a></li><li><a href="https://zh.wikipedia.org/wiki/ID3">https://zh.wikipedia.org/wiki/ID3</a></li><li><a href="https://zh.wikipedia.org/wiki/MP3">https://zh.wikipedia.org/wiki/MP3</a></li><li><a href="https://juejin.cn/post/6844904000786006023">https://juejin.cn/post/6844904000786006023</a></li><li><a href="https://blog.csdn.net/u010650845/article/details/53520426">https://blog.csdn.net/u010650845/article/details/53520426</a></li><li><a href="https://juejin.cn/post/6948651938229518366#heading-5">https://juejin.cn/post/6948651938229518366#heading-5</a></li><li><a href="http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm">http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;动态图像专家组-1&lt;/strong&gt; 或 &lt;strong&gt;动态图像专家组-2&lt;/strong&gt; &lt;strong&gt;音频层III&lt;/strong&gt;（&lt;strong&gt;MPEG-1&lt;/strong&gt; or &lt;strong&gt;MPEG-2 Audio Layer III&lt;/strong&gt;），常简称为 &lt;strong&gt;MP3&lt;/strong&gt;</summary>
    
    
    
    <category term="MultiMedia" scheme="http://smileorigin.site/categories/MultiMedia/"/>
    
    
    <category term="MultiMedia" scheme="http://smileorigin.site/tags/MultiMedia/"/>
    
    <category term="MP3" scheme="http://smileorigin.site/tags/MP3/"/>
    
  </entry>
  
  <entry>
    <title>DAR &amp; SAR</title>
    <link href="http://smileorigin.site/media/SAR&amp;DAR/"/>
    <id>http://smileorigin.site/media/SAR&amp;DAR/</id>
    <published>2021-07-24T13:00:00.000Z</published>
    <updated>2022-12-12T07:44:41.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DAR"><a href="#DAR" class="headerlink" title="DAR"></a>DAR</h2><p>Display Aspect Ratio，是指定该视频播放的时候，显示的视频比例</p><a id="more"></a><h2 id="SAR"><a href="#SAR" class="headerlink" title="SAR"></a>SAR</h2><p>Sample Aspect Ratio，是指采集这个视频的比例，也就是存储像素点的比例</p><h2 id="PAR"><a href="#PAR" class="headerlink" title="PAR"></a>PAR</h2><p>Pixel Aspect Ratio（可以理解为单个像素的宽高比）大多数情况为 1:1，就是一个正方形像素，否则为长方形像素</p><p>常用的 PAR 比率（1:1，10:11，40:33，16:11，12:11）</p><p><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2021/20210714174930.png"></p><h2 id="MP4-Box"><a href="#MP4-Box" class="headerlink" title="MP4 Box"></a>MP4 Box</h2><table><thead><tr><th>Extension type</th><th>Description</th></tr></thead><tbody><tr><td>pasp</td><td>Pixel aspect ratio. This extension is mandatory for video formats that use non-square pixels. For details, see <a href="https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-124550">Pixel Aspect Ratio (‘pasp’)</a>.</td></tr></tbody></table><p>从 <code>pasp</code> 的 <code>hSpacing</code> 和 <code>vSpacing</code> 获取到的 <code>hSpacing/vSpacing</code> 得到的是 PAR，SAR 应等于 解码出来的视频的宽的像素数&#x2F;高的像素数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假设一个视频 SAR 是 4:3，采样分辨率是 1440 * 1080</span><br><span class="line">可知 PAR 是 4:3</span><br><span class="line">则 DAR = PAR * SAR = (4/3)*(4/3) = 16:9</span><br></pre></td></tr></table></figure><h2 id="FFMPEG-相关"><a href="#FFMPEG-相关" class="headerlink" title="FFMPEG 相关"></a>FFMPEG 相关</h2><ol><li><p>sample_aspect_ratio</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// SAR，图像采集时，横向采集点数与纵向采集点数的比例</span><br><span class="line">AVStream-&gt;sample_aspect_ratio</span><br><span class="line"></span><br><span class="line">// DAR，真正展示的图像宽高比，在渲染视频时，必须根据这个比例进行缩放</span><br><span class="line">// 通过 av_reduce 计算得到，PAR * SAR = DAR</span><br><span class="line">AVStream-&gt;display_aspect_ratio</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.zybuluo.com/ltlovezh/note/1534824">https://www.zybuluo.com/ltlovezh/note/1534824</a></li><li><a href="https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html">https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;DAR&quot;&gt;&lt;a href=&quot;#DAR&quot; class=&quot;headerlink&quot; title=&quot;DAR&quot;&gt;&lt;/a&gt;DAR&lt;/h2&gt;&lt;p&gt;Display Aspect Ratio，是指定该视频播放的时候，显示的视频比例&lt;/p&gt;</summary>
    
    
    
    <category term="MultiMedia" scheme="http://smileorigin.site/categories/MultiMedia/"/>
    
    
    <category term="MultiMedia" scheme="http://smileorigin.site/tags/MultiMedia/"/>
    
    <category term="DAR" scheme="http://smileorigin.site/tags/DAR/"/>
    
    <category term="SAR" scheme="http://smileorigin.site/tags/SAR/"/>
    
    <category term="PAR" scheme="http://smileorigin.site/tags/PAR/"/>
    
  </entry>
  
  <entry>
    <title>V8--building on macOS</title>
    <link href="http://smileorigin.site/web/v8/"/>
    <id>http://smileorigin.site/web/v8/</id>
    <published>2020-07-26T10:00:00.000Z</published>
    <updated>2020-07-27T09:06:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript Engine  </p><blockquote><p>V8 is Google’s open source JavaScript engine.<br>V8 implements ECMAScript as specified in ECMA-262.<br>V8 is written in C++ and is used in Google Chrome, the open source browser from Google.<br>V8 can run standalone, or can be embedded into any C++ application.<br>V8 Project page: <a href="https://v8.dev/docs">https://v8.dev/docs</a></p></blockquote><a id="more"></a><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>replace <code>127.0.0.1:1087</code> with your http proxy host:port</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'\nproxy=127.0.0.1:1087\nset_proxy() &#123;\n    export http_proxy=http://$proxy\n    export https_proxy=http://$proxy\n&#125;\n\nunset_proxy() &#123;\n    unset http_proxy\n    unset https_proxy\n&#125;\n\nset_git_proxy() &#123;\n    git config --global http.proxy $proxy\n    git config --global https.proxy $proxy\n&#125;\n\nunset_git_proxy() &#123;\n    git config --unset --global http.proxy\n    git config --unset --global https.proxy\n&#125;\n\nNO_AUTH_BOTO_CONFIG=~/.boto'</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'[Boto]\nproxy = 127.0.0.1\nproxy_port = 1087'</span> &gt;&gt; ~/.boto</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line">set_proxy</span><br><span class="line">set_git_proxy</span><br></pre></td></tr></table></figure><h2 id="Depot-tools"><a href="#Depot-tools" class="headerlink" title="Depot tools"></a>Depot tools</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line"><span class="comment"># Add depot_tools to the front of your PATH (you will probably want to put this in your ~/.bashrc or ~/.zshrc). Assuming you cloned depot_tools to /path/to/depot_tools:</span></span><br><span class="line"><span class="built_in">export</span> PATH=/path/to/depot_tools:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><h2 id="Get-v8-and-building"><a href="#Get-v8-and-building" class="headerlink" title="Get v8 and building"></a>Get v8 and building</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://v8.dev/docs/build</span></span><br><span class="line"><span class="comment"># https://chromium.googlesource.com/v8/v8.git or</span></span><br><span class="line">fetch v8</span><br><span class="line"><span class="built_in">cd</span> v8</span><br><span class="line">gclient sync</span><br><span class="line">tools/dev/gm.py x64.release</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">smileorigin@Galaxy-MacBook-Pro v8 % tools/dev/gm.py x64.release</span><br><span class="line"><span class="comment"># gn gen out/x64.release</span></span><br><span class="line">Done. Made 153 targets from 88 files <span class="keyword">in</span> 685ms</span><br><span class="line"><span class="comment"># autoninja -C out/x64.release d8</span></span><br><span class="line">ninja: Entering directory `out/x64.release`</span><br><span class="line">[1502/1502] LINK ./d8</span><br><span class="line">Done! - V8 compilation finished successfully.</span><br><span class="line"></span><br><span class="line"><span class="comment"># recommand adding these to your ~/.bashrc or ~/.zshrc</span></span><br><span class="line">V8_HOME=<span class="string">'/path/to/v8'</span></span><br><span class="line"><span class="built_in">alias</span>  d8=<span class="variable">$V8_HOME</span>/out/x64.release/d8</span><br><span class="line"><span class="built_in">alias</span>  tick-processor=<span class="variable">$V8_HOME</span>/tools/mac-tick-processor</span><br><span class="line"><span class="built_in">export</span> D8_PATH=<span class="variable">$V8_HOME</span>/repo/out/x64.release</span><br></pre></td></tr></table></figure><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><h3 id="Failed-to-fetch-file-gs-x2F-x2F-chromium-gn-x2F"><a href="#Failed-to-fetch-file-gs-x2F-x2F-chromium-gn-x2F" class="headerlink" title="Failed to fetch file gs:&#x2F;&#x2F;chromium-gn&#x2F;"></a>Failed to fetch file gs:&#x2F;&#x2F;chromium-gn&#x2F;</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># log</span></span><br><span class="line">Failed to fetch file gs://chromium-gn/a68b194afb05d6a6357cf2e2464136ed7723c305 <span class="keyword">for</span> src/buildtools/mac/gn.</span><br><span class="line">...</span><br><span class="line">Error: Command <span class="string">'download_from_google_storage --no_resume --platform=darwin --no_auth --bucket chromium-gn -s src/buildtools/mac/gn.sha1'</span> returned non-zero <span class="built_in">exit</span> status ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://idom.me/articles/843.html</span></span><br><span class="line"><span class="comment"># wget --no-check-certificate https://storage.googleapis.com/chromium-gn/a68b194afb05d6a6357cf2e2464136ed7723c305 -O src/buildtools/mac/gn</span></span><br></pre></td></tr></table></figure><h3 id="failed-to-send-request-Post-https-chrome-infra-packages-appspot-co"><a href="#failed-to-send-request-Post-https-chrome-infra-packages-appspot-co" class="headerlink" title="failed to send request: Post https://chrome-infra-packages.appspot.co"></a>failed to send request: Post <a href="https://chrome-infra-packages.appspot.co/">https://chrome-infra-packages.appspot.co</a></h3><p><a href="https://github.com/termux/termux-app/issues/698">https://github.com/termux/termux-app/issues/698</a></p><h3 id="SSL-CERTIFICATE-VERIFY-FAILED"><a href="#SSL-CERTIFICATE-VERIFY-FAILED" class="headerlink" title="SSL: CERTIFICATE_VERIFY_FAILED"></a>SSL: CERTIFICATE_VERIFY_FAILED</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># log</span></span><br><span class="line">urllib.error.URLError: &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="built_in">local</span> issuer certificate (_ssl.c:1123)&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若是使用 python2.7 的版本，则会遇到该问题，在有该问题的 python 脚本代码开始前添加禁用 ssl 校验代码即可</span></span><br><span class="line"><span class="comment"># v8/tools/clang/scripts/update.py 下载 clang 的脚本则需要手动执行下 python v8/tools/clang/scripts/update.py</span></span><br><span class="line"><span class="comment"># 然后在继续 gclient sync</span></span><br><span class="line">import ssl</span><br><span class="line">ssl._create_default_https_context = ssl._create_unverified_context</span><br></pre></td></tr></table></figure><h3 id="xcodebuild"><a href="#xcodebuild" class="headerlink" title="xcodebuild"></a>xcodebuild</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># log</span></span><br><span class="line">xcode-select: error: tool <span class="string">'xcodebuild'</span> requires Xcode, but active developer directory <span class="string">'/Library/Developer/CommandLineTools'</span> is a <span class="built_in">command</span> line tools instance</span><br><span class="line"></span><br><span class="line">sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://gist.github.com/kevincennis/0cd2138c78a07412ef21">Installing V8 on a Mac</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;JavaScript Engine  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;V8 is Google’s open source JavaScript engine.&lt;br&gt;V8 implements ECMAScript as specified in ECMA-262.&lt;br&gt;V8 is written in C++ and is used in Google Chrome, the open source browser from Google.&lt;br&gt;V8 can run standalone, or can be embedded into any C++ application.&lt;br&gt;V8 Project page: &lt;a href=&quot;https://v8.dev/docs&quot;&gt;https://v8.dev/docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="web" scheme="http://smileorigin.site/categories/web/"/>
    
    
    <category term="Google" scheme="http://smileorigin.site/tags/Google/"/>
    
    <category term="v8" scheme="http://smileorigin.site/tags/v8/"/>
    
    <category term="d8" scheme="http://smileorigin.site/tags/d8/"/>
    
    <category term="chromium" scheme="http://smileorigin.site/tags/chromium/"/>
    
  </entry>
  
  <entry>
    <title>Kodi</title>
    <link href="http://smileorigin.site/raspberry/kodi/"/>
    <id>http://smileorigin.site/raspberry/kodi/</id>
    <published>2020-01-18T14:00:00.000Z</published>
    <updated>2020-06-20T07:41:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Kodi媒体中心是一个屡获殊荣的自由和开源的跨平台媒体播放器和用于HTPC（Home theater PC，家庭影院PC）的数字媒体娱乐中心软件，可以运行在Linux、OSX、Windows、Android系统。它是一个优秀的自由和开源的（GPL）媒体中心软件</p><a id="more"></a><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p><a href="http://www.kodiplayer.cn/course/2902.html">http://www.kodiplayer.cn/course/2902.html</a><br><a href="https://beekc.top/2019/09/09/install-kodi-in-raspberry-pi/">https://beekc.top/2019/09/09/install-kodi-in-raspberry-pi/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install kodi kodi-pvr-iptvsimple</span><br></pre></td></tr></table></figure><p>iptvsimple 插件可以使 kodi 收看网络电视。在网络山可以下载到扒好的<a href="http://www.kodiplayer.cn/movie/2898.html">IPTV直播源</a>，在插件设置中打开直播源，就可以在 kodi 的主界面的电视中观看网络电视了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">kodi &amp;</span><br></pre></td></tr></table></figure><h2 id="开启-web-控制界面"><a href="#开启-web-控制界面" class="headerlink" title="开启 web 控制界面"></a>开启 web 控制界面</h2><p>在 web 界面下，可以使用<strong>上下左右</strong>和<strong>backspace</strong>键来控制<strong>kodi</strong>界面（即树莓派连接hdmi显示出来的界面，在没有鼠标键盘连接树莓派时很有用！！！）<br><code> vim .kodi/userdata/advancedsettings.xml</code> 添加下述内容，重启树莓派后在电脑浏览器登录树莓派ip地址加2233端口网址（例如：192.168.0.109:2233）就可以看到 kodi 的 web 控制界面了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;advancedsettings&gt;</span><br><span class="line">    &lt;services&gt;</span><br><span class="line">        &lt;webserver&gt;<span class="literal">true</span>&lt;/webserver&gt;</span><br><span class="line">        &lt;webserverpassword default=<span class="string">"true"</span>&gt;&lt;/webserverpassword&gt;</span><br><span class="line">        &lt;webserverport default=<span class="string">"true"</span>&gt;2233&lt;/webserverport&gt;</span><br><span class="line">        &lt;webserverusername default=<span class="string">"true"</span>&gt;kodiPI&lt;/webserverusername&gt;</span><br><span class="line">    &lt;/services&gt;</span><br><span class="line">&lt;/advancedsettings&gt;</span><br></pre></td></tr></table></figure><h2 id="蓝牙音箱"><a href="#蓝牙音箱" class="headerlink" title="蓝牙音箱"></a>蓝牙音箱</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade -y</span><br><span class="line">sudo apt-get dist-upgrade -y</span><br><span class="line">sudo apt-get install pi-bluetooth bluez bluez-firmware blueman</span><br><span class="line">sudo usermod -G bluetooth -a pi</span><br><span class="line">sudo reboot</span><br><span class="line"><span class="comment"># https://blog.csdn.net/xundh/article/details/90774157</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Kodi媒体中心是一个屡获殊荣的自由和开源的跨平台媒体播放器和用于HTPC（Home theater PC，家庭影院PC）的数字媒体娱乐中心软件，可以运行在Linux、OSX、Windows、Android系统。它是一个优秀的自由和开源的（GPL）媒体中心软件&lt;/p&gt;</summary>
    
    
    
    <category term="Raspberry" scheme="http://smileorigin.site/categories/Raspberry/"/>
    
    
    <category term="Kodi" scheme="http://smileorigin.site/tags/Kodi/"/>
    
    <category term="Raspberry" scheme="http://smileorigin.site/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>Linux SSR</title>
    <link href="http://smileorigin.site/linux/ssr/"/>
    <id>http://smileorigin.site/linux/ssr/</id>
    <published>2018-12-21T04:59:00.000Z</published>
    <updated>2020-06-20T07:40:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为一个需求，所以研究了下——<strong>Linux终端下如何使用SSR优雅的出国访问优质(恩……)的国外网站</strong>，本笔记的实验环境是<strong>Center OS</strong>，其他Linux发行版本类似</p><a id="more"></a><h2 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h2><h3 id="安装SSR"><a href="#安装SSR" class="headerlink" title="安装SSR"></a>安装SSR</h3><ol><li><p>作为懒癌患者首选GitHub上的<a href="https://github.com/the0demiurge/CharlesScripts/blob/master/charles/bin/ssr">CharlesScripts</a>项目的安装脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/the0demiurge/CharlesScripts/raw/master/charles/bin/ssr</span><br></pre></td></tr></table></figure></li><li><p>将该脚本移至<code>$PATH</code>环境变量包含的目录，如：<code>/usr/local/bin</code>；并修改文件权限为可执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv ssr /usr/<span class="built_in">local</span>/bin/ssr</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/ssr</span><br></pre></td></tr></table></figure></li><li><p>安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssr install</span><br></pre></td></tr></table></figure><p>执行命令后会自动安装到：<code>$HOME/.local/share/shadowsocksr</code></p></li></ol><h3 id="配置SSR"><a href="#配置SSR" class="headerlink" title="配置SSR"></a>配置SSR</h3><ol><li><p>使用命令：<code>ssr config</code>打开配置文件，按照以下类似配置保存即可</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>: <span class="string">"103.114.161.160"</span>, // 服务器ip</span><br><span class="line">    <span class="string">"server_ipv6"</span>: <span class="string">"::"</span>,</span><br><span class="line">    <span class="string">"server_port"</span>: 667,// 服务器端口</span><br><span class="line">    <span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>: 1080, // 本地端口，记住这个，后续Privoxy将代理这个端口</span><br><span class="line"></span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"ntdtv.com"</span>, // 服务器密码</span><br><span class="line">    <span class="string">"method"</span>: <span class="string">"AES-256-CFB"</span>, // 加密方式</span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"origin"</span>, // 加密协议</span><br><span class="line">    <span class="string">"protocol_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"obfs"</span>: <span class="string">"plain"</span>, // 混淆方式</span><br><span class="line">    <span class="string">"obfs_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"speed_limit_per_con"</span>: 0,</span><br><span class="line">    <span class="string">"speed_limit_per_user"</span>: 0,</span><br><span class="line"></span><br><span class="line">    <span class="string">"additional_ports"</span> : &#123;&#125;, // only works under multi-user mode</span><br><span class="line">    <span class="string">"additional_ports_only"</span> : <span class="literal">false</span>, // only works under multi-user mode</span><br><span class="line">    <span class="string">"timeout"</span>: 120,</span><br><span class="line">    <span class="string">"udp_timeout"</span>: 60,</span><br><span class="line">    <span class="string">"dns_ipv6"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"connect_verbose_info"</span>: 0,</span><br><span class="line">    <span class="string">"redirect"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 保存后，可看到自动提示的信息，输出如下类似内容就是配置成功了：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@sssssssss home]<span class="comment"># ssr config</span></span><br><span class="line">IPv6 not support</span><br><span class="line">2018-12-21 01:09:09 ERROR    shell.py:50 [Errno 2] No such file or directory: <span class="string">'/var/run/shadowsocksr.pid'</span></span><br><span class="line">2018-12-21 01:09:09 ERROR    daemon.py:146 not running</span><br><span class="line">IPv6 not support</span><br><span class="line">2018-12-21 01:09:09 INFO     util.py:85 loading libcrypto from libcrypto.so.10</span><br><span class="line">started</span><br><span class="line">Testing Connection...</span><br><span class="line">local_port is 1080; <span class="keyword">if</span> any exceptions orrured, please install jq</span><br><span class="line">connection information:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"ip"</span>: <span class="string">"103.114.161.160"</span>,</span><br><span class="line">  <span class="string">"city"</span>: <span class="string">"Suqian"</span>,</span><br><span class="line">  <span class="string">"region"</span>: <span class="string">"Jiangsu"</span>,</span><br><span class="line">  <span class="string">"country"</span>: <span class="string">"CN"</span>,</span><br><span class="line">  <span class="string">"loc"</span>: <span class="string">"33.9492,118.2960"</span>,</span><br><span class="line">  <span class="string">"postal"</span>: <span class="string">"223800"</span>,</span><br><span class="line">  <span class="string">"org"</span>: <span class="string">"AS40676 Psychz Networks"</span></span><br><span class="line">&#125;</span><br><span class="line">IP: 103.114.161.160</span><br><span class="line">地址: 美国  加利福尼亚州  洛杉矶</span><br><span class="line">运营商: hosteons.com</span><br><span class="line"></span><br><span class="line">数据二: 美国 | 新加坡HostEONS私人有限公司(美芝路5001号黄金坊04-01号)美国Psychz数据中心洛杉矶节点</span><br><span class="line"></span><br><span class="line">数据三: 美国加利福尼亚洛杉矶</span><br><span class="line"></span><br><span class="line">URL: http://www.cip.cc/103.114.161.160</span><br><span class="line">You may install proxychains4 and configure it properly to <span class="built_in">test</span> net delay</span><br></pre></td></tr></table></figure></li><li><p>常用命令</p><ul><li><code>ssr help</code><br>查看帮助信息</li><li><code>ssr start</code><br>启动ssr</li><li><code>ssr stop</code><br>关闭ssr</li><li><code>ssr restart</code><br>重启ssr</li><li><code>ssr uninstall</code><br>卸载ssr</li></ul></li></ol><h2 id="安装proxychins4"><a href="#安装proxychins4" class="headerlink" title="安装proxychins4"></a>安装proxychins4</h2><p>根据上一节末的提示信息(<code>You may install proxychains4 and configure it properly to test net delay</code>)可知没有安装<strong>proxychins4</strong>所以无法进行延迟测试</p><ol><li>克隆proxychins-ng<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rofl0r/proxychains-ng.git</span><br></pre></td></tr></table></figure></li><li>安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> proxychains-ng</span><br><span class="line">./configure --prefix=/usr --sysconfdir=/etc</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo make install-config</span><br></pre></td></tr></table></figure>输出信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@izuf6f5j6kravfwcn9kgtqz home]<span class="comment"># git clone https://github.com/rofl0r/proxychains-ng.git</span></span><br><span class="line">正克隆到 <span class="string">'proxychains-ng'</span>...</span><br><span class="line">remote: Enumerating objects: 17, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (17/17), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (17/17), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 1211 (delta 6), reused 4 (delta 0), pack-reused 1194</span><br><span class="line">接收对象中: 100% (1211/1211), 626.98 KiB | 58.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">处理 delta 中: 100% (788/788), <span class="keyword">done</span>.</span><br><span class="line">[root@izuf6f5j6kravfwcn9kgtqz home]<span class="comment"># cd proxychains-ng</span></span><br><span class="line">[root@izuf6f5j6kravfwcn9kgtqz proxychains-ng]<span class="comment"># ./configure --prefix=/usr --sysconfdir=/etc</span></span><br><span class="line">checking whether we have GNU-style getservbyname_r() ... yes</span><br><span class="line">checking whether <span class="variable">$CC</span> defines __APPLE__ ... no</span><br><span class="line">checking whether <span class="variable">$CC</span> defines __FreeBSD__ ... no</span><br><span class="line">checking whether <span class="variable">$CC</span> defines __OpenBSD__ ... no</span><br><span class="line">checking whether <span class="variable">$CC</span> defines __sun ... no</span><br><span class="line">checking whether we can use -Wl,--no-as-needed ... yes</span><br><span class="line">checking what<span class="string">'s the option to use in linker to set library name ... --soname</span></span><br><span class="line"><span class="string">Done, now run make &amp;&amp; make install</span></span><br><span class="line"><span class="string">[root@izuf6f5j6kravfwcn9kgtqz proxychains-ng]# make</span></span><br><span class="line"><span class="string">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/nameinfo.o src/nameinfo.c</span></span><br><span class="line"><span class="string">printf '</span><span class="comment">#define VERSION "%s"\n' "$(sh tools/version.sh)" &gt; src/version.h</span></span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/version.o src/version.c</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/core.o src/core.c</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/common.o src/common.c</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/libproxychains.o src/libproxychains.c</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/allocator_thread.o src/allocator_thread.c</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/ip_type.o src/ip_type.c</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/hostsreader.o src/hostsreader.c</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/hash.o src/hash.c</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/debug.o src/debug.c</span><br><span class="line">cc -fPIC -Wl,--no-as-needed -ldl -lpthread -Wl,--soname,libproxychains4.so  \</span><br><span class="line">-shared -o libproxychains4.so src/nameinfo.o src/version.o src/core.o src/common.o src/libproxychains.o src/allocator_thread.o src/ip_type.o src/hostsreader.o src/hash.o src/debug.o</span><br><span class="line">cc -DSUPER_SECURE -DHAVE_GNU_GETSERVBYNAME_R -Wall -O0 -g -std=c99 -D_GNU_SOURCE -pipe   -DLIB_DIR=\"/usr/lib\" -DSYSCONFDIR=\"/etc\" -DDLL_NAME=\"libproxychains4.so\"  -fPIC -c -o src/main.o src/main.c</span><br><span class="line">cc src/main.o src/common.o  -o proxychains4</span><br><span class="line">[root@izuf6f5j6kravfwcn9kgtqz proxychains-ng]<span class="comment"># sudo make install</span></span><br><span class="line">./tools/install.sh -D -m 644 libproxychains4.so /usr/lib/libproxychains4.so</span><br><span class="line">./tools/install.sh -D -m 755 proxychains4 /usr/bin/proxychains4</span><br><span class="line">[root@izuf6f5j6kravfwcn9kgtqz proxychains-ng]<span class="comment"># sudo make install-config</span></span><br><span class="line">./tools/install.sh -D -m 644 src/proxychains.conf /etc/proxychains.conf</span><br></pre></td></tr></table></figure></li><li>修改配置文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/proxychains.conf</span><br></pre></td></tr></table></figure><strong>proxychains</strong>默认使用的是<strong>9050</strong>端口，而我们SSR配置中使用的是<strong>1080</strong>端口，所以要将配置文件最底部的<code>socks4  127.0.0.1 9050</code>改为<code>socks4  127.0.0.1 1080</code><br>安装完成后再次运行<code>ssr test</code>即可看到延迟测试信息了</li></ol><h2 id="Privoxy"><a href="#Privoxy" class="headerlink" title="Privoxy"></a>Privoxy</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>Center OS  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y privoxy</span><br></pre></td></tr></table></figure></li><li>Debian  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y privoxy</span><br></pre></td></tr></table></figure></li></ul><h3 id="PAC模式"><a href="#PAC模式" class="headerlink" title="PAC模式"></a>PAC模式</h3><p>进行全局代理会大大的影响我们访问国内地址，所以我们使用PAC模式来进行流量代理。根据GFWList(由AutoProxy官方维护)来判断哪些网站被我们的超级安全防御墙（超级ma fan的wall）挡在门外<br>这里我们使用<a href="https://www.zfl9.com/">@Otokaze</a> 的shell自动转换脚本来获取GFWList配置</p><ol><li>获取脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/SAMZONG/gfwlist2privoxy/raw/master/gfwlist2privoxy</span><br></pre></td></tr></table></figure></li><li>执行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash gfwlist2privoxy</span><br></pre></td></tr></table></figure>这里会提示需要输入ip地址及端口，输入你ssr配置的本地地址及端口即可，测试内容如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@izuf6f5j6kravfwcn9kgtqz ~]<span class="comment"># bash gfwlist2privoxy</span></span><br><span class="line">proxy(socks5): 127.0.0.1:1080</span><br><span class="line">&#123;+forward-override&#123;forward-socks5 127.0.0.1：1080 .&#125;&#125;</span><br><span class="line"></span><br><span class="line">=================================================================</span><br><span class="line"></span><br><span class="line"><span class="string">"cp -af /root/gfw.action /etc/privoxy/"</span></span><br></pre></td></tr></table></figure></li><li>后续操作<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -af gfw.action /etc/privoxy/</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'actionsfile gfw.action'</span> &gt;&gt; /etc/privoxy/config</span><br></pre></td></tr></table></figure></li><li>设置http、https监听的端口及不监听的端口，Privoxy 默认监听端口是是8118<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:8118</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:8118</span><br><span class="line"><span class="built_in">export</span> no_proxy=localhost</span><br></pre></td></tr></table></figure>只在本次连接会话有效，重新连接服务器后需要重新设置<br>永久有效配置方式：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>编辑<code>/etc/profile</code>（<strong>Debian</strong>则是修改<code>~/.bashrc</code>文件）文件，在文件末尾加上上面的3条export命令重新连接服务器即可</li><li>启动服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start privoxy.service</span><br></pre></td></tr></table></figure></li><li>测试<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.google.com</span><br></pre></td></tr></table></figure>能看到Google网页的源码就说明穿墙成功了</li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://github.com/the0demiurge/CharlesScripts/blob/master/charles/bin/ssr">https://github.com/the0demiurge/CharlesScripts/blob/master/charles/bin/ssr</a></li><li><a href="https://samzong.me/2017/11/17/howto-use-ssr-on-linux-terminal/">在Linux终端使用SSR服务实现科学上网</a></li><li><a href="https://blog.csdn.net/mingjie1212/article/details/51814421">Ubuntu 16.04 ProxyChains4编译安装</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;因为一个需求，所以研究了下——&lt;strong&gt;Linux终端下如何使用SSR优雅的出国访问优质(恩……)的国外网站&lt;/strong&gt;，本笔记的实验环境是&lt;strong&gt;Center OS&lt;/strong&gt;，其他Linux发行版本类似&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://smileorigin.site/categories/Linux/"/>
    
    
    <category term="SSR" scheme="http://smileorigin.site/tags/SSR/"/>
    
    <category term="Privoxy" scheme="http://smileorigin.site/tags/Privoxy/"/>
    
    <category term="ProxyChains4" scheme="http://smileorigin.site/tags/ProxyChains4/"/>
    
    <category term="Debian" scheme="http://smileorigin.site/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>Vim</title>
    <link href="http://smileorigin.site/linux/vim/"/>
    <id>http://smileorigin.site/linux/vim/</id>
    <published>2018-11-24T15:00:00.000Z</published>
    <updated>2022-10-18T07:08:52.170Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些常用的 vim 命令</p><a id="more"></a><h2 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h2><ul><li><code>vimtutor</code><br>命令行直接运行，非vim编辑器内命令</li><li><code>:h</code><br>vim内部命令</li></ul><h2 id="过渡阶段"><a href="#过渡阶段" class="headerlink" title="过渡阶段"></a>过渡阶段</h2><ul><li><code>:set mouse=a</code><br>设置鼠标可区域选择，跟普通的编辑器一样可以进行拖选</li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="打开-x2F-切换文件"><a href="#打开-x2F-切换文件" class="headerlink" title="打开&#x2F;切换文件"></a>打开&#x2F;切换文件</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>:e file_name</code> 、<code>:o file_name</code></td><td>打开文件</td></tr><tr><td><code>:args file_name</code></td><td>如果使用<code>vim file1 file2 [filen]</code>命令打开多个文件，就可以使用<code>:args file_name</code>命令在打开的文件之间切换</td></tr><tr><td><code>:buffers</code>、<code>:ls</code>、<code>:files</code></td><td>查看缓冲区中的文件列表</td></tr><tr><td><code>:bnext</code></td><td>切换到下一个缓冲区文件</td></tr><tr><td><code>:bprevious</code>、<code>bpre</code></td><td>切换到上一个缓冲区文件</td></tr><tr><td><code>:bfirst</code></td><td>切换到第一个缓冲区文件</td></tr><tr><td><code>:blast</code></td><td>切换到最后一个缓冲区文件</td></tr><tr><td><code>:bdelete file_name</code></td><td>删除缓冲区文件</td></tr><tr><td><code>:badd file_name</code></td><td>添加文件到缓冲区</td></tr><tr><td><code>&lt;Ctrl&gt; + z </code></td><td>回到shell（最小化vim）</td></tr><tr><td><code>fg</code>（shell中命令）</td><td>在shell中输入<code>fg</code>即可回到最小化的vim中去</td></tr><tr><td><code>gf</code></td><td>跳转到当前光标下文件名对应的文件</td></tr><tr><td><code>&lt;Ctrl&gt; + ^</code></td><td>跳转到上一个文件</td></tr></tbody></table><h3 id="退出-x2F-保存"><a href="#退出-x2F-保存" class="headerlink" title="退出&#x2F;保存"></a>退出&#x2F;保存</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>:w</code></td><td>保存</td></tr><tr><td><code>:w!</code></td><td>强制保存，不退出vim</td></tr><tr><td><code>:q</code></td><td>退出</td></tr><tr><td><code>:q!</code></td><td>强制退出不保存</td></tr><tr><td><code>:wq</code>、<code>ZZ</code></td><td>保存并退出</td></tr><tr><td><code>:wq!</code></td><td>强制保存，并退出</td></tr><tr><td><code>:w file</code></td><td>将修改另存到file中，不退出vim</td></tr><tr><td><code>:e!</code></td><td>放弃所有修改，从上次保存文件开始再编辑命令历史</td></tr></tbody></table><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>i</code>&#x2F;<code>I</code></td><td>编辑</td></tr><tr><td><code>esc</code></td><td>退出编辑模式</td></tr><tr><td><code>u</code></td><td>撤销操作</td></tr><tr><td><code>&lt;Ctrl&gt; + r </code></td><td>重做（恢复被撤销的动作）</td></tr><tr><td><code>cc</code> 、<code>S</code></td><td>清空当前行并进入编辑模式</td></tr><tr><td><code>s</code></td><td>删除当前字符并进入编辑模式</td></tr><tr><td><code>r</code></td><td>替换当前字符（替换后不进入编辑模式）</td></tr><tr><td><code>R</code></td><td>持续替换字符（不进入编辑模式），替换一个光标自动移到下一个</td></tr><tr><td><code>[&lt;Shift&gt; +] v</code></td><td>可视化多选，<code>&lt;Shift&gt; + v</code>的话是行选</td></tr><tr><td><code>&lt;ctrl&gt; + v</code></td><td>可视化列选</td></tr><tr><td><code>.</code></td><td>重复上次操作</td></tr><tr><td><code>set filetype?</code></td><td>显示文件的filetype</td></tr><tr><td><code>&lt;Ctrl&gt; + a</code></td><td>加1</td></tr><tr><td><code>&lt;crtl&gt; + x</code></td><td>减1</td></tr></tbody></table><h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>=-</code></td><td>格式化当前行代码</td></tr><tr><td><code>gg=G</code></td><td>格式化所有代码</td></tr><tr><td><code>:ce</code></td><td>居中</td></tr><tr><td><code>:le</code></td><td>居左</td></tr><tr><td><code>:re</code></td><td>局右</td></tr><tr><td><code>&gt;&gt;</code></td><td>向右缩进</td></tr><tr><td><code>&lt;&lt;</code></td><td>向左缩进</td></tr></tbody></table><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>x</code></td><td>删除当前字符</td></tr><tr><td><code>X</code></td><td>删除当前字符的前一个字符</td></tr><tr><td><code>dd</code></td><td>删除当前行</td></tr><tr><td><code>D</code> &#x2F;<code>n$</code></td><td>删除当前字符至行尾</td></tr><tr><td><code>d^</code></td><td>删除当前字符至行首</td></tr><tr><td><code>dG</code></td><td>删除包含当前行及之后的全部行</td></tr><tr><td><code>cc</code></td><td>清空当前行</td></tr><tr><td><code>C</code></td><td>清空当前字符到行尾的字符</td></tr></tbody></table><h3 id="代码补全"><a href="#代码补全" class="headerlink" title="代码补全"></a>代码补全</h3><table><thead><tr><th>命令</th><th>代码</th></tr></thead><tbody><tr><td><code>&lt;Ctrl&gt; + p </code></td><td>往前搜索补全</td></tr><tr><td><code>&lt;Ctrl&gt; + n </code></td><td>往后搜索补全</td></tr><tr><td><code>&lt;Ctrl&gt; + e </code></td><td>取消补全</td></tr><tr><td><code>&lt;Ctrl&gt; + y </code></td><td>确定补全</td></tr></tbody></table><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>gg</code></td><td>跳转到首行</td></tr><tr><td><code>G</code></td><td>跳转到尾行</td></tr><tr><td><code>:n</code>、<code>nG</code></td><td>跳转到第n行</td></tr><tr><td><code>o</code></td><td>在下一行插入</td></tr><tr><td><code>O</code></td><td>在上一行插入</td></tr><tr><td><code>w</code>、<code>W</code></td><td>移动到下一个单词开头</td></tr><tr><td><code>b</code>、<code>B</code></td><td>移动到上一个单词开头</td></tr><tr><td><code>e</code>、<code>E</code></td><td>移动到下一个单词结尾</td></tr><tr><td><code>{</code></td><td>下一段落</td></tr><tr><td><code>}</code></td><td>上一段落</td></tr><tr><td><code>M</code></td><td>跳转到文件内容的中部</td></tr><tr><td><code>H</code></td><td>跳转到文件内容的顶部</td></tr><tr><td><code>L</code></td><td>跳转到文件内容的底部</td></tr><tr><td><code>&lt;Ctrl&gt; + f </code></td><td>下一页</td></tr><tr><td><code>&lt;Ctrl&gt; + b </code></td><td>上一页</td></tr><tr><td><code>&#39;0</code></td><td>返回上一次操作的位置</td></tr><tr><td><code>&lt;Ctrl&gt; + o</code></td><td>移动光标到上一个历史编辑位置</td></tr><tr><td><code>&lt;Ctrl&gt; + i</code>、<code>tab</code></td><td>移动光标到下一个历史编辑位置</td></tr><tr><td><code>gn</code></td><td>移动到选中元素结尾</td></tr></tbody></table><h3 id="复制-x2F-粘贴"><a href="#复制-x2F-粘贴" class="headerlink" title="复制&#x2F;粘贴"></a>复制&#x2F;粘贴</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>y</code></td><td>复制</td></tr><tr><td><code>p</code></td><td>粘贴到下部</td></tr><tr><td><code>P</code></td><td>粘贴到上部</td></tr><tr><td><code>x</code>、<code>X</code></td><td>剪切</td></tr></tbody></table><h2 id="高端点的操作"><a href="#高端点的操作" class="headerlink" title="高端点的操作"></a>高端点的操作</h2><h3 id="骚操作"><a href="#骚操作" class="headerlink" title="骚操作"></a>骚操作</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>vim -d file1 file2</code></td><td>对比文件不同之处</td></tr></tbody></table><h3 id="拖动功能"><a href="#拖动功能" class="headerlink" title="拖动功能"></a>拖动功能</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>zz</code></td><td>将当前行定位到屏幕中间</td></tr><tr><td><code>zb</code></td><td>将当前行定位到屏幕底部</td></tr><tr><td><code>zt</code></td><td>将当前行定位到屏幕顶部</td></tr></tbody></table><h3 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>zf</code></td><td>创建折叠</td></tr><tr><td><code>zo</code></td><td>打开折叠</td></tr><tr><td><code>zc</code></td><td>关闭折叠</td></tr><tr><td><code>:mkview</code> &#x2F; <code>:loadview</code></td><td>保存，载入折叠</td></tr></tbody></table><h3 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>:split [file_name]</code> 、<code>:sp [file_name]</code></td><td>水平分割</td></tr><tr><td><code>:vsplit [file_name]</code>、<code>:vs [file_name]</code></td><td>垂直分割</td></tr><tr><td><code>&lt;Ctrl&gt; + w + h</code></td><td>将焦点移动到左边窗口</td></tr><tr><td><code>&lt;Ctrl&gt; + w + j</code></td><td>将焦点移动到下方窗口</td></tr><tr><td><code>&lt;Ctrl&gt; + w + k</code></td><td>将焦点移动到上方窗口</td></tr><tr><td><code>&lt;Ctrl&gt; + w + l</code></td><td>将焦点移动到右边窗口</td></tr></tbody></table><blockquote><p>更详细的教程：<a href="https://www.cnblogs.com/zzqcn/p/4788754.html">【vim】分割窗口、标签页与Quickfix窗口</a></p></blockquote><h3 id="Tab操作"><a href="#Tab操作" class="headerlink" title="Tab操作"></a>Tab操作</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>:tabnew [++opt选项] ［＋cmd］ 文件</code></td><td>创建指定文件的新tab</td></tr><tr><td><code>:tabc</code></td><td>关闭当前的tab</td></tr><tr><td><code>:tabo</code></td><td>关闭其他的所有tab</td></tr><tr><td><code>:tabs</code></td><td>查看所有打开的tab</td></tr><tr><td><code>:tabp</code></td><td>前一个tab</td></tr><tr><td><code>:tabn</code></td><td>后一个tab</td></tr></tbody></table><h3 id="转换文件编码和格式"><a href="#转换文件编码和格式" class="headerlink" title="转换文件编码和格式"></a>转换文件编码和格式</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>:set fileformat unix dos mas</code></td><td>让换行符自由切换</td></tr><tr><td><code>:set fileencodings</code></td><td>检测打开文档编码的顺序，一般设置为utf-8、cp936</td></tr><tr><td><code>:set fileencoding</code></td><td>保存文档的编码，一般为utf-8</td></tr><tr><td><code>:set encoding</code></td><td>vim本身界面的编码，一般和文档无关</td></tr></tbody></table><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>f</code>  &#x2F; <code>F</code></td><td>当前行搜索，til，正向 &#x2F; 反向</td></tr><tr><td><code>t</code> &#x2F; <code>T</code></td><td>当前行搜索，until，正向 &#x2F; 反向</td></tr><tr><td><code>;</code>、<code>,</code></td><td>重复当前行搜索</td></tr><tr><td><code>/</code>、<code>?</code></td><td>当前文件搜索，向上搜索 &#x2F; 向下搜索</td></tr><tr><td><code>:grep -r</code> &#x2F; <code>:!grep -r</code></td><td>跨文件搜索</td></tr><tr><td><code>n</code></td><td>下一个匹配内容</td></tr><tr><td><code>N</code></td><td>上一个匹配内容</td></tr></tbody></table><h3 id="替换指定字符"><a href="#替换指定字符" class="headerlink" title="替换指定字符"></a>替换指定字符</h3><ul><li><p><code>:s/target/replace[/g]</code></p><ul><li><code>target</code>：要被替换的内容</li><li><code>replace</code>：替换的内容</li><li>可选<code>/g</code>：表示替换当前行所有的需要被替换的内容，如不加这个参数则替换当前行第一个需要被替换的内容</li></ul><p>Example：</p><ul><li><code>: s/a/b</code>，将当前行的<code>a</code>替换为<code>b</code></li><li><code>: s/a/b/g</code>，将当前行所有的<code>a</code>替换为<code>b</code></li></ul></li><li><p><code>:n，$s/target/replace[/g] </code></p><ul><li><code>n</code>为数字表示从第n行开始到最后一行，当<code>n</code>为<code>.</code>时表示从当前行开始</li><li><code>target</code>：要被替换的内容</li><li><code>replace</code>：替换的内容</li><li>可选<code>/g</code>：表示替换每一行所有需要被替换的内容，如不添加则替换每一行的第一个需要被替换的内容</li></ul><p>Example：</p><ul><li><code>: 2, $s/a/b</code>：替换从第2行开始到最后一行的每一行的第一个<code>a</code>为<code>b</code></li><li><code>: 2, $s/a/b/g</code>：替换从第2行开始到最后一行的每一行的所有<code>a</code>为<code>b</code></li><li><code>: ., $s/a/b</code>：替换从当前行开始到最后一行的每一行的第一个<code>a</code>为<code>b</code></li></ul></li></ul><h2 id="插件使用（在安装的前提下）"><a href="#插件使用（在安装的前提下）" class="headerlink" title="插件使用（在安装的前提下）"></a>插件使用（在安装的前提下）</h2><h3 id="NERDTree"><a href="#NERDTree" class="headerlink" title="NERDTree"></a>NERDTree</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>o</code></td><td>打开&#x2F;关闭文件或目录</td></tr><tr><td><code>t</code></td><td>在新标签页中打开</td></tr><tr><td><code>T</code></td><td>在后台标签页打开</td></tr><tr><td><code>!</code></td><td>执行此文件</td></tr><tr><td><code>p</code></td><td>到上层目录</td></tr><tr><td><code>P</code></td><td>到根目录</td></tr><tr><td><code>K</code></td><td>到第一个节点</td></tr><tr><td><code>J</code></td><td>到最后一个节点</td></tr><tr><td><code>u</code></td><td>打开上层目录</td></tr><tr><td><code>m</code></td><td>显示文件系统菜单（添加、删除、移动操作）</td></tr><tr><td><code>?</code></td><td>帮助，再按一下关闭</td></tr><tr><td><code>q</code></td><td>关闭</td></tr><tr><td><code>r</code></td><td>刷新列表</td></tr><tr><td><code>i</code></td><td>水平分屏</td></tr><tr><td><code>s</code></td><td>垂直分屏</td></tr></tbody></table><h3 id="vim-commentary"><a href="#vim-commentary" class="headerlink" title="vim-commentary"></a>vim-commentary</h3><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td><code>gcc</code></td><td>注释当前行（普通模式下）</td></tr><tr><td><code>gc</code></td><td>注释当前选中内容（可视多选模式下）</td></tr><tr><td><code>gcap</code></td><td>注释当前所在段落</td></tr><tr><td><code>gcu</code></td><td>注释上一次注释的部分</td></tr><tr><td><code>gcgc</code></td><td>取消一组相邻的注释</td></tr></tbody></table><h2 id="One-more-thing"><a href="#One-more-thing" class="headerlink" title="One more thing"></a>One more thing</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>q:</code></td><td>查看在vim中使用的历史命令</td></tr></tbody></table><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://github.com/bilibili/vim-vide#%E6%8B%A5%E6%9C%89%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84vimrc">vim-vide</a></li><li><a href="https://www.cnblogs.com/zzqcn/p/4788754.html">【vim】分割窗口、标签页与Quickfix窗口</a></li><li><a href="https://www.cnblogs.com/wangkongming/p/4050833.html">vim 树形目录插件NERDTree安装及简单用法</a></li><li><a href="https://github.com/jaywcjlove/vim-web">https://github.com/jaywcjlove/vim-web</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一些常用的 vim 命令&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://smileorigin.site/categories/Linux/"/>
    
    
    <category term="CommandLine" scheme="http://smileorigin.site/tags/CommandLine/"/>
    
    <category term="Linux" scheme="http://smileorigin.site/tags/Linux/"/>
    
    <category term="Vim" scheme="http://smileorigin.site/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Center OS Django部署</title>
    <link href="http://smileorigin.site/python/django-deploy/"/>
    <id>http://smileorigin.site/python/django-deploy/</id>
    <published>2018-11-14T06:00:00.000Z</published>
    <updated>2020-06-20T07:41:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Center OS 部署 Django 程序，使用 Nginx + uWsgi + Supervisor</p><a id="more"></a><h2 id="Python3-环境安装"><a href="#Python3-环境安装" class="headerlink" title="Python3 环境安装"></a>Python3 环境安装</h2><ol><li>安装可能使用到的依赖<br> <code>yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel</code></li><li>从Python官网找到需要的Python版本的下载路径，使用<code>wget</code>下载到服务器<br> 这里以Python3.6.7为例：<a href="https://www.python.org/ftp/python/3.6.7/Python-3.6.7.tgz">https://www.python.org/ftp/python/3.6.7/Python-3.6.7.tgz</a><br> 下载到服务器命令：<code>wget https://www.python.org/ftp/python/3.6.7/Python-3.6.7.tgz</code></li><li>解压tgz压缩包<br> <code>tar -zxvf Python-3.6.7.tgz</code><br> 解压完可以在当前目录下看到Python-3.6.7的目录</li><li>把Python移到 <strong>&#x2F;usr&#x2F;local</strong> 下<br> <code>mv Python-3.6.7 /usr/local</code></li><li>进入Python-3.6.7目录<br> <code>cd /usr/local/Python-3.6.7</code></li><li>配置<br> <code>./configure</code></li><li>编译<br> <code>make</code></li><li>安装<br> <code>make install</code></li><li>创建软链接（以便在全局调用）<br> <code>ln -s /usr/local/bin/python3.6 /usr/bin/python3</code></li><li>查看是否安装成功<br><code>python3 -V</code><br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231025.png"></li></ol><h2 id="将项目传到到服务器"><a href="#将项目传到到服务器" class="headerlink" title="将项目传到到服务器"></a>将项目传到到服务器</h2><p>这里我们使用Git来操作，我们把项目传到如：Github或Coding等代码仓库，然后使用Git克隆到服务器。这样每次项目更新了只要将代码上传到仓库，在到服务器将代码拉下来就可以实现代码更新了</p><ol><li>项目配置<br> 记得在项目的<strong>settings.py</strong>中添加以下配置 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'你的公网ip(不带端口号)'</span>] <span class="comment"># 如果不配置服务器的IP地址将导致外网无法访问，或者使用['*']代表授权全部</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'static'</span>)</span><br></pre></td></tr></table></figure></li><li>安装Git<br> <code>yum install git</code></li><li>克隆项目到服务器<br> <code>git clone http://xxxxxx.com</code>，将<code>http://xxxxxx.com</code>换成自己仓库的地址</li><li>拉取更新的代码<br> <code>git pull</code></li><li>更多<br> 更多的Git命令可以查看我另一篇文章：<a href="https://smileorigin.site/2017/10/18/Git/Git/">https://smileorigin.site/2017/10/18/Git/Git/</a></li></ol><h2 id="使用Virtualenv来创建虚拟环境"><a href="#使用Virtualenv来创建虚拟环境" class="headerlink" title="使用Virtualenv来创建虚拟环境"></a>使用Virtualenv来创建虚拟环境</h2><p>为每一个Django项目都创建一个虚拟环境可以使每个项目的依赖包都互不影响，也不会污染全局环境，其他使用和信息可以查看我的另一篇文章–<a href="https://smileorigin.site/2018/08/06/Python/Virtualenv/">https://smileorigin.site/2018/08/06/Python/Virtualenv/</a></p><ol><li>更新pip<br> <code>pip3 install --upgrade pip</code></li><li>安装Virtualenv<br> <code>pip3 install virtualenv</code></li><li>进入项目所在文件夹<br> 假设我们项目文件夹在当前目录且名称为<code>server</code><br> <code>cd server </code></li><li>创建虚拟环境<br> 在当前文件夹下创建一个名为<strong>venv</strong>的虚拟环境<br> <code>virtualenv venv </code></li><li>激活虚拟环境<br> <code>source venv/bin/activate</code><br> 可以看到在<strong>root</strong>之前多了个**(venv)**，说明激活虚拟环境成功了<br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231041.png"></li><li>使用<code>requirements.txt</code>文件安装依赖包<br> 如果有使用<code>pip freeze &gt;requirements.txt</code>在本地项目导出项目的所有依赖包，则可以通过该命令进行快速安装依赖包，没有的话就手动使用pip安装项目需要的依赖包<br> <code>pip install -r requirements.txt </code></li></ol><h2 id="安装配置uWsgi"><a href="#安装配置uWsgi" class="headerlink" title="安装配置uWsgi"></a>安装配置uWsgi</h2><ol><li>安装<br> <code>pip install uwsgi</code></li><li>测试uwsgi<br> <code>vim test.py</code><br> 填写以下内容   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(env, start_response)</span>:</span></span><br><span class="line">   start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)])</span><br><span class="line">   <span class="keyword">return</span> [<span class="string">b'Hello world'</span>]  <span class="comment"># Python3</span></span><br></pre></td></tr></table></figure> 保存后，执行指令进行测试：<code>uwsgi --http 127.0.0.1:8000 --wsgi-file test.py</code><br> 如果执行成功，则会有以下类似信息：<br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231153.png"><br> 打开另一个命令行窗口，输入以下命令进行测试：<code>curl 127.0.0.1:8000</code><br> 如果提示以下信息则表示测试页面运行成功：<br> 可以看到截图有显示：<code>Hello world</code><br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231233.png"></li><li>新建uwsgi配置文件<br> <code>vim uwsgi.ini</code><br> 可以按照以下模板进行填写   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 我的项目目录</span></span><br><span class="line">chdir = /root/server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定项目的application</span></span><br><span class="line">module = imageAnalyze.wsgi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进程个数</span></span><br><span class="line">workers = 5</span><br><span class="line"><span class="meta">#</span><span class="bash">pid文件保存路径</span></span><br><span class="line">pidfile = /root/server/uwsgi/uwsgi.pid</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定IP端口</span></span><br><span class="line">http = 127.0.0.1:8000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定静态文件</span></span><br><span class="line">static-map = /static=/root/server/static</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动uwsgi的用户名和用户组</span></span><br><span class="line">uid = root</span><br><span class="line">gid = root</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用主进程</span></span><br><span class="line">master = true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 自动移除unix Socket和pid文件当服务停止的时候</span></span><br><span class="line">vacuum = true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 序列化接受的内容，如果可能的话</span></span><br><span class="line">thunder-lock = true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用线程</span></span><br><span class="line">enable-threads = true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置自中断时间</span></span><br><span class="line">harakiri = 30</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置缓冲</span></span><br><span class="line">post-buffering = 4096</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置日志目录</span></span><br><span class="line">daemonize = /root/server/uwsgi/uwsgi.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定sock的文件路径</span></span><br><span class="line">socket = /root/server/uwsgi/uwsgi.sock</span><br></pre></td></tr></table></figure></li><li>新建配置文件中的指定文件夹<br> 如果不创建可能导致以配置文件启动uwsgi报文件夹不存在的错误<br> <code>mkdir uwsgi</code></li><li>创建static文件夹<br> <code>mkdir static</code></li><li>收集项目静态文件<br> <code>python manage.py collectstatic</code><br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231443.png"><br> 收集成功会提示收集的文件数</li><li>以配置文件的形式启动uwsgi<br> <code>uwsgi --ini uwsgi.ini</code><br> 如果启动成功，则有以下类似提示<br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231457.png"><br> 使用<code>netstat -tnlp</code>命令可以查看在有哪些端口是运行的，可以看到uwsgi运行在<strong>127.0.0.1:8000</strong><br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231510.png"></li><li>关闭<br><code>uwsgi --stop uwsgi/uwsgi.pid</code></li></ol><h2 id="安装配置Nginx"><a href="#安装配置Nginx" class="headerlink" title="安装配置Nginx"></a>安装配置Nginx</h2><p>记得在配置Nginx的时候如果使用的是阿里云服务器，要让外部使用的端口要先在阿里云服务器的安全组中打开，否则会不能访问</p><ol><li>查找要安装的Nginx的包链接<br> <a href="http://nginx.org/packages/centos/7/x86_64/RPMS/">http://nginx.org/packages/centos/7/x86_64&#x2F;RPMS&#x2F;</a></li><li>安装<br> <code>rpm -ivh http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.14.1-1.el7_4.ngx.x86_64.rpm</code></li><li>配置Django项目的Nginx配置文件<br> <code>cd /etc/nginx/conf.d</code><br> <code>vim server.conf</code>，创建你项目的Nginx的配置文件，把<code>server</code>换成任意名字（<code>/etc/nginx/nginx.conf</code>文件的最后一行是<code>include /etc/nginx/conf.d/*.conf;</code>会加载<code>/etc/nginx/conf.d</code>文件夹下的所有后缀为<code>.conf</code>的配置文件，所以只要在这个目录下创建后缀为<code>.conf</code>的配置文件并配置相关内容，Nginx就会自动帮我们加载了，不需要额外的处理） <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">   listen 80; # 监听的端口</span><br><span class="line">   server_name cookbook.aicircle.site;</span><br><span class="line">   server_name www.cookbook.aicircle.site # 使外部可通过www.cookbook.aicircle.site进行访问</span><br><span class="line"><span class="meta">   #</span><span class="bash">当请求这些server name的时候，nginx才会做反向代理，0.0.0.0是指全部</span></span><br><span class="line">   location / &#123;</span><br><span class="line">     proxy_pass http://127.0.0.1:8000;</span><br><span class="line">     proxy_set_header Host $host;</span><br><span class="line">     proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">     proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">   #</span><span class="bash"> location 顾名思义，定位，就是当访问 / 的时候，nginx会将请求转给本地的8080&gt;端口，而后面的设置都是&gt;一些基本的配置，可以直接用</span></span><br><span class="line">   location /static &#123;</span><br><span class="line">     alias /root/server/static;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">   #</span><span class="bash"> 这个就是配置静态文件的地方，要用绝对地址，对应最开始的目录形式，假设project就在/home下面，那么这&gt;样配置就可以的了，还有个前提是，你在开发的时候，采取了django的建议，每个app的静态文件都用多了一层app_name的文件夹来包住。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>查看Nginx状态<br> <code>systemctl status nginx</code>，如果Nginx是启动的则会有以下类似提示：<br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231521.png"></li><li>测试Nginx配置文件是否有误<br> <code>nginx -t</code>，如果有以下类似提示，则配置文件没错<br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231543.png"></li><li>启动Nginx<br> <code>systemctl start nginx</code></li><li>测试是否启动成功<br> <code>curl http://127.0.0.1:80</code>，如果Nginx启动成功，则会显示以下类似内容<br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231552.png"></li><li>设置开机自启<br> <code>systemctl enable nginx</code>，如果设置成功则会有类似提示信息<br> <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204231604.png"></li><li>关闭Nginx<br> <code>systemctl stop nginx</code></li><li>重启Nginx<br><code>systemctl restart nginx</code></li></ol><h2 id="使用Supervisor来管理进程"><a href="#使用Supervisor来管理进程" class="headerlink" title="使用Supervisor来管理进程"></a>使用Supervisor来管理进程</h2><blockquote><p>Supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。它是通过fork&#x2F;exec的方式把这些被管理的进程当作supervisor的子进程来启动，这样只要在supervisor的配置文件中，把要管理的进程的可执行文件的路径写进去，就可以实现当子进程挂掉的时候，父进程可以准确获取子进程挂掉的信息，可以选择是否重新启动程序或报警。supervisor还提供了一个功能，可以为supervisord或者每个子进程，设置一个非root的user，这个user就可以管理它对应的进程。</p></blockquote><ol><li>安装<br> 安装我们使用Center OS自带的Python2来安装，Supervisor不支持Python3，打开另一个命令窗口使用以下命令安装<br> <code>pip2 install supervisor</code></li><li>设置配置文件<br> <code>vim supervisord.conf</code>，在任意你想要的位置创建配置文件，根据说明将以下参数改为自己的配置，保存 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:server]</span><br><span class="line">command=/root/server/venv/bin/uwsgi --ini /root/server/uwsgi.ini</span><br><span class="line">directory=/root/server </span><br><span class="line">startsecs=1 </span><br><span class="line">stopwaitsecs=1 </span><br><span class="line">autostart=true </span><br><span class="line">autorestart=true </span><br><span class="line">[supervisord]</span><br><span class="line">[supervisorctl]</span><br></pre></td></tr></table></figure><ul><li><code>program:server</code>：指定程序名称，<code>server</code>为自定义程序名称</li><li><code>command</code>：启动程序的命令，这里是调用虚拟环境内的uwsgi根据配置文件<code>/root/server/uwsgi.ini</code>启动Django程序</li><li><code>directory</code>：项目所在的文件夹</li><li><code>startsecs</code>：启动延迟</li><li><code>stopwaitsecs</code>：关闭延迟</li><li><code>autostart</code>：是否自动启动</li><li><code>autorestart</code>：是否自动重启</li></ul></li><li>启动Supervisor<br> supervisord是服务端，supervisorctl是客户端<br> <code>supervisord -c supervisord.conf </code>，如果<code>surpervisord.conf</code>不在当前文件夹则需要其绝对路径（如：<code>/etc/xx/supervisord.conf</code>）</li><li>重启supervisor<br> <code>service supervisord restart</code></li><li>启动进程<br> <code>supervisorctl -c supervisord.conf start server</code></li><li>重启进程<br> <code>supervisorctl -c supervisord.conf restart server</code></li><li>关闭进程<br> <code>supervisorctl -c supervisord.conf stop server</code></li><li>启动所有进程<br> <code>supervisorctl start all</code></li><li>关闭所有进程<br> <code>supervisorctl stop all</code></li><li>查看所有进程的状态<br><code>supervisorctl status</code></li><li>查看Supervisor的进程信息<br><code>ps -ef | grep supervisord</code></li></ol><h2 id="错误解决方案"><a href="#错误解决方案" class="headerlink" title="错误解决方案"></a>错误解决方案</h2><ul><li>如果以上都配置好了，发现进入网站静态文件无法正常加载，请确认你的项目是不是在<code>/root</code>文件夹下，如果是的话则在修改<code>root</code>目录的权限<br>  <code>chmod -R 755 root</code><br>  修改完后重启Nginx服务器重新访问网站即可</li><li>无法访问服务器（博主这边用的是阿里云服务器，默认防火墙是关闭的）<ol><li>检查服务器防火墙是否将用到的端口都设为白名单</li><li>如果是阿里云服务器，检查安全组是否添加用到的端口为入方向白名单</li></ol></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://blog.csdn.net/wjy397/article/details/51610872">超详细的django1.8处理centos下nginx上处理静态文件步骤！</a></li><li><a href="https://www.cnblogs.com/EasonJim/p/9020896.html">CentOS 6.9&#x2F;7通过yum安装指定版本的Nginx</a></li><li><a href="https://code.ziqiangxuetang.com/django/django-nginx-deploy.html">Django部署(Nginx)</a></li><li><a href="http://blog.51cto.com/mbb97/2151933">结合Nginx+uWsgi部署Django项目</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Center OS 部署 Django 程序，使用 Nginx + uWsgi + Supervisor&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://smileorigin.site/categories/Python/"/>
    
    
    <category term="Python" scheme="http://smileorigin.site/tags/Python/"/>
    
    <category term="Django" scheme="http://smileorigin.site/tags/Django/"/>
    
    <category term="Nginx" scheme="http://smileorigin.site/tags/Nginx/"/>
    
    <category term="uWsgi" scheme="http://smileorigin.site/tags/uWsgi/"/>
    
    <category term="Supervisor" scheme="http://smileorigin.site/tags/Supervisor/"/>
    
  </entry>
  
  <entry>
    <title>EffectivePython Advices Record</title>
    <link href="http://smileorigin.site/python/advices/"/>
    <id>http://smileorigin.site/python/advices/</id>
    <published>2018-08-07T10:00:00.000Z</published>
    <updated>2020-06-20T07:41:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recorded something 《EffectivePython》advices notes</p><a id="more"></a><h2 id="不要通过检测长度的方法来判断somelist是否为空"><a href="#不要通过检测长度的方法来判断somelist是否为空" class="headerlink" title="不要通过检测长度的方法来判断somelist是否为空"></a>不要通过检测长度的方法来判断somelist是否为空</h2><p>不要使用如：<code>if len(somelist) &gt; 0</code>来判断somelist是否为**[]<strong>或</strong>“空值”**，而是应该采用<code>if not somelist</code>这种写法来判断，somelist为空值或者None表达式<code>not somelist</code>都将会为True<br>检测子元素somelist[i]也应该使用这种方法<br>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"I'm none."</span>)</span><br><span class="line">...</span><br><span class="line">I<span class="string">'m none.</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; b = []</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; if not b:</span></span><br><span class="line"><span class="string">...     print("I'</span>m empty list.<span class="string">")</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">I'm empty list.</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; c = &#123;&#125;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; if not c:</span></span><br><span class="line"><span class="string">...     print("</span>I<span class="string">'m empty dictionary.")</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">I'</span>m empty dictionary.</span><br></pre></td></tr></table></figure><h2 id="编写Python程序的时候一定要把编码和解码放在界面最外围来做"><a href="#编写Python程序的时候一定要把编码和解码放在界面最外围来做" class="headerlink" title="编写Python程序的时候一定要把编码和解码放在界面最外围来做"></a>编写Python程序的时候一定要把编码和解码放在界面最外围来做</h2><p>程序的核心部分应该使用Unicode字符类型（也就是Python3中的str，Python2中的unicode），而且不要对字符编码做任何假设。这种办法可以另程序接受多种类型的文本编码（Latin-1、Shift JIS和Big5），又可以保证输出的文本信息只采用一种编码形式（最好是UTF-8）<br>由于Python的字符类型有别，所以Python代码中经常会出现两种使用场景：</p><ul><li>开发者需要原始8位值，这些8位值表示以UTF-8格式或其他编码形式来编码的字符</li><li>开发者需要操作没有特定编码形式的Unicode字符<br>所以我们需要编写两个辅助函数，以便在这两种情况之间转换，使得转换后的输入数据能够符合开发者的预期<br>在Python3中，我们需要编写接受str或bytes，并总返回str的方法：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_str</span><span class="params">(bytes_or_str)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(bytes_or_str, bytes):</span><br><span class="line">        value = bytes_or_str.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        value = bytes_or_str</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure></li></ul><p>另外还需要接受str或bytes，并总是返回bytes的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_bytes</span><span class="params">(bytes_or_str)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(bytes_or_str, str):</span><br><span class="line">        value = bytes_or_str.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        value = bytes_or_str</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><h2 id="用zip函数同时遍历两个迭代器"><a href="#用zip函数同时遍历两个迭代器" class="headerlink" title="用zip函数同时遍历两个迭代器"></a>用zip函数同时遍历两个迭代器</h2><p>在编写Python代码时，我们通常要面对很多个列表，而这些列表里的对象，可能也是相互关联的。通过列表推导，很容易就能根据某个表达式从源列表推算出一份派生类表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'Cecilia'</span>, <span class="string">'Lise'</span>, <span class="string">'Marie'</span>]</span><br><span class="line">letters = [len(n) <span class="keyword">for</span> n <span class="keyword">in</span> names]</span><br></pre></td></tr></table></figure><p>对于本例中的派生列表和源列表来说，相同索引处的两个元素之间有着关联。如果想平行地迭代这两份列表，那么可根据names源列表的长度来执行循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">longest_name = <span class="literal">None</span></span><br><span class="line">max_letters = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(names)):</span><br><span class="line">    count = letters[i]</span><br><span class="line">    <span class="keyword">if</span> count &gt; max_letters:</span><br><span class="line">        longest_name = names[i]</span><br><span class="line">        max_letter = count</span><br><span class="line"></span><br><span class="line">print(longest_name)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Cecilia</span><br></pre></td></tr></table></figure><p>上面这段代码的问题在于，整个循环语句看上去很乱。用下标来访问names和letters会使代码不易阅读。用循环下标i来访问数组的写法一共出现了两次。改用enumerate来做可以稍微缓解这个问题。但是仍然不够理想</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, name <span class="keyword">in</span> enumerate(names):</span><br><span class="line">    count = letters[i]</span><br><span class="line">    <span class="keyword">if</span> count &gt; max_letters:</span><br><span class="line">        longest_name = names[i]</span><br><span class="line">        max_letters = count</span><br></pre></td></tr></table></figure><p>使用内置的<strong>zip</strong>函数能够使上述代码变得更加简洁。在Python3中的<strong>zip</strong>函数，可以把两个或者两个以上的迭代器封装为生成器，以便稍后求值。这种zip生成器，会从每个迭代器中获取该迭代器的下一个值，然后把这些值汇聚成元组。与通过下标来访问多份列表的那种写法相比，这种用zip写出来的代码更加明晰</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name, count <span class="keyword">in</span> zip(names, letters):</span><br><span class="line">    <span class="keyword">if</span> count &gt; max_letters:</span><br><span class="line">        longest_name = name</span><br><span class="line">        max_letters = count</span><br></pre></td></tr></table></figure><p><strong>zip</strong>存在一个问题，如果两个迭代器的长度不一致，<strong>zip</strong>会自动提前终止</p><p><strong>itertools</strong>内置模块中的<strong>zip_longest</strong>函数可以平行地遍历多个迭代器，而不用在乎它们的长度是否相等</p><h2 id="try-x2F-except-x2F-else"><a href="#try-x2F-except-x2F-else" class="headerlink" title="try&#x2F;except&#x2F;else"></a>try&#x2F;except&#x2F;else</h2><p><strong>try&#x2F;except&#x2F;else</strong> 结构可以清晰地描述出哪些异常会由自己的代码来处理、哪些异常会传播到上一级。如果try块没有发生异常，那么就执行else块。有了这种else块，我们可以尽量缩减try块内的代码量，使其更加易读。例如，要从字符串中加载JSON字典数据，然后返回字典里某个键所对应的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_json</span><span class="params">(data, key)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result_dict = json.loads(data) <span class="comment"># May raise ValueError</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">raise</span> KeyError <span class="keyword">from</span> e</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> result_dict[key] <span class="comment"># May raise KeyError</span></span><br></pre></td></tr></table></figure><p>如果数据不是有效的JSON格式，那么用json.loads解码时，会产生ValueError。这个异常会由except块来捕获并处理。如果能够解码，那么else块里的查找语句就会执行，它会根据键来查出相关的值。查询时若有异常，则该异常会向上传播，因为查询语句并不在刚才那个try块的范围内。这种else子句，会把try&#x2F;except后面的内容和except本身区分开，使异常的传播行为变得更加清晰</p><h2 id="用生成器表达式来改写数据量较大的列表推导式"><a href="#用生成器表达式来改写数据量较大的列表推导式" class="headerlink" title="用生成器表达式来改写数据量较大的列表推导式"></a>用生成器表达式来改写数据量较大的列表推导式</h2><p>列表推导缺点–在推导过程中，对于输入序列中的每个值来说，可能都要创建仅含一项元素的全新列表。当输入的数据比较少时，不会出现问题，但如果输入的数据非常多，那么可能会消耗大量的内存，并导致程序崩溃<br>例如要读取一份文件并返回每行的字符数。若采用列表推导来做，则需要把文件每一行的长度都保存在内存中。如果这个文件特别大，或者是通过无休止的network socket来读取，那么这种列表推到就会出问题。下面这段列表推到代码，只适合处理少量的输入值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">value = [len(x) <span class="keyword">for</span> x <span class="keyword">in</span> open(<span class="string">'/tmp/test_file.txt'</span>)]</span><br><span class="line">print(value)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">2</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">43</span>,<span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>为了解决此问题，Python提供了生成器表达式，它是对列表推导和生成器的一种泛化。生成器表达式在运行的时候，并不会把整个输出序列都呈现出来，而是会估值为迭代器，这个迭代器每次可以根据生成器表达式产生一项数据。把实现列表推到所用的那种写法放在一对括号中，就构成了生成器表达式。下面给出的生成器表达式与刚才的代码等效。二者的区别在于，对于生成器表达式求值的时候，它会立刻返回一个迭代器，而不会深入文件中的内容。以刚才返回的迭代器为参数，逐次调用内置的next函数，即可使其按照生成器表达式来输出下一个值。可以根据自己的需求，多次命令迭代器根据生成器表达式来生成新值，而不用担心内存用量激增</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it = (len(x) <span class="keyword">for</span> x <span class="keyword">in</span> open(<span class="string">'/tmp/test_file.txt'</span>))</span><br><span class="line">print(next(it))</span><br><span class="line">print(next(it))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>使用生成器表达式还有个好处，就是可以相互组合。下面代码会把刚那个生成器表达式所返回的迭代器用作另一个生成器表达式的输入值。外围的迭代器每次前进时，都会推动内部那个迭代器，这就产生了连锁效应，使得执行循环、评估条件表达式、对接输入和输出等逻辑都组合在一起。这种连锁生成器表达式，可以迅速在Python中执行。如果要吧多种手法组合起来，以操作大批量的输入数据，那最好用生成器表达式来实现。只是要注意：由生成器表达式所返回的那个迭代器是有状态的，用过一轮之后，就不要反复使用了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">roots = ((x, x**<span class="number">0.5</span>) <span class="keyword">for</span> x <span class="keyword">in</span> it)</span><br><span class="line">print(next(roots))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">(<span class="number">12</span>,<span class="number">23</span>)</span><br></pre></td></tr></table></figure><h2 id="考虑用生成器来改写直接返回列表的函数"><a href="#考虑用生成器来改写直接返回列表的函数" class="headerlink" title="考虑用生成器来改写直接返回列表的函数"></a>考虑用生成器来改写直接返回列表的函数</h2><p>如果函数要产生一系列结果，那么最简单的做法就是把这些结果都放在一份列表里，并将其返回给调用者。例如：我们要查出字符串中每个词的首字母在整个字符串里的位置。下面这段代码，用append方法将这些词的首字母索引添加到result列表中，并在函数结束时将其返回给调用者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_words</span><span class="params">(text)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">if</span> text:</span><br><span class="line">        result.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> index, letter <span class="keyword">in</span> enumerate(text):</span><br><span class="line">        <span class="keyword">if</span> letter == <span class="string">' '</span>:</span><br><span class="line">            result.append(index + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>输入一些范例值，以验证该函数能够正常运作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>address = <span class="string">'Four score and seven years age...'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = index_words(address)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(result[:<span class="number">3</span>])</span><br><span class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure><p>第一个问题是，这个代码写得有点拥挤。每次找到新的结果，都要调用append方法。但我们真正应该强调的，并不是对result.append方法的调用，而是该方法给列表中添加的那个值，也就是index + 1。另外，函数首尾还有一行代码用来创建及返回result列表。于是，在函数主体部分的约130个字符里，重要的大概只有75个</p><p>这个函数改用生成器（generator）来写会更好。生成器是使用<strong>yield</strong>表达式的函数。调用函数时，它并不是真正的运行，而是会返回生成器。每次在这个迭代器上面调用内置的next函数时，迭代器会把生成器推进到下一个yield表达式那里。生成器传给<strong>yield</strong>的每一个值都会由迭代器返回给调用者</p><p>下面的这个生成器函数，会产生和刚才那个函数相同的效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_words_iter</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> text:</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index, letter <span class="keyword">in</span> enumerate(text):</span><br><span class="line">        <span class="keyword">if</span> letter == <span class="string">' '</span>:</span><br><span class="line">            <span class="keyword">yield</span> index + <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = list(index_words_iter(address))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(result[:<span class="number">3</span>])</span><br><span class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure><p>这个函数不需要包含域result列表相交互的那些代码，因而看起来比刚才那种写法清晰许多。原来那个result列表中的元素，现在都分别传给<strong>yield</strong>表达式了。调用该生成器后所返回的迭代器，可以传给内置的list函数，以将其转换为列表</p><h2 id="使用None和文档字符串来描述具有动态默认值的参数"><a href="#使用None和文档字符串来描述具有动态默认值的参数" class="headerlink" title="使用None和文档字符串来描述具有动态默认值的参数"></a>使用None和文档字符串来描述具有动态默认值的参数</h2><p>有时我们想采用一种非静态的类型，来做关键字参数的默认值。例如：在打印日志消息的时候，要把相关事件的记录时间也标注在这条消息中。默认情况下，消息里面所包含的时间，应该是调用<strong>log</strong>函数那一刻的时间。如果我们以为参数的默认值会在每次执行函数时得到评估，那可能就会写出下面这种代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(message, when=datetime.datetime.now<span class="params">()</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'%s : %s'</span> % (when, message))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>log(<span class="string">'Hi there!'</span>)</span><br><span class="line"><span class="number">2018</span><span class="number">-08</span><span class="number">-08</span> <span class="number">09</span>:<span class="number">41</span>:<span class="number">37.025822</span> : Hi there!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>log(<span class="string">'Hi again!'</span>)</span><br><span class="line"><span class="number">2018</span><span class="number">-08</span><span class="number">-08</span> <span class="number">09</span>:<span class="number">41</span>:<span class="number">37.025822</span> : Hi again!</span><br></pre></td></tr></table></figure><p>两条消息的时间戳是一样的，这是因为datetime.now()只执行了一次，也就是它只在函数定义的时候执行了一次。参数的默认值，会在每个模块加载进来的时候求出，而很多模块都是在程序启动的时候加载的。包含这段代码的模块一旦加载进来参数的默认值也就固定不变了，程序不会再次执行datetime.now()<br>True Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(message, when=None)</span>:</span></span><br><span class="line"><span class="meta">... </span>    when = datetime.datetime.now() <span class="keyword">if</span> when <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> when</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'%s : %s'</span> % (when, message))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>log(<span class="string">'Hi there!'</span>)</span><br><span class="line"><span class="number">2018</span><span class="number">-08</span><span class="number">-08</span> <span class="number">09</span>:<span class="number">48</span>:<span class="number">01.383500</span> : Hi there!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>log(<span class="string">'Hi again!'</span>)</span><br><span class="line"><span class="number">2018</span><span class="number">-08</span><span class="number">-08</span> <span class="number">09</span>:<span class="number">48</span>:<span class="number">06.394290</span> : Hi again!</span><br></pre></td></tr></table></figure><p>默认值为字典的错误情况实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(data, default=&#123;&#125;)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> json.loads(data)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">except</span> ValueError:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> default</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo = decode(<span class="string">'bad data'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo[<span class="string">'stuff'</span>] = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bar = decode(<span class="string">'also bad'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bar[<span class="string">'meep'</span>] = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Foo:'</span>, foo)</span><br><span class="line">Foo: &#123;<span class="string">'stuff'</span>: <span class="number">5</span>, <span class="string">'meep'</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Bar:'</span>, bar)</span><br><span class="line">Bar: &#123;<span class="string">'stuff'</span>: <span class="number">5</span>, <span class="string">'meep'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>True Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(data, default=None)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> default <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="meta">... </span>            default = &#123;&#125;</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> json.loads(data)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">except</span> ValueError:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> default</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo = decode(<span class="string">'bad data'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo[<span class="string">'stuff'</span>] = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bar = decode(<span class="string">'also bad'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bar[<span class="string">'meep'</span>] = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Foo:'</span>, foo)</span><br><span class="line">Foo: &#123;<span class="string">'stuff'</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Bar:'</span>, bar)</span><br><span class="line">Bar: &#123;<span class="string">'meep'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="用只能以关键字形式指定的参数来确保代码明晰"><a href="#用只能以关键字形式指定的参数来确保代码明晰" class="headerlink" title="用只能以关键字形式指定的参数来确保代码明晰"></a>用只能以关键字形式指定的参数来确保代码明晰</h2><p>下面定义的这个safe_division_c函数，带有两个只能以关键字形式来指定的参数。参数列表里的*号，标志着位置参数就此终结，之后那些参数，都只能以关键字形式来指定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_division_c</span><span class="params">(number, divisor, *, ignore_overflow=False, ignore_zero_division=False)</span>:</span></span><br></pre></td></tr></table></figure><p>现在，我们就不用位置参数的形式来指定关键字参数了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">safe_division_c(<span class="number">1</span>, <span class="number">10</span>**<span class="number">500</span>, <span class="literal">True</span>, <span class="literal">False</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">TypeError: safe_division_c() takes <span class="number">2</span> positional arguments but <span class="number">4</span> were given</span><br></pre></td></tr></table></figure><p>关键字参数依然可以用关键字的形式来指定，如果不指定，也依然会采用默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">safe_division_c(<span class="number">1</span>, <span class="number">0</span>, ignore_zero_division=<span class="literal">True</span>)  <span class="comment"># OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    safe_division_c(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="keyword">pass</span>     <span class="comment"># Excepted</span></span><br></pre></td></tr></table></figure><h2 id="使用内置算法与数据结构"><a href="#使用内置算法与数据结构" class="headerlink" title="使用内置算法与数据结构"></a>使用内置算法与数据结构</h2><p>如果Python程序要处理的数量比较可观，那么代码的执行速度会受到复杂算法拖累。然而这并不能证明Python是一门执行速度很低的语言，因为这种情况很可能是算法和数据结构选择不佳导致的<br>幸运的是Python的标准程序库里面，内置了各种算法与数据结构，以供开发者使用。这些常见的算法与数据结构，不仅执行速度比较快，而且还可以简化编程工作。其中某些实用工具，是很难由开发者自己正确实现出来的。所以，我们应该直接使用这些Python自带的功能，而不要重新去实现它们，以节省时间和精力</p><h3 id="双向队列"><a href="#双向队列" class="headerlink" title="双向队列"></a>双向队列</h3><p><strong>collections</strong>模块中的<strong>deque</strong>类，是一种双向队列（double-ended queue，双端队列）。从该队列的头部或者尾部插入或移除一个元素，只需要消耗常数级别的时间，这一特性使得它非常适合用来表示先进先出队列。内置的list类型，也可以像队列那样，按照一定的顺序来存放元素。从list尾部插入或者移除元素，也仅仅需要常熟级别的时间。但是，从list头部插入或者移除元素，却会耗费线性级别的时间，这与deque的常数级别时间相比，要慢得多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time()</span><br><span class="line">fifo = deque()</span><br><span class="line"><span class="comment"># Producter</span></span><br><span class="line">fifo.extend([i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200000</span>)])</span><br><span class="line"><span class="comment"># Consumer</span></span><br><span class="line"><span class="keyword">while</span> len(fifo) &gt; <span class="number">0</span>:</span><br><span class="line">    x = fifo.popleft()</span><br><span class="line">end = time()</span><br><span class="line">print(<span class="string">'deque: &#123;&#125;'</span>.format(end-start))</span><br><span class="line"></span><br><span class="line">start = time()</span><br><span class="line">l = []</span><br><span class="line">l.extend([i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200000</span>)])</span><br><span class="line"><span class="keyword">while</span> len(l) &gt; <span class="number">0</span>:</span><br><span class="line">    x = l.pop(<span class="number">0</span>)</span><br><span class="line">end = time()</span><br><span class="line">print(<span class="string">'list: &#123;&#125;'</span>.format(end-start))</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可看到在20万级数据下一直移除第一个元素双向队列的效率要高得非常多</span></span><br><span class="line">deque: 0.08118391036987305</span><br><span class="line">list: 4.417634010314941</span><br></pre></td></tr></table></figure><h3 id="有序字典"><a href="#有序字典" class="headerlink" title="有序字典"></a>有序字典</h3><p>标准字典是无序的。也就是说在拥有相同键值对的两个dict上面迭代，可能会出现不同的迭代顺序。标准的字典之所以会出现这种奇怪的现象，是由其快速哈希表（fast hash table）的实现方式导致的<br><strong>collections</strong>模块中的<strong>OrderedDict</strong>类，是一种特殊的字典，它能按照键的插入顺序，来保存键值对在字典中的次序。在OrderedDict上面根据键来迭代，其行为是确定的。这种确定的行为，可以极大地简化测试与调试工作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"> </span><br><span class="line">a = OrderedDict()</span><br><span class="line">a[<span class="string">'foo'</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="string">'bar'</span>] = <span class="number">2</span></span><br><span class="line">b = OrderedDict()</span><br><span class="line">b[<span class="string">'foo'</span>] = <span class="string">'red'</span></span><br><span class="line">b[<span class="string">'bar'</span>] = <span class="string">'blue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> value1, value2 <span class="keyword">in</span> zip(a.values(), b.values()):</span><br><span class="line">    print(value1, value2)</span><br></pre></td></tr></table></figure><h3 id="带有默认值的字典"><a href="#带有默认值的字典" class="headerlink" title="带有默认值的字典"></a>带有默认值的字典</h3><p>字典可以用来保存一些统计数据。但是，由于字典里面未必有我们要查询的那个键，所以在用字典保存计数器的时候，就必须用稍微麻烦一些的方式，才能够实现这种简单的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stats = &#123;&#125;</span><br><span class="line">key = <span class="string">'my_counter'</span></span><br><span class="line"><span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> stats:</span><br><span class="line">    stats[key] = <span class="number">0</span></span><br><span class="line">stats[key] += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>我们可以用collections模块中的defaultdict类来简化上述代码。如果字典中没有待访问的键，那么它就会把某个默认值与这个键自动关联起来。于是，我们只要提供返回默认值的函数即可，字典会调用该函数为每一个默认的键指定默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">dict = defaultdict(int)</span><br><span class="line">print(dict[<span class="string">'a'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># out</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="堆队列"><a href="#堆队列" class="headerlink" title="堆队列"></a>堆队列</h3><p>堆（heap）是一种数据结构，很适合用来实现优先级队列。heapq模块提供了<strong>heappush</strong>、<strong>heappop</strong>和<strong>nsmallest</strong>等一些函数，能够在标准的list类型之中创建堆结构<br>各种优先级的元素，都可以按任意顺序插入堆中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">heapq.heappush(a, <span class="number">5</span>)</span><br><span class="line">heapq.heappush(a, <span class="number">3</span>)</span><br><span class="line">heapq.heappush(a, <span class="number">7</span>)</span><br><span class="line">heapq.heappush(a, <span class="number">4</span>)</span><br><span class="line">print(<span class="string">'Before: '</span>, a)</span><br><span class="line"><span class="comment"># 使用sort后依然能保持堆的结构，但是添加reverse后就不能保持堆结构了</span></span><br><span class="line"><span class="comment"># a.sort()</span></span><br><span class="line">print(<span class="string">'After； '</span>, a)</span><br><span class="line"><span class="comment"># 按照优先级弹出元素的，数值越小优先级越大</span></span><br><span class="line">print(heapq.heappop(a), heapq.heappop(a), heapq.heappop(a), heapq.heappop(a))</span><br></pre></td></tr></table></figure><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>在list上面使用index方法来搜索某个元素，所耗的时间会与列表的长度成线性比例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = list(range(<span class="number">10</span>**<span class="number">6</span>))</span><br><span class="line">i = x.index(<span class="number">991234</span>)</span><br></pre></td></tr></table></figure><p><strong>bisect</strong>模块中的bisect_left等函数，提供了高效的二分折半搜索算法，能够在一系列排好顺序的元素之中搜寻某个值。由bisect_left函数所返回的索引，表示待搜寻的值在序列中的插入点（将该值插在此处，能够使序列依然保持有序）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i= bisect_left(x, <span class="number">991234</span>)</span><br></pre></td></tr></table></figure><p>二分搜算法的复杂度，是对数级别的。这就意味着，用bisect来搜索包含一百个元素的列表，与用index来搜索包含14个元素的列表，所耗费的时间差不多。由此可见，这种对数级别的算法，要比线性级别的算法快很多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bisect <span class="keyword">import</span> bisect_left</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">a = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>)]</span><br><span class="line"></span><br><span class="line">start = time()</span><br><span class="line">bisect_left(a, <span class="number">9000</span>)</span><br><span class="line">end = time()</span><br><span class="line">print(<span class="string">'bisect: &#123;&#125;'</span>.format(end - start))</span><br><span class="line"></span><br><span class="line">start = time()</span><br><span class="line">a.index(<span class="number">9000</span>)</span><br><span class="line">end = time()</span><br><span class="line">print(<span class="string">'list: &#123;&#125;'</span>.format(end - start))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">bisect: <span class="number">1.3828277587890625e-05</span></span><br><span class="line">list: <span class="number">0.000225067138671875</span></span><br></pre></td></tr></table></figure><p>通过运行结果显而易见，binsect的搜索效率远大于index的搜索效率</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recorded something 《EffectivePython》advices notes&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://smileorigin.site/categories/Python/"/>
    
    
    <category term="Notes" scheme="http://smileorigin.site/tags/Notes/"/>
    
    <category term="EffectivePython" scheme="http://smileorigin.site/tags/EffectivePython/"/>
    
    <category term="Advices" scheme="http://smileorigin.site/tags/Advices/"/>
    
  </entry>
  
  <entry>
    <title>Virtualenv</title>
    <link href="http://smileorigin.site/python/virtualenv/"/>
    <id>http://smileorigin.site/python/virtualenv/</id>
    <published>2018-08-06T10:20:00.000Z</published>
    <updated>2020-06-20T07:41:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Something of a tool, the tool can easy to create isolated Python environments–Virtualenv.</p><a id="more"></a><blockquote><p>本文为学习<a href="https://virtualenv.pypa.io/en/stable">Virtualenv</a>官方文档的笔记</p><p>英文好的出门左拐官方文档美滋滋</p></blockquote><h2 id="Why-use-Virtualenv"><a href="#Why-use-Virtualenv" class="headerlink" title="Why use Virtualenv?"></a>Why use Virtualenv?</h2><p>我们一般在本地会有很多项目，每个项目所依赖的包一般都是不同的，如果在整个系统的Python环境下安装各种项目需要的第三方模块会导致整个系统的Python环境十分臃肿，也很容易搞乱整个环境，造成不好修复的后果。如果我们能为每个项目都提供独立的Python运行环境与系统隔离不是美滋滋，Virtualenv就是这样美滋滋的工具<br>Virtualenv能创建理论上无数的不同的Python运行环境，在每个环境里面我们可以做着和在系统环境下一模一样的事情，且不论你怎么弄都不会影响到全局的Python环境</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>To install globally with pip(if you have pip 1.3 or greater installed globally)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sudo] pip install virtualenv</span><br></pre></td></tr></table></figure><p>Example<br>The following procedure indicates that the installation is successful，the installation version is 16.0.0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">smileorigins-MacBook-Pro:~ smileorigin$ pip3 install virtualenv</span><br><span class="line">Collecting virtualenv</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/b6/<span class="number">30</span>/<span class="number">96</span>a02b2287098b23b875bc8c2f58071c35d2efe84f747b64d523721dc2b5/virtualenv<span class="number">-16.0</span><span class="number">.0</span>-py2.py3-none-any.whl (<span class="number">1.9</span>MB)</span><br><span class="line">    <span class="number">100</span>% |████████████████████████████████| <span class="number">1.9</span>MB <span class="number">88</span>kB/s </span><br><span class="line">Installing collected packages: virtualenv</span><br><span class="line">Successfully installed virtualenv<span class="number">-16.0</span><span class="number">.0</span></span><br><span class="line">smileorigins-MacBook-Pro:~ smileorigin$ virtualenv --version</span><br><span class="line"><span class="number">16.0</span><span class="number">.0</span></span><br><span class="line">smileorigins-MacBook-Pro:~ smileorigin$</span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>Virtualenv has one basic command</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv ENV</span><br></pre></td></tr></table></figure><p><strong>ENV</strong> is a directory to place the new virtual environment</p><ul><li><strong>ENV&#x2F;lib&#x2F;</strong> and <strong>ENV&#x2F;include&#x2F;</strong><br>  Containing supporting library files for a new virtualenv python<br>  Packages installed in this environment will live under <strong>ENV&#x2F;lib&#x2F;pythonX.X&#x2F;site-packages&#x2F;</strong></li><li><strong>ENV&#x2F;bin&#x2F;</strong><br>  Containing the executables – noticeably a new <strong>python</strong><br>  Thus running a script with <strong>#! &#x2F;path&#x2F;to&#x2F;ENV&#x2F;bin&#x2F;python</strong> would run that script under this virtualenv’s python</li><li><strong>pip</strong> and <strong>setuptools</strong> are installed<br>  This associated pip can be run from <strong>ENV&#x2F;bin&#x2F;pip</strong></li></ul><p>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">smileorigins-MacBook-Pro:~ smileorigin$ mkdir test_env</span><br><span class="line">smileorigins-MacBook-Pro:~ smileorigin$ virtualenv test_env</span><br><span class="line">Using base prefix <span class="string">'/Library/Frameworks/Python.framework/Versions/3.7'</span></span><br><span class="line">New python executable <span class="keyword">in</span> /Users/smileorigin/test_env/bin/python3<span class="number">.7</span></span><br><span class="line">Also creating executable <span class="keyword">in</span> /Users/smileorigin/test_env/bin/python</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br></pre></td></tr></table></figure><h2 id="Activate-script"><a href="#Activate-script" class="headerlink" title="Activate script"></a>Activate script</h2><p>In a newly created virtualenv there will also be a <strong>activate</strong> shell script<br>On Posix systems, this resides in <strong>ENV</strong> , so  you can run :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source bin/activate</span><br></pre></td></tr></table></figure><p>To undo these changes to your path (and prompt), just run:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">smileorigins-MacBook-Pro:test_env smileorigin$ source bin/activate</span><br><span class="line">(test_env) smileorigins-MacBook-Pro:test_env smileorigin$ python3</span><br><span class="line">Python <span class="number">3.7</span><span class="number">.0</span> (v3<span class="number">.7</span><span class="number">.0</span>:<span class="number">1</span>bf9cc5093, Jun <span class="number">26</span> <span class="number">2018</span>, <span class="number">23</span>:<span class="number">26</span>:<span class="number">24</span>) </span><br><span class="line">[Clang <span class="number">6.0</span> (clang<span class="number">-600.0</span><span class="number">.57</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exit()</span><br><span class="line">(test_env) smileorigins-MacBook-Pro:test_env smileorigin$ deactivate</span><br></pre></td></tr></table></figure><h2 id="Inherit-global-site-packages"><a href="#Inherit-global-site-packages" class="headerlink" title="Inherit global site-packages"></a>Inherit global site-packages</h2><p>If you want to inherit packages from <strong>&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages</strong> (or whatever your global site-packages directory is), you can run:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --system-site-packages ENV</span><br></pre></td></tr></table></figure><p>This can be used if you have control over the global site-packages directory, and you want to depend on the packages there. If you want isloation from the global system, do not use this flag.<br>Example<br>My global python environment is 3.7.0, so we can see the result is inherit 3.7.0 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">smileorigins-MacBook-Pro:~ smileorigin$ mkdir test_inherit</span><br><span class="line">smileorigins-MacBook-Pro:~ smileorigin$ virtualenv --system-site-packages test_inherit</span><br><span class="line">Using base prefix <span class="string">'/Library/Frameworks/Python.framework/Versions/3.7'</span></span><br><span class="line">New python executable <span class="keyword">in</span> /Users/smileorigin/test_inherit/bin/python3<span class="number">.7</span></span><br><span class="line">Also creating executable <span class="keyword">in</span> /Users/smileorigin/test_inherit/bin/python</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br><span class="line">smileorigins-MacBook-Pro:~ smileorigin$ cd test_inherit</span><br><span class="line">smileorigins-MacBook-Pro:test_inherit smileorigin$ source bin/activate</span><br><span class="line">(test_inherit) smileorigins-MacBook-Pro:test_inherit smileorigin$ python --version</span><br><span class="line">Python <span class="number">3.7</span><span class="number">.0</span></span><br><span class="line">(test_inherit) smileorigins-MacBook-Pro:test_inherit smileorigin$ python</span><br><span class="line">Python <span class="number">3.7</span><span class="number">.0</span> (v3<span class="number">.7</span><span class="number">.0</span>:<span class="number">1</span>bf9cc5093, Jun <span class="number">26</span> <span class="number">2018</span>, <span class="number">23</span>:<span class="number">26</span>:<span class="number">24</span>) </span><br><span class="line">[Clang <span class="number">6.0</span> (clang<span class="number">-600.0</span><span class="number">.57</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Something of a tool, the tool can easy to create isolated Python environments–Virtualenv.&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://smileorigin.site/categories/Python/"/>
    
    
    <category term="Notes" scheme="http://smileorigin.site/tags/Notes/"/>
    
    <category term="Virtualenv" scheme="http://smileorigin.site/tags/Virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>Stored Procedure</title>
    <link href="http://smileorigin.site/database/mysql/stored-procedure/"/>
    <id>http://smileorigin.site/database/mysql/stored-procedure/</id>
    <published>2018-08-04T04:05:00.000Z</published>
    <updated>2020-06-20T07:40:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>There is recorded something of MySQL stored procedure.</p><a id="more"></a><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>本文大部分参考自以下文章：<br><a href="https://www.jianshu.com/p/7b2d74701ccd">https://www.cnblogs.com/mark-chan/p/5384139.html</a><br>仅做个人笔记使用</p><h2 id="什么是存储过程？"><a href="#什么是存储过程？" class="headerlink" title="什么是存储过程？"></a>什么是存储过程？</h2><p>一组可编程的函数，是为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数（需要时）来调用执行<br>存储过程可以用来封装特定功能，以便应用于不同的平台，可以看做对面向对象编程的模拟</p><h2 id="存储过程的优点"><a href="#存储过程的优点" class="headerlink" title="存储过程的优点"></a>存储过程的优点</h2><ul><li>增强SQL语言的功能和灵活性<br>  存储过程可以用控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算</li><li>标准组件式编程<br>  存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的SQL语句<br>  数据库管理人员可随时对存储过程进行修改，对应用程序源代码毫无影响</li><li>较快的执行速度<br>  如果某一操作包含大量的Transaction-SQL代码或分别被多次执行，那么存储过程要比批处理执行速度快很多，因为存储过程是预编译的。在首次运行一个存储过程时查询优化器对其进行分析优化，并且给出最终被存储在系统表中的执行计划。而批处理的Transation-SQL语句在每次运行时都要进行编译和优化，速度相对要慢一些</li><li>减少网络流量<br>  针对同一个数据库对象的操作（如：查询、修改），如果这一操作所涉及的Transation-SQL语句被组织进存储过程，那么当在客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而大大减少网络流量并降低了网络负载</li><li>作为一种安全机制来充分利用<br>  通过对执行某一存储过程的权限进行限制，能够实现对相应的数据的访问权限的限制，避免了非授权用户对数据的访问，保证了数据的安全</li></ul><h2 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line">CREATE PROCEDURE PROCEDURE_NAME([[IN | OUT | INOUT] ARG_NAME TYPE [, [INT | OUT | INOUT] ARG_NAME TYPE...]])</span><br><span class="line">BEGIN</span><br><span class="line">PROCEDURE BODY</span><br><span class="line">END</span><br><span class="line">//</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h3 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h3><p>MySQL默认以”;”为分隔符，如果没有声明分隔符，则编译器会把存储过程当成SQL语句进行处理，因此编译过程会报错，所以要先用“DELIMITER &#x2F;&#x2F;”声明当前段分隔符，让编译器把两个“&#x2F;&#x2F;“之间的内容当做存储过程的代码，不会执行这些代码，“DELIMITER ;”意为把分隔符还原</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>存储过程根据需要可能会有输入、输出、输入输出参数，如果有多个参数用“,”分隔开。MySQL存储过程的参数用在存储过程的定义，共有三种类型：IN、OUT、INOUT</p><ul><li>IN<br>  参数的值必须在调用存储过程前指定，在存储过程中修改该参数的值不能被返回<br>  即类似JAVA中的值传递，传递的相当于参数的值得拷贝，而不是参数本身</li><li>OUT<br>  该值可在存储过程内部被改变，并可返回，未在存储过程中赋值的话，则在存储过程中值为空<br>  即类似JAVA中的引用传递，传递的是该参数本身的地址，该参数在存储过程中被修改相当于直接修改该参数本身</li><li>INOUT<br>  具备IN、OUT的特性，在调用时指定，并可被改变和返回</li><li>过程体（PROCEDURE BODY）<br>  过程体的开始与结束使用<strong>BEGIN</strong>和<strong>END</strong>进行标识</li></ul><h3 id="IN示例"><a href="#IN示例" class="headerlink" title="IN示例"></a>IN示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE in_param(IN p_in int)</span><br><span class="line">-&gt; BEGIN</span><br><span class="line">-&gt; SELECT p_in;</span><br><span class="line">-&gt; SET p_in=2;</span><br><span class="line">-&gt; SELECT p_in;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SET @p_in=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL in_param(@p_in);</span><br><span class="line">+------+</span><br><span class="line">| p_in |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">+------+</span><br><span class="line">| p_in |</span><br><span class="line">+------+</span><br><span class="line">|    2 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @p_in;</span><br><span class="line">+-------+</span><br><span class="line">| @p_in |</span><br><span class="line">+-------+</span><br><span class="line">|     1 |</span><br><span class="line">+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>从运行结果可以得出，p_in虽然在存储过程中被修改了，但并不影响存储过程外的@p_in的值</p><h3 id="OUT示例"><a href="#OUT示例" class="headerlink" title="OUT示例"></a>OUT示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE out_param(OUT p_out int)</span><br><span class="line">-&gt; BEGIN</span><br><span class="line">-&gt; SELECT p_out;</span><br><span class="line">-&gt; SET p_out=2;</span><br><span class="line">-&gt; SELECT p_out;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line">mysql&gt; SET @p_out=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL out_param(@p_out);</span><br><span class="line">+-------+</span><br><span class="line">| p_out |</span><br><span class="line">+-------+</span><br><span class="line">|  NULL |</span><br><span class="line">+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">+-------+</span><br><span class="line">| p_out |</span><br><span class="line">+-------+</span><br><span class="line">|     2 |</span><br><span class="line">+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @p_out;</span><br><span class="line">+--------+</span><br><span class="line">| @p_out |</span><br><span class="line">+--------+</span><br><span class="line">|      2 |</span><br><span class="line">+--------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>从运行结果可以得出，p_out在存储过程中没被赋值的情况下是读取不到数据的，赋值后再存储过程外的@p_out的值也被修改了</p><h3 id="INOUT示例"><a href="#INOUT示例" class="headerlink" title="INOUT示例"></a>INOUT示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE inout_param(inout p_inout int)</span><br><span class="line">-&gt; BEGIN</span><br><span class="line">-&gt; SELECT p_inout;</span><br><span class="line">-&gt; SET p_inout=2;</span><br><span class="line">-&gt; SELECT p_inout;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line">mysql&gt; SET @p_inout=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL inout_param(@p_inout);</span><br><span class="line">+---------+</span><br><span class="line">| p_inout |</span><br><span class="line">+---------+</span><br><span class="line">|       1 |</span><br><span class="line">+---------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">+---------+</span><br><span class="line">| p_inout |</span><br><span class="line">+---------+</span><br><span class="line">|       2 |</span><br><span class="line">+---------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @p_inout;</span><br><span class="line">+----------+</span><br><span class="line">| @p_inout |</span><br><span class="line">+----------+</span><br><span class="line">|        2 |</span><br><span class="line">+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>从运行结果可以得出，inout参数结合了in和out的特点，传进去的参数既可以读取又可以修改</p><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><ul><li>语法<br>  <code>DROP PROCEDURE PROCEDURE_NAME;</code></li><li>Example  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP PROCEDURE p;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p><strong>DECLARE</strong>之前不能调用语句</p><ul><li>语法<br>  <code>DECLARE FIELD_NAME TYPE;</code></li><li>赋值<br>  <code>SET FIELD_NAME=VALUE; </code></li><li>实例  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE p()</span><br><span class="line">-&gt; BEGIN</span><br><span class="line">-&gt; DECLARE d INT;</span><br><span class="line">-&gt; SET @d=111;</span><br><span class="line">-&gt; SELECT @d;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line">mysql&gt; CALL p;</span><br><span class="line">+------+</span><br><span class="line">| @d   |</span><br><span class="line">+------+</span><br><span class="line">|  111 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL p();</span><br><span class="line">+------+</span><br><span class="line">| @d   |</span><br><span class="line">+------+</span><br><span class="line">|  111 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>数值类型（图片来自<a href="http://www.runoob.com/mysql/mysql-data-types.html">菜鸟教程</a>）<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204234234.png"></li><li>日期和时间类型（图片来自<a href="http://www.runoob.com/mysql/mysql-data-types.html">菜鸟教程</a>）<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204234244.png"></li><li>字符串类型（图片来自<a href="http://www.runoob.com/mysql/mysql-data-types.html">菜鸟教程</a>）<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200204234252.png"></li></ul><h2 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h2><p>用户变量一般以**@**开头，如果滥用用户变量会导致程序难以理解以及管理<br>实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户变量方式1</span></span><br><span class="line">mysql&gt; SELECT <span class="string">'HELLO WORLD!'</span> INTO @X;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @X;</span><br><span class="line">+--------------+</span><br><span class="line">| @X           |</span><br><span class="line">+--------------+</span><br><span class="line">| HELLO WORLD! |</span><br><span class="line">+--------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户变量方式2</span></span><br><span class="line">mysql&gt; SET @y=12;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @y;</span><br><span class="line">+------+</span><br><span class="line">| @y   |</span><br><span class="line">+------+</span><br><span class="line">|   12 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SET @y=1+2+3+4*5;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @y;</span><br><span class="line">+------+</span><br><span class="line">| @y   |</span><br><span class="line">+------+</span><br><span class="line">|   26 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>在存储过程中使用用户变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE p()</span><br><span class="line">-&gt; BEGIN</span><br><span class="line">-&gt; SELECT @global;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line">mysql&gt; SET @global=12345;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL p();</span><br><span class="line">+---------+</span><br><span class="line">| @global |</span><br><span class="line">+---------+</span><br><span class="line">|   12345 |</span><br><span class="line">+---------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="if…-then…-elseif…else"><a href="#if…-then…-elseif…else" class="headerlink" title="if…[then…]elseif…else"></a>if…[then…]elseif…else</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP PROCEDURE IF EXISTS pro_if;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE pro_if(IN <span class="built_in">type</span> INT) </span><br><span class="line">-&gt; BEGIN </span><br><span class="line">-&gt; DECLARE c VARCHAR(500); </span><br><span class="line">-&gt; IF <span class="built_in">type</span> = 0 THEN SET c = <span class="string">'PARAM IS 0'</span>; </span><br><span class="line">-&gt; ELSEIF <span class="built_in">type</span> = 1 THEN SET c = <span class="string">'PARAM IS 1'</span>; </span><br><span class="line">-&gt; ELSE SET c = <span class="string">'PARAM IS OTHERS'</span>; </span><br><span class="line">-&gt; END IF;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL pro_if(0);</span><br><span class="line">+------------+</span><br><span class="line">| c          |</span><br><span class="line">+------------+</span><br><span class="line">| PARAM IS 0 |</span><br><span class="line">+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL pro_if(1);</span><br><span class="line">+------------+</span><br><span class="line">| c          |</span><br><span class="line">+------------+</span><br><span class="line">| PARAM IS 1 |</span><br><span class="line">+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL pro_if(2);</span><br><span class="line">+-----------------+</span><br><span class="line">| c               |</span><br><span class="line">+-----------------+</span><br><span class="line">| PARAM IS OTHERS |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><h3 id="case…when"><a href="#case…when" class="headerlink" title="case…when"></a>case…when</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE proc_case(<span class="built_in">type</span> int)</span><br><span class="line">-&gt; BEGIN</span><br><span class="line">-&gt; DECLARE c VARCHAR(500);</span><br><span class="line">-&gt; <span class="keyword">case</span> <span class="built_in">type</span></span><br><span class="line">-&gt; WHEN 0 THEN SET c = <span class="string">'PARAM IS 0'</span>;</span><br><span class="line">-&gt; WHEN 1 THEN SET c = <span class="string">'PARAM IS 1'</span>;</span><br><span class="line">-&gt; WHEN 2 THEN SET c = <span class="string">'PARAM IS 2'</span>;</span><br><span class="line">-&gt; ELSE SET c = <span class="string">'PARAM IS OTHERS'</span>;</span><br><span class="line">-&gt; SELECT c;</span><br><span class="line">-&gt; END CASE;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL proc_case(0);</span><br><span class="line">+------------+</span><br><span class="line">| c          |</span><br><span class="line">+------------+</span><br><span class="line">| PARAM IS 0 |</span><br><span class="line">+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL proc_case(1);</span><br><span class="line">+------------+</span><br><span class="line">| c          |</span><br><span class="line">+------------+</span><br><span class="line">| PARAM IS 1 |</span><br><span class="line">+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL proc_case(2);</span><br><span class="line">+------------+</span><br><span class="line">| c          |</span><br><span class="line">+------------+</span><br><span class="line">| PARAM IS 2 |</span><br><span class="line">+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL proc_case(3);</span><br><span class="line">+-----------------+</span><br><span class="line">| c               |</span><br><span class="line">+-----------------+</span><br><span class="line">| PARAM IS OTHERS |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE proc_while(IN n INT)</span><br><span class="line">-&gt; BEGIN</span><br><span class="line">-&gt; DECLARE i INT;</span><br><span class="line">-&gt; DECLARE s INT;</span><br><span class="line">-&gt; SET i=0;</span><br><span class="line">-&gt; SET s=0;</span><br><span class="line">-&gt; WHILE i&lt;=n DO</span><br><span class="line">-&gt; SET s = s + i;</span><br><span class="line">-&gt; SET i = i + 1;</span><br><span class="line">-&gt; END WHILE;</span><br><span class="line">-&gt; SELECT s;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line">mysql&gt; CALL proc_while(2);</span><br><span class="line">+------+</span><br><span class="line">| s    |</span><br><span class="line">+------+</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL proc_while(12);</span><br><span class="line">+------+</span><br><span class="line">| s    |</span><br><span class="line">+------+</span><br><span class="line">|   78 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><h3 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP PROCEDURE IF EXISTS proc_loop;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE proc_loop(IN n INT)</span><br><span class="line">-&gt; BEGIN</span><br><span class="line">-&gt; DECLARE i INT;</span><br><span class="line">-&gt; DECLARE s INT;</span><br><span class="line">-&gt; SET i=0;</span><br><span class="line">-&gt; SET s=0;</span><br><span class="line">-&gt; LOOP_LABEL:LOOP</span><br><span class="line">-&gt; SET s = s + i;</span><br><span class="line">-&gt; SET i = i + 1;</span><br><span class="line">-&gt; IF i &gt; 10 THEN LEAVE LOOP_LABEL;</span><br><span class="line">-&gt; END IF;</span><br><span class="line">-&gt; END LOOP;</span><br><span class="line">-&gt; SELECT s;</span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line"></span><br><span class="line">mysql&gt; CALL proc_loop(2);</span><br><span class="line">+------+</span><br><span class="line">| s    |</span><br><span class="line">+------+</span><br><span class="line">|   55 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="repeat…end-repeat"><a href="#repeat…end-repeat" class="headerlink" title="repeat…end repeat"></a>repeat…end repeat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP PROCEDURE IF EXISTS proc_repeat;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE proc_repeat(IN n INT) </span><br><span class="line">-&gt; BEGIN </span><br><span class="line">-&gt; DECLARE i INT; </span><br><span class="line">-&gt; DECLARE s INT; </span><br><span class="line">-&gt; SET i=0; </span><br><span class="line">-&gt; SET s=0; </span><br><span class="line">-&gt; REPEAT </span><br><span class="line">-&gt; SET s = s + i; </span><br><span class="line">-&gt; SET i = i + 1; </span><br><span class="line">-&gt; UNTIL i&gt;10 </span><br><span class="line">-&gt; END REPEAT; </span><br><span class="line">-&gt; SELECT s; </span><br><span class="line">-&gt; END;</span><br><span class="line">-&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line">mysql&gt; CALL proc_repeat(2);</span><br><span class="line">+------+</span><br><span class="line">| s    |</span><br><span class="line">+------+</span><br><span class="line">|   55 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;There is recorded something of MySQL stored procedure.&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="http://smileorigin.site/categories/Database/"/>
    
    
    <category term="Notes" scheme="http://smileorigin.site/tags/Notes/"/>
    
    <category term="MySQL" scheme="http://smileorigin.site/tags/MySQL/"/>
    
    <category term="Procedure" scheme="http://smileorigin.site/tags/Procedure/"/>
    
  </entry>
  
  <entry>
    <title>PAT解题记录</title>
    <link href="http://smileorigin.site/arithmetic/pat/history/"/>
    <id>http://smileorigin.site/arithmetic/pat/history/</id>
    <published>2018-08-03T13:50:00.000Z</published>
    <updated>2020-06-20T07:40:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目来自<a href="https://pintia.cn/problem-sets/994805260223102976/problems">PAT网站</a>的 BasicLevel 题目<br>本文用来记录个人解答的PAT题目，仅供个人学习使用，未经允许不得转载，以下均为Python3解法</p><a id="more"></a><h2 id="1001-害死人不偿命的-3n-1-猜想-15"><a href="#1001-害死人不偿命的-3n-1-猜想-15" class="headerlink" title="1001 害死人不偿命的(3n+1)猜想 (15)"></a>1001 害死人不偿命的(3n+1)猜想 (15)</h2><p>卡拉兹(Callatz)猜想：<br>对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。这样一直反复砍下去，最后一定在某一步得到n&#x3D;1。卡拉兹在1950年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证(3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……<br>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过1000的正整数n，简单地数一下，需要多少步（砍几下）才能得到n&#x3D;1？<br><strong>输入格式：</strong>每个测试输入包含1个测试用例，即给出自然数n的值。<br><strong>输出格式：</strong>输出从n计算到1需要的步数。<br><strong>输入样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n)</span>:</span></span><br><span class="line">  step = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">    step += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">      n /= <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      n = (<span class="number">3</span> * n + <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> step</span><br><span class="line"></span><br><span class="line">test = int(input())</span><br><span class="line">print(solution(test))</span><br></pre></td></tr></table></figure><h2 id="1002-写出这个数-20"><a href="#1002-写出这个数-20" class="headerlink" title="1002 写出这个数 (20)"></a>1002 写出这个数 (20)</h2><p>读入一个自然数n，计算其各位数字之和，用汉语拼音写出和的每一位数字。<br><strong>输入格式：</strong>每个测试输入包含1个测试用例，即给出自然数n的值。这里保证n小于10^100^。<br><strong>输出格式：</strong>在一行内输出n的各位数字之和的每一位，拼音数字间有1 空格，但一行中最后一个拼音数字后没有空格。<br><strong>输入样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234567890987654321123456789</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yi <span class="keyword">san</span> <span class="keyword">wu</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n)</span>:</span></span><br><span class="line">  sum_str = str(sum(map(int, n)))</span><br><span class="line">  table = &#123;<span class="string">'0'</span>:<span class="string">'ling'</span>, <span class="string">'1'</span>:<span class="string">'yi'</span>, <span class="string">'2'</span>:<span class="string">'er'</span>, <span class="string">'3'</span>:<span class="string">'san'</span>, <span class="string">'4'</span>:<span class="string">'si'</span>, <span class="string">'5'</span>:<span class="string">'wu'</span>, <span class="string">'6'</span>:<span class="string">'liu'</span>, <span class="string">'7'</span>:<span class="string">'qi'</span>, <span class="string">'8'</span>:<span class="string">'ba'</span>, <span class="string">'9'</span>:<span class="string">'jiu'</span>&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">' '</span>.join([table[key] <span class="keyword">for</span> key <span class="keyword">in</span> sum_str])</span><br><span class="line"></span><br><span class="line">test = input()</span><br><span class="line">print(solution(test))</span><br></pre></td></tr></table></figure><h2 id="1004-成绩排名-20"><a href="#1004-成绩排名-20" class="headerlink" title="1004 成绩排名 (20)"></a>1004 成绩排名 (20)</h2><p>读入n名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。<br><strong>输入格式：</strong>每个测试输入包含1个测试用例，格式为:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第<span class="number">1</span>行：正整数n</span><br><span class="line">第<span class="number">2</span>行：第<span class="number">1</span>个学生的姓名 学号 成绩</span><br><span class="line">第<span class="number">3</span>行：第<span class="number">2</span>个学生的姓名 学号 成绩</span><br><span class="line">... ... ...</span><br><span class="line">第n+<span class="number">1</span>行：第n个学生的姓名 学号 成绩</span><br></pre></td></tr></table></figure><p>其中姓名和学号均为不超过10个字符的字符串，成绩为0到100之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。<br><strong>输出格式：</strong>对每个测试用例输出2行，第1行是成绩最高学生的姓名和学号，第2行是成绩最低学生的姓名和学号，字符串间有1空格。<br><strong>输入样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">Joe Math990112 <span class="number">89</span></span><br><span class="line">Mike CS991301 <span class="number">100</span></span><br><span class="line">Mary EE990830 <span class="number">95</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Mike</span> <span class="string">CS991301</span></span><br><span class="line"><span class="attr">Joe</span> <span class="string">Math990112</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(count, grades)</span>:</span></span><br><span class="line">  grades = sorted(grades, key=<span class="keyword">lambda</span> grade: int(grade[<span class="number">2</span>]), reverse=<span class="literal">True</span>)</span><br><span class="line">  print(<span class="string">'&#123;&#125; &#123;&#125;'</span>.format(grades[<span class="number">0</span>][<span class="number">0</span>], grades[<span class="number">0</span>][<span class="number">1</span>]))</span><br><span class="line">  print(<span class="string">'&#123;&#125; &#123;&#125;'</span>.format(grades[count<span class="number">-1</span>][<span class="number">0</span>], grades[count<span class="number">-1</span>][<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">count = int(input())</span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(count):</span><br><span class="line">  data.append(input().split(<span class="string">' '</span>))</span><br><span class="line">solution(count, data)</span><br></pre></td></tr></table></figure><h2 id="1006-换个格式输出整数-15"><a href="#1006-换个格式输出整数-15" class="headerlink" title="1006 换个格式输出整数 (15)"></a>1006 换个格式输出整数 (15)</h2><p>让我们用字母B来表示“百”、字母S表示“十”，用“12…n”来表示个位数字n（&amp;lt10），换个格式来输出任一个不超过3位的正整数。例如234应该被输出为BBSSS1234，因为它有2个“百”、3个“十”、以及个位的4。<br><strong>输入格式：</strong>每个测试输入包含1个测试用例，给出正整数n（&amp;lt1000）。<br><strong>输出格式：</strong>每个测试用例的输出占一行，用规定的格式输出n。<br><strong>输入样例1：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">234</span></span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BBSSS1234</span><br></pre></td></tr></table></figure><p><strong>输入样例2：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure><p><strong>输出样例2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SS123</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n)</span>:</span></span><br><span class="line">  nums = list(map(int, n))</span><br><span class="line">  nums = [<span class="number">0</span>] * (<span class="number">3</span> - len(nums)) + nums</span><br><span class="line">  print(<span class="string">'B'</span> * nums[<span class="number">0</span>] + <span class="string">'S'</span> * nums[<span class="number">1</span>] + <span class="string">''</span>.join([str(num) <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, nums[<span class="number">2</span>]+<span class="number">1</span>)]))</span><br><span class="line"></span><br><span class="line">test = input()</span><br><span class="line">solution(test)</span><br></pre></td></tr></table></figure><h2 id="1009-说反话-20"><a href="#1009-说反话-20" class="headerlink" title="1009 说反话 (20)"></a>1009 说反话 (20)</h2><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。<br><strong>输入格式：</strong>测试输入包含一个测试用例，在一行内给出总长度不超过80的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用1个空格分开，输入保证句子末尾没有多余的空格。<br><strong>输出格式：</strong>每个测试用例的输出占一行，输出倒序后的句子。<br><strong>输入样例：</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Hello World Here I Come</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Come I Here World Hello</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(english)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">' '</span>.join(english[::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">english = input().split()</span><br><span class="line">print(solution(english))</span><br></pre></td></tr></table></figure><h2 id="1010-一元多项式求导（25）"><a href="#1010-一元多项式求导（25）" class="headerlink" title="1010 一元多项式求导（25）"></a>1010 一元多项式求导（25）</h2><p>设计函数求一元多项式的导数。（注：xn（n为整数）的一阶导数为nxn−1。）<br><strong>输入格式:</strong><br>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。<br><strong>输出格式:</strong><br>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 <code>0 0</code>。<br><strong>输入样例:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">-5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">-2</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span> <span class="number">3</span> <span class="number">-10</span> <span class="number">1</span> <span class="number">6</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>Solution:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(nums)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(nums), <span class="number">2</span>):</span><br><span class="line">        coe, index = nums[i], nums[i+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        result.append(<span class="string">'&#123;&#125; &#123;&#125;'</span>.format(coe*index, index<span class="number">-1</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        result.append(<span class="string">'0 0'</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">nums = list(map(int, input().split()))</span><br><span class="line">print(<span class="string">' '</span>.join(solution(nums)))</span><br></pre></td></tr></table></figure><h2 id="1011-A-B和C-15"><a href="#1011-A-B和C-15" class="headerlink" title="1011 A+B和C (15)"></a>1011 A+B和C (15)</h2><p>给定区间[-2^31, 2^31]内的3个整数A、B和C，请判断A+B是否大于C。<br><strong>输入格式：</strong><br>输入第1行给出正整数T(&lt;&#x3D;10)，是测试用例的个数。随后给出T组测试用例，每组占一行，顺序给出A、B和C。整数间以空格分隔。<br>**输出格式：**<br>对每组测试用例，在一行中输出“Case #X: true”如果A+B&gt;C，否则输出“Case #X: false”，其中X是测试用例的编号（从1开始）。<br><strong>输入样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">2147483647 </span><span class="number">0</span> <span class="number">2147483646</span></span><br><span class="line"><span class="symbol">0 </span>-<span class="number">2147483648</span> -<span class="number">2147483647</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Case</span> <span class="string">#1</span>: <span class="literal">false</span></span><br><span class="line"><span class="keyword">Case</span> <span class="string">#2</span>: <span class="literal">true</span></span><br><span class="line"><span class="keyword">Case</span> <span class="string">#3</span>: <span class="literal">true</span></span><br><span class="line"><span class="keyword">Case</span> <span class="string">#4</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(abcs)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(abcs)):</span><br><span class="line">        print(<span class="string">'Case #&#123;&#125;: &#123;&#125;'</span>.format(i + <span class="number">1</span>, str(abcs[i][<span class="number">0</span>] + abcs[i][<span class="number">1</span>] &gt; abcs[i][<span class="number">2</span>]).lower()))</span><br><span class="line"></span><br><span class="line">count = int(input())</span><br><span class="line">abcs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(count):</span><br><span class="line">    abcs.append(list(map(int, input().split())))</span><br><span class="line">solution(abcs)</span><br></pre></td></tr></table></figure><h2 id="1012-数字分类-20"><a href="#1012-数字分类-20" class="headerlink" title="1012 数字分类 (20)"></a>1012 数字分类 (20)</h2><p>给定一系列正整数，请按要求对数字进行分类，并输出以下5个数字：<br>A1 &#x3D; 能被5整除的数字中所有偶数的和；<br>A2 &#x3D; 将被5除后余1的数字按给出顺序进行交错求和，即计算n1-n2+n3-n4…；<br>A3 &#x3D; 被5除后余2的数字的个数；<br>A4 &#x3D; 被5除后余3的数字的平均数，精确到小数点后1位；<br>A5 &#x3D; 被5除后余4的数字中最大数字。<br><strong>输入格式：</strong><br>每个输入包含1个测试用例。每个测试用例先给出一个不超过1000的正整数N，随后给出N个不超过1000的待分类的正整数。数字间以空格分隔。<br><strong>输出格式：</strong><br>对给定的N个正整数，按题目要求计算A1~A5并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。<br>若其中某一类数字不存在，则在相应位置输出“N”。<br><strong>输入样例1：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">20</span> <span class="number">16</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">30 </span><span class="number">11</span> <span class="number">2</span> <span class="number">9.7</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><p><strong>输入样例2：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">8 </span><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">9</span> <span class="number">16</span></span><br></pre></td></tr></table></figure><p><strong>输出样例2：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N <span class="number">11</span> <span class="number">2</span> N <span class="number">9</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(nums)</span>:</span></span><br><span class="line">    a1, a2, a3, a4, a5 = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, [], []</span><br><span class="line">    symbol, flag = <span class="number">1</span>, <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">        remainder = num % <span class="number">5</span></span><br><span class="line">        <span class="keyword">if</span> remainder == <span class="number">0</span> <span class="keyword">and</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            a1 += num</span><br><span class="line">        <span class="keyword">elif</span> remainder == <span class="number">1</span>:</span><br><span class="line">            a2 = a2 + symbol * num</span><br><span class="line">            symbol *= <span class="number">-1</span></span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> remainder == <span class="number">2</span>:</span><br><span class="line">            a3 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> remainder == <span class="number">3</span>:</span><br><span class="line">            a4.append(num)</span><br><span class="line">        <span class="keyword">elif</span> remainder == <span class="number">4</span>:</span><br><span class="line">            a5.append(num)</span><br><span class="line">    a1 = a1 <span class="keyword">if</span> a1 &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'N'</span></span><br><span class="line">    a2 = a2 <span class="keyword">if</span> flag &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'N'</span></span><br><span class="line">    a3 = a3 <span class="keyword">if</span> a3 &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'N'</span></span><br><span class="line">    a4 = round(sum(a4) / len(a4), <span class="number">1</span>) <span class="keyword">if</span> len(a4) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'N'</span></span><br><span class="line">    a5 = max(a5) <span class="keyword">if</span> len(a5) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'N'</span></span><br><span class="line">    print(a1, a2, a3, a4, a5)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nums = list(map(int, input().split()))</span><br><span class="line">solution(nums[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><h2 id="1017-A除以B（20）"><a href="#1017-A除以B（20）" class="headerlink" title="1017 A除以B（20）"></a>1017 A除以B（20）</h2><p>本题要求计算 A&#x2F;B，其中 A 是不超过 1000 位的正整数，B 是 1 位正整数。你需要输出商数 Q 和余数 R，使得 A&#x3D;B×Q+R 成立。<br><strong>输入格式:</strong><br>输入在一行中依次给出 A 和 B，中间以 1 空格分隔。<br><strong>输出格式：</strong><br>在一行中依次输出 Q 和 R，中间以 1 空格分隔。<br><strong>输入样例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123456789050987654321</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17636684150141093474</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>Solution:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    q = a // b</span><br><span class="line">    r = a % b</span><br><span class="line">    print(q, r)</span><br><span class="line"></span><br><span class="line">a, b = list(map(int, input().split()))</span><br><span class="line">solution(a, b)</span><br></pre></td></tr></table></figure><h2 id="1021-个位数统计-15"><a href="#1021-个位数统计-15" class="headerlink" title="1021 个位数统计 (15)"></a>1021 个位数统计 (15)</h2><p>给定一个k位整数N &#x3D; d<del>k-1</del>*10^k-1^ + … + d<del>1</del>*10^1^ + d<del>0</del> (0&lt;&#x3D;d<del>i</del>&lt;&#x3D;9, i&#x3D;0,…,k-1, d<del>k-1</del>&gt;0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定N &#x3D; 100311，则有2个0，3个1，和1个3。<br><strong>输入格式：</strong><br>每个输入包含1个测试用例，即一个不超过1000位的正整数N。<br><strong>输出格式：</strong><br>对N中每一种不同的个位数字，以D:M的格式在一行中输出该位数字D及其在N中出现的次数M。要求按D的升序输出。<br><strong>输入样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100311</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">2</span></span><br><span class="line"><span class="number">1</span>:<span class="number">3</span></span><br><span class="line"><span class="number">3</span>:<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(num)</span>:</span></span><br><span class="line">  result = &#123;&#125;</span><br><span class="line">  num = list(num)</span><br><span class="line">  num.sort()</span><br><span class="line">  <span class="keyword">for</span> key <span class="keyword">in</span> num:</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> result:</span><br><span class="line">      result[key] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      result[key] = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> k,v <span class="keyword">in</span> result.items():</span><br><span class="line">    print(<span class="string">'&#123;&#125;:&#123;&#125;'</span>.format(k,v))</span><br><span class="line">test = input()</span><br><span class="line">solution(test)</span><br></pre></td></tr></table></figure><h2 id="1023-组个最小数-20"><a href="#1023-组个最小数-20" class="headerlink" title="1023 组个最小数 (20)"></a>1023 组个最小数 (20)</h2><p>给定数字0-9各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意0不能做首位）。例如：给定两个0，两个1，三个5，一个8，我们得到的最小的数就是10015558。<br>现给定数字，请编写程序输出能够组成的最小的数。<br><strong>输入格式：</strong><br>每个输入包含1个测试用例。每个测试用例在一行中给出10个非负整数，顺序表示我们拥有数字0、数字1、……数字9的个数。整数间用一个空格分隔。10个数字的总个数不超过50，且至少拥有1个非0的数字。<br><strong>输出格式：</strong><br>在一行中输出能够组成的最小的数。<br><strong>输入样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10015558</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(counts)</span>:</span></span><br><span class="line">    result = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">      result += str(i) * counts[i]</span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">0</span>] + <span class="string">'0'</span> * counts[<span class="number">0</span>] + result[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">counts = list(map(int, input().split(<span class="string">' '</span>)))</span><br><span class="line">print(solution(counts))</span><br></pre></td></tr></table></figure><h2 id="1031-查验身份证-15"><a href="#1031-查验身份证-15" class="headerlink" title="1031 查验身份证(15)"></a>1031 查验身份证(15)</h2><p>一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：<br>首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值Z；最后按照以下关系对应Z值与校验码M的值：<br>Z：0 1 2 3 4 5 6 7 8 9 10\ M：1 0 X 9 8 7 6 5 4 3 2<br>现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。<br><strong>输入格式：</strong><br>输入第一行给出正整数N（&lt;&#x3D; 100）是输入的身份证号码的个数。随后N行，每行给出1个18位身份证号码。<br><strong>输出格式：</strong><br>按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出“All passed”。<br><strong>输入样例1：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">320124198808240056</span></span><br><span class="line"><span class="number">12010</span>X198901011234</span><br><span class="line"><span class="number">110108196711301866</span></span><br><span class="line"><span class="number">37070419881216001</span>X</span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12010</span>X198901011234</span><br><span class="line"><span class="number">110108196711301866</span></span><br><span class="line"><span class="number">37070419881216001</span>X</span><br></pre></td></tr></table></figure><p><strong>输入样例2：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">320124198808240056</span></span><br><span class="line"><span class="number">110108196711301862</span></span><br></pre></td></tr></table></figure><p><strong>输出样例2：</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">All</span> passed</span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(ids)</span>:</span></span><br><span class="line">  table = &#123;<span class="number">0</span>:<span class="string">'1'</span>, <span class="number">1</span>:<span class="string">'0'</span>, <span class="number">2</span>:<span class="string">'X'</span>, <span class="number">3</span>:<span class="string">'9'</span>, <span class="number">4</span>:<span class="string">'8'</span>, <span class="number">5</span>:<span class="string">'7'</span>, <span class="number">6</span>:<span class="string">'6'</span>, <span class="number">7</span>:<span class="string">'5'</span>, <span class="number">8</span>:<span class="string">'4'</span>, <span class="number">9</span>:<span class="string">'3'</span>, <span class="number">10</span>:<span class="string">'2'</span>&#125;</span><br><span class="line">  weight = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line">  flag = <span class="literal">True</span></span><br><span class="line">  <span class="keyword">for</span> id <span class="keyword">in</span> ids:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> id[:<span class="number">17</span>].isdigit():</span><br><span class="line">      print(id)</span><br><span class="line">      flag = <span class="literal">False</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    weight_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>):</span><br><span class="line">      weight_sum += int(id[i]) * weight[i]</span><br><span class="line">    <span class="keyword">if</span> table[weight_sum % <span class="number">11</span>] != id[<span class="number">17</span>]:</span><br><span class="line">      print(id)</span><br><span class="line">      flag = <span class="literal">False</span></span><br><span class="line">  <span class="keyword">if</span> (flag):</span><br><span class="line">    print(<span class="string">'All passed'</span>)</span><br><span class="line"></span><br><span class="line">count = int(input())</span><br><span class="line">data = [input() <span class="keyword">for</span> i <span class="keyword">in</span> range(count)]</span><br><span class="line">solution(data)</span><br></pre></td></tr></table></figure><h2 id="1037-在霍格沃茨找零钱（20）"><a href="#1037-在霍格沃茨找零钱（20）" class="headerlink" title="1037 在霍格沃茨找零钱（20）"></a>1037 在霍格沃茨找零钱（20）</h2><p>如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”现在，给定哈利应付的价钱P和他实付的钱A，你的任务是写一个程序来计算他应该被找的零钱。<br><strong>输入格式：</strong><br>输入在1行中分别给出P和A，格式为“Galleon.Sickle.Knut”，其间用1个空格分隔。这里Galleon是[0, 10^7^]区间内的整数，Sickle是[0, 17)区间内的整数，Knut是[0, 29)区间内的整数。<br><strong>输出格式：</strong><br>在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。<br><strong>输入样例1：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10.16</span><span class="number">.27</span> <span class="number">14.1</span><span class="number">.28</span></span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.2</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p><strong>输入样例2：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14.1</span><span class="number">.28</span> <span class="number">10.16</span><span class="number">.27</span></span><br></pre></td></tr></table></figure><p><strong>输出样例2：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-3.2</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(p, a)</span>:</span></span><br><span class="line">    <span class="comment"># 1*Galleon--&gt;17*Sickle  1*Sickle--&gt;29*Knut</span></span><br><span class="line">    <span class="comment"># Galleon Sickle Knut</span></span><br><span class="line">    p_knut = p[<span class="number">0</span>] * <span class="number">17</span> * <span class="number">29</span> + p[<span class="number">1</span>] * <span class="number">29</span> + p[<span class="number">2</span>]</span><br><span class="line">    a_knut = a[<span class="number">0</span>] * <span class="number">17</span> * <span class="number">29</span> + a[<span class="number">1</span>] * <span class="number">29</span> + a[<span class="number">2</span>]</span><br><span class="line">    change = a_knut - p_knut</span><br><span class="line">    symbol = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> change &lt; <span class="number">0</span>:</span><br><span class="line">        change = abs(change)</span><br><span class="line">        symbol = <span class="number">-1</span></span><br><span class="line">    change_galleon = change // (<span class="number">17</span> * <span class="number">29</span>)</span><br><span class="line">    change_sickle = change % (<span class="number">17</span> * <span class="number">29</span>) // <span class="number">29</span></span><br><span class="line">    change_kunt = change % <span class="number">29</span></span><br><span class="line">    print(<span class="string">'&#123;&#125;.&#123;&#125;.&#123;&#125;'</span>.format(change_galleon * symbol, change_sickle, change_kunt))</span><br><span class="line"></span><br><span class="line">pa = input().split()</span><br><span class="line">p = list(map(int, pa[<span class="number">0</span>].split(<span class="string">'.'</span>)))</span><br><span class="line">a = list(map(int, pa[<span class="number">1</span>].split(<span class="string">'.'</span>)))</span><br><span class="line">solution(p, a)</span><br></pre></td></tr></table></figure><h2 id="1038-统计同成绩学生-20"><a href="#1038-统计同成绩学生-20" class="headerlink" title="1038 统计同成绩学生(20)"></a>1038 统计同成绩学生(20)</h2><p>本题要求读入N名学生的成绩，将获得某一给定分数的学生人数输出。<br><strong>输入格式：</strong><br>输入在第1行给出不超过10^5^的正整数N，即学生总人数。随后1行给出N名学生的百分制整数成绩，中间以空格分隔。最后1行给出要查询的分数个数K（不超过N的正整数），随后是K个分数，中间以空格分隔。<br><strong>输出格式：</strong><br>在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。<br><strong>输入样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="symbol">60 </span><span class="number">75</span> <span class="number">90</span> <span class="number">55</span> <span class="number">75</span> <span class="number">99</span> <span class="number">82</span> <span class="number">90</span> <span class="number">75</span> <span class="number">50</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">75</span> <span class="number">90</span> <span class="number">88</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">2</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(grades, targets)</span>:</span></span><br><span class="line">    result = &#123;target:<span class="number">0</span> <span class="keyword">for</span> target <span class="keyword">in</span> targets&#125;</span><br><span class="line">    <span class="keyword">for</span> grade <span class="keyword">in</span> grades:</span><br><span class="line">        <span class="keyword">if</span> grade <span class="keyword">in</span> result:</span><br><span class="line">            result[grade] += <span class="number">1</span></span><br><span class="line">    print(<span class="string">' '</span>.join(map(str, [result[target] <span class="keyword">for</span> target <span class="keyword">in</span> targets])))</span><br><span class="line"></span><br><span class="line">input()</span><br><span class="line">grades = list(map(int, input().split()))</span><br><span class="line">targets = list(map(int, input().split()))</span><br><span class="line">solution(grades, targets[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><h2 id="1041-考试座位号-15"><a href="#1041-考试座位号-15" class="headerlink" title="1041 考试座位号(15)"></a>1041 考试座位号(15)</h2><p>每个PAT考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。<br><strong>输入格式：</strong><br>输入第一行给出一个正整数N（&lt;&#x3D;1000），随后N行，每行给出一个考生的信息：“准考证号 试机座位号 考试座位号”。其中准考证号由14位数字组成，座位从1到N编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。<br>考生信息之后，给出一个正整数M（&lt;&#x3D;N），随后一行中给出M个待查询的试机座位号码，以空格分隔。<br><strong>输出格式：</strong><br>对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用1个空格分隔。<br><strong>输入样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">10120150912233 </span><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">10120150912119 </span><span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">10120150912126 </span><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">10120150912002 </span><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">10120150912002 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">10120150912119 </span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(datas, targets)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> target <span class="keyword">in</span> targets:</span><br><span class="line">        <span class="keyword">if</span> target <span class="keyword">in</span> datas:</span><br><span class="line">            print(datas[target])</span><br><span class="line"></span><br><span class="line">n = int(input())</span><br><span class="line">datas = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    data = input().split()</span><br><span class="line">    datas[data[<span class="number">1</span>]] = data[<span class="number">0</span>] + <span class="string">' '</span> + data[<span class="number">2</span>]</span><br><span class="line">input()</span><br><span class="line">targets = input().split()</span><br><span class="line">solution(datas, targets)</span><br></pre></td></tr></table></figure><h2 id="1042-字符统计-20"><a href="#1042-字符统计-20" class="headerlink" title="1042 字符统计(20)"></a>1042 字符统计(20)</h2><p>请编写程序，找出一段给定文字中出现最频繁的那个英文字母。<br><strong>输入格式：</strong><br>输入在一行中给出一个长度不超过1000的字符串。字符串由ASCII码表中任意可见字符及空格组成，至少包含1个英文字母，以回车结束（回车不算在内）。<br><strong>输出格式：</strong><br>在一行中输出出现频率最高的那个英文字母及其出现次数，其间以空格分隔。如果有并列，则输出按字母序最小的那个字母。统计时不区分大小写，输出小写字母。<br><strong>输入样例：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a<span class="built_in"> simple </span>TEST.  There ARE numbers <span class="keyword">and</span> other symbols 1&amp;2&amp;3<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e <span class="number">7</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(chars)</span>:</span></span><br><span class="line">    statistical = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">        <span class="keyword">if</span> char.isalpha():</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">in</span> statistical:</span><br><span class="line">                statistical[char] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                statistical[char] = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 传到key的值为元组，如:('e', 7)</span></span><br><span class="line">    key = max(sorted(statistical.items()), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">    print(key[<span class="number">0</span>], key[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">chars = input().lower()</span><br><span class="line">solution(chars)</span><br></pre></td></tr></table></figure><h2 id="1046-划拳-15"><a href="#1046-划拳-15" class="headerlink" title="1046 划拳(15)"></a>1046 划拳(15)</h2><p>划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就赢了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。<br>下面给出甲、乙两人的划拳记录，请你统计他们最后分别喝了多少杯酒。<br><strong>输入格式：</strong><br>输入第一行先给出一个正整数N（&lt;&#x3D;100），随后N行，每行给出一轮划拳的记录，格式为：<br>甲喊 甲划 乙喊 乙划<br>其中“喊”是喊出的数字，“划”是划出的数字，均为不超过100的正整数（两只手一起划）。<br><strong>输出格式：</strong><br>在一行中先后输出甲、乙两人喝酒的杯数，其间以一个空格分隔。<br><strong>输入样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">8 </span><span class="number">10</span> <span class="number">9</span> <span class="number">12</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">10</span> <span class="number">5</span> <span class="number">10</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">8</span> <span class="number">5</span> <span class="number">12</span></span><br><span class="line"><span class="symbol">12 </span><span class="number">18</span> <span class="number">1</span> <span class="number">13</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">16</span> <span class="number">12</span> <span class="number">15</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(records)</span>:</span></span><br><span class="line">  first, second = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> record <span class="keyword">in</span> records:</span><br><span class="line">    <span class="comment"># 甲喊、乙喊、甲划、乙划</span></span><br><span class="line">    c1, c2, g1, g2 = record[<span class="number">0</span>], record[<span class="number">2</span>], record[<span class="number">1</span>], record[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">if</span> g1 == g2:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> c1 + c2 == g1:</span><br><span class="line">      second += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> c1 + c2 == g2:</span><br><span class="line">      first += <span class="number">1</span></span><br><span class="line">  print(first, second)</span><br><span class="line"></span><br><span class="line">n = int(input())</span><br><span class="line">records = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    records.append(list(map(int, input().split(<span class="string">' '</span>))))</span><br><span class="line">solution(records)</span><br></pre></td></tr></table></figure><h2 id="1047-编程团体赛-20"><a href="#1047-编程团体赛-20" class="headerlink" title="1047 编程团体赛(20)"></a>1047 编程团体赛(20)</h2><p>编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。<br>现给定所有队员的比赛成绩，请你编写程序找出冠军队。<br><strong>输入格式：</strong><br>输入第一行给出一个正整数N（&lt;&#x3D;10000），即所有参赛队员总数。随后N行，每行给出一位队员的成绩，格式为：“队伍编号-队员编号 成绩”，其中“队伍编号”为1到1000的正整数，“队员编号”为1到10的正整数，“成绩”为0到100的整数。<br><strong>输出格式：</strong><br>在一行中输出冠军队的编号和总成绩，其间以一个空格分隔。注意：题目保证冠军队是唯一的。<br><strong>输入样例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">3</span><span class="number">-10</span> <span class="number">99</span></span><br><span class="line"><span class="number">11</span><span class="number">-5</span> <span class="number">87</span></span><br><span class="line"><span class="number">102</span><span class="number">-1</span> <span class="number">0</span></span><br><span class="line"><span class="number">102</span><span class="number">-3</span> <span class="number">100</span></span><br><span class="line"><span class="number">11</span><span class="number">-9</span> <span class="number">89</span></span><br><span class="line"><span class="number">3</span><span class="number">-2</span> <span class="number">61</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">11 </span><span class="number">176</span></span><br></pre></td></tr></table></figure><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(scores)</span>:</span></span><br><span class="line">    statistical_scores = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> score <span class="keyword">in</span> scores:</span><br><span class="line">        <span class="keyword">if</span> score[<span class="number">0</span>] <span class="keyword">in</span> statistical_scores:</span><br><span class="line">            statistical_scores[score[<span class="number">0</span>]] += int(score[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            statistical_scores[score[<span class="number">0</span>]] = int(score[<span class="number">2</span>])</span><br><span class="line">    team_score = max(statistical_scores.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">    print(team_score[<span class="number">0</span>], team_score[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">n = int(input())</span><br><span class="line">scores = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    scores.append(input().replace(<span class="string">'-'</span>, <span class="string">' '</span>).split())</span><br><span class="line">solution(scores)</span><br></pre></td></tr></table></figure><h2 id="1053-住房空置率（20）"><a href="#1053-住房空置率（20）" class="headerlink" title="1053 住房空置率（20）"></a>1053 住房空置率（20）</h2><p>在不打扰居民的前提下，统计住房空置率的一种方法是根据每户用电量的连续变化规律进行判断。判断方法如下：</p><ul><li>在观察期内，若存在超过一半的日子用电量低于某给定的阈值 e，则该住房为“可能空置”；</li><li>若观察期超过某给定阈值 D 天，且满足上一个条件，则该住房为“空置”。<br>现给定某居民区的住户用电量数据，请你统计“可能空置”的比率和“空置”比率，即以上两种状态的住房占居民区住房总套数的百分比。<br><strong>输入格式</strong>：<br>输入第一行给出正整数 N（≤1000），为居民区住房总套数；正实数 e，即低电量阈值；正整数 D，即观察期阈值。随后 N 行，每行按以下格式给出一套住房的用电量数据：<br>K E1 E2 … EK<br>其中 K 为观察的天数，Ei 为第 i 天的用电量。<br><strong>输出格式</strong>：<br>在一行中输出“可能空置”的比率和“空置”比率的百分比值，其间以一个空格分隔，保留小数点后 1 位。<br><strong>输入样例</strong>：<figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">0.5</span> <span class="number">10</span></span><br><span class="line"><span class="symbol">6 </span><span class="number">0.3</span> <span class="number">0.4</span> <span class="number">0.5</span> <span class="number">0.2</span> <span class="number">0.8</span> <span class="number">0.6</span></span><br><span class="line"><span class="symbol">10 </span><span class="number">0.0</span> <span class="number">0.1</span> <span class="number">0.2</span> <span class="number">0.3</span> <span class="number">0.0</span> <span class="number">0.8</span> <span class="number">0.6</span> <span class="number">0.7</span> <span class="number">0.0</span> <span class="number">0.5</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">0.4</span> <span class="number">0.3</span> <span class="number">0.5</span> <span class="number">0.1</span> <span class="number">0.7</span></span><br><span class="line"><span class="symbol">11 </span><span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span></span><br><span class="line"><span class="symbol">11 </span><span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0.1</span> <span class="number">1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span></span><br></pre></td></tr></table></figure><strong>输出样例</strong>：<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">40.0</span>% <span class="number">20.0</span>%</span><br></pre></td></tr></table></figure>（样例解释：第2、3户为“可能空置”，第4户为“空置”，其他户不是空置。）<br><strong>Solution</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n, e, d, dates, consumptions)</span>:</span></span><br><span class="line">    count_maybe, count_must = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        consumption = consumptions[i]</span><br><span class="line">        <span class="keyword">if</span> len(list(filter(<span class="keyword">lambda</span> x: x &lt; e, consumption))) &gt; len(consumption) / <span class="number">2</span>:</span><br><span class="line">            count_maybe += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> dates[i] &gt; d:</span><br><span class="line">                count_must += <span class="number">1</span></span><br><span class="line">                count_maybe -= <span class="number">1</span></span><br><span class="line">    print(<span class="string">'&#123;&#125;% &#123;&#125;%'</span>.format(round(count_maybe / n * <span class="number">100</span>, <span class="number">1</span>), round(count_must / n * <span class="number">100</span>, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">n, e, d = input().split()</span><br><span class="line">n, e, d = int(n), float(e), int(d)</span><br><span class="line">dates, consumptions = [], []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    data = input().split()</span><br><span class="line">    dates.append(int(data[<span class="number">0</span>]))</span><br><span class="line">    consumptions.append(list(map(float, data[<span class="number">1</span>:])))</span><br><span class="line">solution(n, e, d, dates, consumptions)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目来自&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/problems&quot;&gt;PAT网站&lt;/a&gt;的 BasicLevel 题目&lt;br&gt;本文用来记录个人解答的PAT题目，仅供个人学习使用，未经允许不得转载，以下均为Python3解法&lt;/p&gt;</summary>
    
    
    
    <category term="Arithmetic" scheme="http://smileorigin.site/categories/Arithmetic/"/>
    
    
    <category term="Experience" scheme="http://smileorigin.site/tags/Experience/"/>
    
    <category term="Original" scheme="http://smileorigin.site/tags/Original/"/>
    
    <category term="PAT" scheme="http://smileorigin.site/tags/PAT/"/>
    
    <category term="BasicLevel" scheme="http://smileorigin.site/tags/BasicLevel/"/>
    
  </entry>
  
  <entry>
    <title>数据库三范式（笔记）</title>
    <link href="http://smileorigin.site/database/paradigm/"/>
    <id>http://smileorigin.site/database/paradigm/</id>
    <published>2018-08-03T09:58:00.000Z</published>
    <updated>2020-06-20T07:40:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容摘自<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/7309898?fr=aladdin">百度百科</a><br>用作个人笔记，便于查看，并非原创</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小</p><ul><li>第一范式（1NF）<br>  所谓的第一范式指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合、数组、记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式表中的每个域只能是实体的一个属性或一个属性的一部分。简而言之，第一范式就是无重复的域<br>  在任何一个关系型数据库中，第一范式是对关系模式设计基本要求，一般设计中都必须满足第一范式。不过有些关系模型中突破了第一范式的限制，这种称为非1NF的关系模型。换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的关系模型</li><li>第二范式（2NF）<br>  在第一范式的基础上，非码属性必须完全依赖于候选码（在第一范式基础上消除非主属性对主码的部分函数依赖）<br>  第二范式是在第一范式的基础上建立起来的，即满足第二范式必须先满足第一范式。第二范式要求数据库表中的每个实例或记录必须可以被唯一地区分。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。例如：在员工表中的身份证号码可以实现每个员工的区分，该身份证即为候选键，任何一个候选键都可以被选做主键。在找不到候选键时，可额外增加属性以实现区分，如果在员工关系中，没有对其身份证进行存储，而姓名可能会在数据库运行的某个时间重复，无法区分出实体时，设计譬如ID等不重复的编号以实现区分，被添加的编号或ID选做主键<br>  第二范式<strong>要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性</strong>，如果存在，那么这个属性和关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键</li><li>第三范式（3NF）<br>  在2NF基础上，<strong>任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</strong><br>  第三范式是第二范式的一个子集，即满足第三范式必须满足第二范式。简而言之，第三范式要求一个关系中不包含已在其它关系已包含的非主关键字信息。例如，存在一个部门信息表，其中每个部门有部门编号、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入到员工信息表中。如果不存在部门信息表，则根据第三范式也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性，也就是在满足第二范式的基础上，任何非主属性不得传递依赖于主属性</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>学生系统为例分析三范式的应用</p><h3 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h3><p>数据库表中的字段都是单一属性的，不可再分。这个单一属性由基本类型构成，包括整型、实数、字符型、逻辑型、日期型等。在当前的任何关系数据库管理系统（DBMS）中，傻瓜也不可能做出不符合第一范式的数据库，因为这些DBMS不允许你把数据库表的第一列再分为二列或多列。因此，你想在现有的DBMS中设计出不符合第一范式的数据库都是不可能的<br>首先我们确定要设计的内容包括哪些：学号、学生姓名、年龄、性别、课程名称、课程学分、系别、学科成绩、系办地址、系办电话等信息。为了简单我们暂时只考虑这些字段信息。我们对于这些信息，所关心的问题有如下几个方面</p><ul><li>学生有哪些基本信息？</li><li>学生选了哪些课，成绩是什么？</li><li>每个课的学分是多少？</li><li>学生属于哪个系，系的基本信息是什么？</li></ul><h3 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h3><p>第二范式（2NF）首先，我们考虑把所有这些信息放到一个表中（学号、学生姓名、年龄、性别、课程、课程学分、系别、学科成绩、系办地址、系办电话）下面存在如下的依赖关系<br>（学号， 课程名称） –&gt; （姓名， 年龄， 成绩， 学分）</p><ul><li>问题分析<br>  不满足第二范式的要求，会产生如下问题：</li><li>数据冗余<br>  同一门课程由n个学生选修，“学分”就重复n-1次；同一个学生选修了m门课程，姓名和年龄就重复了m-1次</li><li>更新异常<ol><li>若调整了某门课程的学分，数据表中所有行的“学分”值都要更新，否则会出现同一门课程学分不同的情况</li><li>假设要开设一门新的课程，暂时还没有人选修。这样，由于还没有“学号”关键字，课程名称和学分也无法记录入数据库</li></ol></li><li>删除异常<br>  假设一批学生已经完成课程的选修，这些选修记录就应该从数据库表中删除。但是，与此同时，课程名称和学分信息也被删除了。很显然，这也会导致插入异常</li><li>解决方案<br>  把选课关系表SelectCourse改为如下三个表：<ul><li>学生：Student（学号、 姓名、 年龄、 性别、 系办地址、 系办电话）</li><li>课程：Course（课程名称、 学分）</li><li>选课关系：SelectCourse（学号、 课程名称、 成绩）</li></ul></li></ul><h3 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h3><p>接着看上面的学生表Student（学号、 姓名、 年龄、 性别、 系别、 系办地址、 系办电话），关键字为单一关键字“学号”，因为存在如下决定关系：<br>（学号） –&gt; （姓名、 年龄、 性别、 系别、 系办地址、 系办电话）<br>但是还存在下面的决定关系：<br>（学号） –&gt; （系别） –&gt; （系办地点、 系办电话）<br>即存在非关键字段“系办电话”、 “系办电话”对关键字段“学号”的传递函数依赖<br>它也会存在数据冗余、更新异常、插入异常和删除异常的情况<br>根据第三范式把学生关系表分为如下两个表就可以满足第三范式：  </p><ul><li>学生：（学号、 姓名、 年龄、 性别、 系别）</li><li>系别：（系别、 系办地址、 系办电话）<br>上面的数据库表就是符合I、II、III范式的，消除了数据冗余、更新异常、插入异常和删除异常</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;以下内容摘自&lt;a href=&quot;https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/7309898?fr=aladdin&quot;&gt;百度百科&lt;/a&gt;&lt;br&gt;用作个人笔记，便于查看，并非原创&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="http://smileorigin.site/categories/Database/"/>
    
    
    <category term="SQL" scheme="http://smileorigin.site/tags/SQL/"/>
    
    <category term="Notes" scheme="http://smileorigin.site/tags/Notes/"/>
    
    <category term="NonOriginal" scheme="http://smileorigin.site/tags/NonOriginal/"/>
    
  </entry>
  
  <entry>
    <title>MySQL练习</title>
    <link href="http://smileorigin.site/database/mysql/pratices/"/>
    <id>http://smileorigin.site/database/mysql/pratices/</id>
    <published>2018-08-02T10:00:00.000Z</published>
    <updated>2020-06-20T07:40:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>There is recorded some MySQL pratices.</p><a id="more"></a><h2 id="数据库和数据准备"><a href="#数据库和数据准备" class="headerlink" title="数据库和数据准备"></a>数据库和数据准备</h2><ul><li>数据库建立<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> STUDENT</span><br><span class="line"> (</span><br><span class="line">SNO <span class="built_in">VARCHAR</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">SNAME <span class="built_in">VARCHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">SSEX <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">SBIRTHDAY DATETIME,</span><br><span class="line"><span class="keyword">CLASS</span> <span class="built_in">VARCHAR</span>(<span class="number">5</span>)</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> COURSE</span><br><span class="line"> (</span><br><span class="line">CNO <span class="built_in">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">CNAME <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TNO <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SCORE</span><br><span class="line"> (</span><br><span class="line">SNO <span class="built_in">VARCHAR</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">CNO <span class="built_in">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">DEGREE <span class="built_in">NUMERIC</span>(<span class="number">10</span>, <span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TEACHER</span><br><span class="line"> (</span><br><span class="line">TNO <span class="built_in">VARCHAR</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TNAME <span class="built_in">VARCHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, TSEX <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TBIRTHDAY DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>, PROF <span class="built_in">VARCHAR</span>(<span class="number">6</span>),</span><br><span class="line">DEPART <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"> );</span><br></pre></td></tr></table></figure></li><li>数据填充<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,<span class="keyword">CLASS</span>) <span class="keyword">VALUES</span> (<span class="number">108</span> ,<span class="string">'曾华'</span> ,<span class="string">'男'</span> ,<span class="string">'1977-09-01'</span>,<span class="number">95033</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,<span class="keyword">CLASS</span>) <span class="keyword">VALUES</span> (<span class="number">105</span> ,<span class="string">'匡明'</span> ,<span class="string">'男'</span> ,<span class="string">'1975-10-02'</span>,<span class="number">95031</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,<span class="keyword">CLASS</span>) <span class="keyword">VALUES</span> (<span class="number">107</span> ,<span class="string">'王丽'</span> ,<span class="string">'女'</span> ,<span class="string">'1976-01-23'</span>,<span class="number">95033</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,<span class="keyword">CLASS</span>) <span class="keyword">VALUES</span> (<span class="number">101</span> ,<span class="string">'李军'</span> ,<span class="string">'男'</span> ,<span class="string">'1976-02-20'</span>,<span class="number">95033</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,<span class="keyword">CLASS</span>) <span class="keyword">VALUES</span> (<span class="number">109</span> ,<span class="string">'王芳'</span> ,<span class="string">'女'</span> ,<span class="string">'1975-02-10'</span>,<span class="number">95031</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,<span class="keyword">CLASS</span>) <span class="keyword">VALUES</span> (<span class="number">103</span> ,<span class="string">'陆君'</span> ,<span class="string">'男'</span> ,<span class="string">'1974-06-03'</span>,<span class="number">95031</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> COURSE(CNO,CNAME,TNO)<span class="keyword">VALUES</span> (<span class="string">'3-105'</span> ,<span class="string">'计算机导论'</span>,<span class="number">825</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> COURSE(CNO,CNAME,TNO)<span class="keyword">VALUES</span> (<span class="string">'3-245'</span> ,<span class="string">'操作系统'</span> ,<span class="number">804</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> COURSE(CNO,CNAME,TNO)<span class="keyword">VALUES</span> (<span class="string">'6-166'</span> ,<span class="string">'数据电路'</span> ,<span class="number">856</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> COURSE(CNO,CNAME,TNO)<span class="keyword">VALUES</span> (<span class="string">'9-888'</span> ,<span class="string">'高等数学'</span> ,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">103</span>,<span class="string">'3-245'</span>,<span class="number">86</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">105</span>,<span class="string">'3-245'</span>,<span class="number">75</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">109</span>,<span class="string">'3-245'</span>,<span class="number">68</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">103</span>,<span class="string">'3-105'</span>,<span class="number">92</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">105</span>,<span class="string">'3-105'</span>,<span class="number">88</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">109</span>,<span class="string">'3-105'</span>,<span class="number">76</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">101</span>,<span class="string">'3-105'</span>,<span class="number">64</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">107</span>,<span class="string">'3-105'</span>,<span class="number">91</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">108</span>,<span class="string">'3-105'</span>,<span class="number">78</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">101</span>,<span class="string">'6-166'</span>,<span class="number">85</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">107</span>,<span class="string">'6-106'</span>,<span class="number">79</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SCORE(SNO,CNO,DEGREE)<span class="keyword">VALUES</span> (<span class="number">108</span>,<span class="string">'6-166'</span>,<span class="number">81</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TEACHER(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART) <span class="keyword">VALUES</span> (<span class="number">804</span>,<span class="string">'李诚'</span>,<span class="string">'男'</span>,<span class="string">'1958-12-02'</span>,<span class="string">'副教授'</span>,<span class="string">'计算机系'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TEACHER(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART) <span class="keyword">VALUES</span> (<span class="number">856</span>,<span class="string">'张旭'</span>,<span class="string">'男'</span>,<span class="string">'1969-03-12'</span>,<span class="string">'讲师'</span>,<span class="string">'电子工程系'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TEACHER(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART) <span class="keyword">VALUES</span> (<span class="number">825</span>,<span class="string">'王萍'</span>,<span class="string">'女'</span>,<span class="string">'1972-05-05'</span>,<span class="string">'助教'</span>,<span class="string">'计算机系'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TEACHER(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART) <span class="keyword">VALUES</span> (<span class="number">831</span>,<span class="string">'刘冰'</span>,<span class="string">'女'</span>,<span class="string">'1977-08-14'</span>,<span class="string">'助教'</span>,<span class="string">'电子工程系'</span>);</span><br></pre></td></tr></table></figure></li><li>数据填充完成<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM STUDENT;</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| SNO | SNAME  | SSEX | SBIRTHDAY           | CLASS |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| 108 | 曾华   | 男   | 1977-09-01 00:00:00 | 95033 |</span><br><span class="line">| 105 | 匡明   | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 107 | 王丽   | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 101 | 李军   | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 109 | 王芳   | 女   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 103 | 陆君   | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM COURSE;</span><br><span class="line">+-------+-----------------+-----+</span><br><span class="line">| CNO   | CNAME           | TNO |</span><br><span class="line">+-------+-----------------+-----+</span><br><span class="line">| 3-105 | 计算机导论      | 825 |</span><br><span class="line">| 3-245 | 操作系统        | 804 |</span><br><span class="line">| 6-166 | 数据电路        | 856 |</span><br><span class="line">| 9-888 | 高等数学        | 100 |</span><br><span class="line">+-------+-----------------+-----+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM SCORE;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| SNO | CNO   | DEGREE |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-245 |   86.0 |</span><br><span class="line">| 105 | 3-245 |   75.0 |</span><br><span class="line">| 109 | 3-245 |   68.0 |</span><br><span class="line">| 103 | 3-105 |   92.0 |</span><br><span class="line">| 105 | 3-105 |   88.0 |</span><br><span class="line">| 109 | 3-105 |   76.0 |</span><br><span class="line">| 101 | 3-105 |   64.0 |</span><br><span class="line">| 107 | 3-105 |   91.0 |</span><br><span class="line">| 108 | 3-105 |   78.0 |</span><br><span class="line">| 101 | 6-166 |   85.0 |</span><br><span class="line">| 107 | 6-106 |   79.0 |</span><br><span class="line">| 108 | 6-166 |   81.0 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">12 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM TEACHER;</span><br><span class="line">+-----+--------+------+---------------------+-----------+-----------------+</span><br><span class="line">| TNO | TNAME  | TSEX | TBIRTHDAY           | PROF      | DEPART          |</span><br><span class="line">+-----+--------+------+---------------------+-----------+-----------------+</span><br><span class="line">| 804 | 李诚   | 男   | 1958-12-02 00:00:00 | 副教授    | 计算机系        |</span><br><span class="line">| 856 | 张旭   | 男   | 1969-03-12 00:00:00 | 讲师      | 电子工程系      |</span><br><span class="line">| 825 | 王萍   | 女   | 1972-05-05 00:00:00 | 助教      | 计算机系        |</span><br><span class="line">| 831 | 刘冰   | 女   | 1977-08-14 00:00:00 | 助教      | 电子工程系      |</span><br><span class="line">+-----+--------+------+---------------------+-----------+-----------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="查询STUDENT表中的所有记录的SNAME、SSEX和CLASS列"><a href="#查询STUDENT表中的所有记录的SNAME、SSEX和CLASS列" class="headerlink" title="查询STUDENT表中的所有记录的SNAME、SSEX和CLASS列"></a>查询STUDENT表中的所有记录的SNAME、SSEX和CLASS列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT SNAME, SSEX, CLASS FROM STUDENT;</span><br><span class="line">+--------+------+-------+</span><br><span class="line">| SNAME  | SSEX | CLASS |</span><br><span class="line">+--------+------+-------+</span><br><span class="line">| 曾华   | 男   | 95033 |</span><br><span class="line">| 匡明   | 男   | 95031 |</span><br><span class="line">| 王丽   | 女   | 95033 |</span><br><span class="line">| 李军   | 男   | 95033 |</span><br><span class="line">| 王芳   | 女   | 95031 |</span><br><span class="line">| 陆君   | 男   | 95031 |</span><br><span class="line">+--------+------+-------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询教师所有的单位即不重复的DEPART列"><a href="#查询教师所有的单位即不重复的DEPART列" class="headerlink" title="查询教师所有的单位即不重复的DEPART列"></a>查询教师所有的单位即不重复的DEPART列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT DEPART FROM TEACHER GROUP BY DEPART;</span><br><span class="line">+-----------------+</span><br><span class="line">| DEPART          |</span><br><span class="line">+-----------------+</span><br><span class="line">| 电子工程系      |</span><br><span class="line">| 计算机系        |</span><br><span class="line">+-----------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询STUDENT表的所有记录"><a href="#查询STUDENT表的所有记录" class="headerlink" title="查询STUDENT表的所有记录"></a>查询STUDENT表的所有记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM STUDENT;</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| SNO | SNAME  | SSEX | SBIRTHDAY           | CLASS |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| 108 | 曾华   | 男   | 1977-09-01 00:00:00 | 95033 |</span><br><span class="line">| 105 | 匡明   | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 107 | 王丽   | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 101 | 李军   | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 109 | 王芳   | 女   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 103 | 陆君   | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询SCORE表中成绩在60到80之间的所有记录"><a href="#查询SCORE表中成绩在60到80之间的所有记录" class="headerlink" title="查询SCORE表中成绩在60到80之间的所有记录"></a>查询SCORE表中成绩在60到80之间的所有记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM SCORE WHERE DEGREE BETWEEN 60 AND 80;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| SNO | CNO   | DEGREE |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 105 | 3-245 |   75.0 |</span><br><span class="line">| 109 | 3-245 |   68.0 |</span><br><span class="line">| 109 | 3-105 |   76.0 |</span><br><span class="line">| 101 | 3-105 |   64.0 |</span><br><span class="line">| 108 | 3-105 |   78.0 |</span><br><span class="line">| 107 | 6-106 |   79.0 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询SCORE表中成绩为85，86或88的记录"><a href="#查询SCORE表中成绩为85，86或88的记录" class="headerlink" title="查询SCORE表中成绩为85，86或88的记录"></a>查询SCORE表中成绩为85，86或88的记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM SCORE WHERE DEGREE IN(85, 86, 88);</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| SNO | CNO   | DEGREE |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-245 |   86.0 |</span><br><span class="line">| 105 | 3-105 |   88.0 |</span><br><span class="line">| 101 | 6-166 |   85.0 |</span><br><span class="line">+-----+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="查询STUDENT表中“95031”班或性别为“女”的同学记录"><a href="#查询STUDENT表中“95031”班或性别为“女”的同学记录" class="headerlink" title="查询STUDENT表中“95031”班或性别为“女”的同学记录"></a>查询STUDENT表中“95031”班或性别为“女”的同学记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM STUDENT WHERE CLASS=<span class="string">'95031'</span> OR SSEX=<span class="string">'女'</span>;</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| SNO | SNAME  | SSEX | SBIRTHDAY           | CLASS |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| 105 | 匡明   | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 107 | 王丽   | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 109 | 王芳   | 女   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 103 | 陆君   | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="以CLASS降序查询STUDENT表的所有记录"><a href="#以CLASS降序查询STUDENT表的所有记录" class="headerlink" title="以CLASS降序查询STUDENT表的所有记录"></a>以CLASS降序查询STUDENT表的所有记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM STUDENT ORDER BY CLASS DESC;</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| SNO | SNAME  | SSEX | SBIRTHDAY           | CLASS |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| 108 | 曾华   | 男   | 1977-09-01 00:00:00 | 95033 |</span><br><span class="line">| 107 | 王丽   | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 101 | 李军   | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 105 | 匡明   | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 109 | 王芳   | 女   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 103 | 陆君   | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="以CNO升序、DEGREE降序查询SCORE表的所有记录"><a href="#以CNO升序、DEGREE降序查询SCORE表的所有记录" class="headerlink" title="以CNO升序、DEGREE降序查询SCORE表的所有记录"></a>以CNO升序、DEGREE降序查询SCORE表的所有记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM SCORE ORDER BY CNO, DEGREE DESC;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| SNO | CNO   | DEGREE |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-105 |   92.0 |</span><br><span class="line">| 107 | 3-105 |   91.0 |</span><br><span class="line">| 105 | 3-105 |   88.0 |</span><br><span class="line">| 108 | 3-105 |   78.0 |</span><br><span class="line">| 109 | 3-105 |   76.0 |</span><br><span class="line">| 101 | 3-105 |   64.0 |</span><br><span class="line">| 103 | 3-245 |   86.0 |</span><br><span class="line">| 105 | 3-245 |   75.0 |</span><br><span class="line">| 109 | 3-245 |   68.0 |</span><br><span class="line">| 107 | 6-106 |   79.0 |</span><br><span class="line">| 101 | 6-166 |   85.0 |</span><br><span class="line">| 108 | 6-166 |   81.0 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">12 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询“95031”班的学生人数"><a href="#查询“95031”班的学生人数" class="headerlink" title="查询“95031”班的学生人数"></a>查询“95031”班的学生人数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(*) FROM STUDENT WHERE CLASS=<span class="string">'95031'</span>;</span><br><span class="line">+----------+</span><br><span class="line">| COUNT(*) |</span><br><span class="line">+----------+</span><br><span class="line">|        3 |</span><br><span class="line">+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询SCORE表中的最高分的学生学号和课程号"><a href="#查询SCORE表中的最高分的学生学号和课程号" class="headerlink" title="查询SCORE表中的最高分的学生学号和课程号"></a>查询SCORE表中的最高分的学生学号和课程号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT SNO, CNO FROM SCORE WHERE DEGREE IN (SELECT MAX(DEGREE) FROM SCORE);</span><br><span class="line">+-----+-------+</span><br><span class="line">| SNO | CNO   |</span><br><span class="line">+-----+-------+</span><br><span class="line">| 103 | 3-105 |</span><br><span class="line">+-----+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询‘3-105’号课程的平均分"><a href="#查询‘3-105’号课程的平均分" class="headerlink" title="查询‘3-105’号课程的平均分"></a>查询‘3-105’号课程的平均分</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT AVG(DEGREE) FROM SCORE WHERE CNO=<span class="string">'3-105'</span>;</span><br><span class="line">+-------------+</span><br><span class="line">| AVG(DEGREE) |</span><br><span class="line">+-------------+</span><br><span class="line">|    81.50000 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询SCORE表中至少有2名学生选修的并以3开头的课程的平均分数"><a href="#查询SCORE表中至少有2名学生选修的并以3开头的课程的平均分数" class="headerlink" title="查询SCORE表中至少有2名学生选修的并以3开头的课程的平均分数"></a>查询SCORE表中至少有2名学生选修的并以3开头的课程的平均分数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT AVG(DEGREE) FROM SCORE GROUP BY CNO HAVING COUNT(CNO)&gt;1 AND CNO LIKE <span class="string">'3%'</span>;</span><br><span class="line">+-------------+</span><br><span class="line">| AVG(DEGREE) |</span><br><span class="line">+-------------+</span><br><span class="line">|    81.50000 |</span><br><span class="line">|    76.33333 |</span><br><span class="line">+-------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询最低分大于70，最高分小于90的SNO列"><a href="#查询最低分大于70，最高分小于90的SNO列" class="headerlink" title="查询最低分大于70，最高分小于90的SNO列"></a>查询最低分大于70，最高分小于90的SNO列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT SNO FROM SCORE GROUP BY SNO HAVING MIN(DEGREE)&gt;70 AND MAX(DEGREE)&lt;90;</span><br><span class="line">+-----+</span><br><span class="line">| SNO |</span><br><span class="line">+-----+</span><br><span class="line">| 105 |</span><br><span class="line">| 108 |</span><br><span class="line">+-----+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询所有学生的SNAME、CNO和DEGREE列"><a href="#查询所有学生的SNAME、CNO和DEGREE列" class="headerlink" title="查询所有学生的SNAME、CNO和DEGREE列"></a>查询所有学生的SNAME、CNO和DEGREE列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT A.SNAME, B.CNO, B.DEGREE FROM STUDENT A, SCORE B WHERE A.SNO=B.SNO;</span><br><span class="line">+--------+-------+--------+</span><br><span class="line">| SNAME  | CNO   | DEGREE |</span><br><span class="line">+--------+-------+--------+</span><br><span class="line">| 陆君   | 3-245 |   86.0 |</span><br><span class="line">| 匡明   | 3-245 |   75.0 |</span><br><span class="line">| 王芳   | 3-245 |   68.0 |</span><br><span class="line">| 陆君   | 3-105 |   92.0 |</span><br><span class="line">| 匡明   | 3-105 |   88.0 |</span><br><span class="line">| 王芳   | 3-105 |   76.0 |</span><br><span class="line">| 李军   | 3-105 |   64.0 |</span><br><span class="line">| 王丽   | 3-105 |   91.0 |</span><br><span class="line">| 曾华   | 3-105 |   78.0 |</span><br><span class="line">| 李军   | 6-166 |   85.0 |</span><br><span class="line">| 王丽   | 6-106 |   79.0 |</span><br><span class="line">| 曾华   | 6-166 |   81.0 |</span><br><span class="line">+--------+-------+--------+</span><br><span class="line">12 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"><span class="comment"># 解法二使用内连接</span></span><br><span class="line">mysql&gt; SELECT STUDENT.SNAME, SCORE.CNO, SCORE.DEGREE FROM STUDENT INNER JOIN SCORE ON STUDENT.SNO=SCORE.SNO;</span><br><span class="line">+--------+-------+--------+</span><br><span class="line">| SNAME  | CNO   | DEGREE |</span><br><span class="line">+--------+-------+--------+</span><br><span class="line">| 陆君   | 3-245 |   86.0 |</span><br><span class="line">| 匡明   | 3-245 |   75.0 |</span><br><span class="line">| 王芳   | 3-245 |   68.0 |</span><br><span class="line">| 陆君   | 3-105 |   92.0 |</span><br><span class="line">| 匡明   | 3-105 |   88.0 |</span><br><span class="line">| 王芳   | 3-105 |   76.0 |</span><br><span class="line">| 李军   | 3-105 |   64.0 |</span><br><span class="line">| 王丽   | 3-105 |   91.0 |</span><br><span class="line">| 曾华   | 3-105 |   78.0 |</span><br><span class="line">| 李军   | 6-166 |   85.0 |</span><br><span class="line">| 王丽   | 6-106 |   79.0 |</span><br><span class="line">| 曾华   | 6-166 |   81.0 |</span><br><span class="line">+--------+-------+--------+</span><br><span class="line">12 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询所有学生的SNO、CNAME和DEGREE列"><a href="#查询所有学生的SNO、CNAME和DEGREE列" class="headerlink" title="查询所有学生的SNO、CNAME和DEGREE列"></a>查询所有学生的SNO、CNAME和DEGREE列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT A.SNO, B.CNAME, A.DEGREE FROM SCORE A, COURSE B WHERE A.CNO=B.CNO;</span><br><span class="line">+-----+-----------------+--------+</span><br><span class="line">| SNO | CNAME           | DEGREE |</span><br><span class="line">+-----+-----------------+--------+</span><br><span class="line">| 103 | 操作系统        |   86.0 |</span><br><span class="line">| 105 | 操作系统        |   75.0 |</span><br><span class="line">| 109 | 操作系统        |   68.0 |</span><br><span class="line">| 103 | 计算机导论      |   92.0 |</span><br><span class="line">| 105 | 计算机导论      |   88.0 |</span><br><span class="line">| 109 | 计算机导论      |   76.0 |</span><br><span class="line">| 101 | 计算机导论      |   64.0 |</span><br><span class="line">| 107 | 计算机导论      |   91.0 |</span><br><span class="line">| 108 | 计算机导论      |   78.0 |</span><br><span class="line">| 101 | 数据电路        |   85.0 |</span><br><span class="line">| 108 | 数据电路        |   81.0 |</span><br><span class="line">+-----+-----------------+--------+</span><br><span class="line">11 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解法二使用内连接</span></span><br><span class="line">mysql&gt; SELECT A.SNO, C.CNAME, B.DEGREE FROM STUDENT A INNER JOIN SCORE B INNER JOIN COURSE C ON A.SNO=B.SNO AND B.CNO=C.CNO;</span><br><span class="line">+-----+-----------------+--------+</span><br><span class="line">| SNO | CNAME           | DEGREE |</span><br><span class="line">+-----+-----------------+--------+</span><br><span class="line">| 108 | 计算机导论      |   78.0 |</span><br><span class="line">| 108 | 数据电路        |   81.0 |</span><br><span class="line">| 105 | 操作系统        |   75.0 |</span><br><span class="line">| 105 | 计算机导论      |   88.0 |</span><br><span class="line">| 107 | 计算机导论      |   91.0 |</span><br><span class="line">| 101 | 计算机导论      |   64.0 |</span><br><span class="line">| 101 | 数据电路        |   85.0 |</span><br><span class="line">| 109 | 操作系统        |   68.0 |</span><br><span class="line">| 109 | 计算机导论      |   76.0 |</span><br><span class="line">| 103 | 操作系统        |   86.0 |</span><br><span class="line">| 103 | 计算机导论      |   92.0 |</span><br><span class="line">+-----+-----------------+--------+</span><br><span class="line">11 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询所有学生的SNAME、CNAME和DEGREE列"><a href="#查询所有学生的SNAME、CNAME和DEGREE列" class="headerlink" title="查询所有学生的SNAME、CNAME和DEGREE列"></a>查询所有学生的SNAME、CNAME和DEGREE列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT A.SNAME, B.CNAME, C.DEGREE FROM STUDENT A, COURSE B, SCORE C WHERE A.SNO=C.SNO AND B.CNO=C.CNO;</span><br><span class="line">+--------+-----------------+--------+</span><br><span class="line">| SNAME  | CNAME           | DEGREE |</span><br><span class="line">+--------+-----------------+--------+</span><br><span class="line">| 曾华   | 计算机导论      |   78.0 |</span><br><span class="line">| 曾华   | 数据电路        |   81.0 |</span><br><span class="line">| 匡明   | 操作系统        |   75.0 |</span><br><span class="line">| 匡明   | 计算机导论      |   88.0 |</span><br><span class="line">| 王丽   | 计算机导论      |   91.0 |</span><br><span class="line">| 李军   | 计算机导论      |   64.0 |</span><br><span class="line">| 李军   | 数据电路        |   85.0 |</span><br><span class="line">| 王芳   | 操作系统        |   68.0 |</span><br><span class="line">| 王芳   | 计算机导论      |   76.0 |</span><br><span class="line">| 陆君   | 操作系统        |   86.0 |</span><br><span class="line">| 陆君   | 计算机导论      |   92.0 |</span><br><span class="line">+--------+-----------------+--------+</span><br><span class="line">11 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解法二内连接</span></span><br><span class="line">mysql&gt; SELECT STUDENT.SNAME, COURSE.CNAME, SCORE.DEGREE FROM STUDENT INNER JOIN SCORE INNER JOIN COURSE ON STUDENT.SNO=SCORE.SNO AND SCORE.CNO=COURSE.CNO;</span><br><span class="line">+--------+-----------------+--------+</span><br><span class="line">| SNAME  | CNAME           | DEGREE |</span><br><span class="line">+--------+-----------------+--------+</span><br><span class="line">| 曾华   | 计算机导论      |   78.0 |</span><br><span class="line">| 曾华   | 数据电路        |   81.0 |</span><br><span class="line">| 匡明   | 操作系统        |   75.0 |</span><br><span class="line">| 匡明   | 计算机导论      |   88.0 |</span><br><span class="line">| 王丽   | 计算机导论      |   91.0 |</span><br><span class="line">| 李军   | 计算机导论      |   64.0 |</span><br><span class="line">| 李军   | 数据电路        |   85.0 |</span><br><span class="line">| 王芳   | 操作系统        |   68.0 |</span><br><span class="line">| 王芳   | 计算机导论      |   76.0 |</span><br><span class="line">| 陆君   | 操作系统        |   86.0 |</span><br><span class="line">| 陆君   | 计算机导论      |   92.0 |</span><br><span class="line">+--------+-----------------+--------+</span><br><span class="line">11 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查询“95033”班所选课程的平均分"><a href="#查询“95033”班所选课程的平均分" class="headerlink" title="查询“95033”班所选课程的平均分"></a>查询“95033”班所选课程的平均分</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT AVG(DEGREE) FROM SCORE INNER JOIN STUDENT S ON S.CLASS=<span class="string">'95033'</span>;</span><br><span class="line">+-------------+</span><br><span class="line">| AVG(DEGREE) |</span><br><span class="line">+-------------+</span><br><span class="line">|    80.25000 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解法二</span></span><br><span class="line">mysql&gt; mysql&gt; SELECT AVG(DEGREE) FRO WHERE SNO IN(SELECT SNO FROM STUDENT WHERE CLASS=<span class="string">'95033'</span>);</span><br><span class="line">+-------------+</span><br><span class="line">| AVG(DEGREE) |</span><br><span class="line">+-------------+</span><br><span class="line">|    79.66667 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="假设使用如下命令建立了一个grade表"><a href="#假设使用如下命令建立了一个grade表" class="headerlink" title="假设使用如下命令建立了一个grade表"></a>假设使用如下命令建立了一个grade表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE grade(low int,upp int,rank char(1));</span><br><span class="line">INSERT INTO grade VALUES(90,100,<span class="string">'A'</span>);</span><br><span class="line">INSERT INTO grade VALUES(80,89,<span class="string">'B'</span>);</span><br><span class="line">INSERT INTO grade VALUES(70,79,<span class="string">'C'</span>);</span><br><span class="line">INSERT INTO grade VALUES(60,69,<span class="string">'D'</span>);</span><br><span class="line">INSERT INTO grade VALUES(0,59,<span class="string">'E'</span>);</span><br></pre></td></tr></table></figure><ul><li><p>查询所有同学的SNO、CNO和rank列</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT A.SNO, A.CNO, B.rank FROM SCORE A, grade B WHERE A.DEGREE BETWEEN low and upp;</span><br><span class="line">+-----+-------+------+</span><br><span class="line">| SNO | CNO   | rank |</span><br><span class="line">+-----+-------+------+</span><br><span class="line">| 103 | 3-245 | B    |</span><br><span class="line">| 105 | 3-245 | C    |</span><br><span class="line">| 109 | 3-245 | D    |</span><br><span class="line">| 103 | 3-105 | A    |</span><br><span class="line">| 105 | 3-105 | B    |</span><br><span class="line">| 109 | 3-105 | C    |</span><br><span class="line">| 101 | 3-105 | D    |</span><br><span class="line">| 107 | 3-105 | A    |</span><br><span class="line">| 108 | 3-105 | C    |</span><br><span class="line">| 101 | 6-166 | B    |</span><br><span class="line">| 107 | 6-106 | C    |</span><br><span class="line">| 108 | 6-166 | B    |</span><br><span class="line">+-----+-------+------+</span><br><span class="line">12 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>查询选修“3-105”课程的成绩高于“109”号同学成绩的所有同学的记录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM STUDENT WHERE SNO IN (SELECT SNO FROM SCORE WHERE CNO=<span class="string">'3-105'</span> AND DEGREE&gt;(SELECT DEGREE FROM SCORE WHERE SNO=<span class="string">'109'</span> AND CNO=<span class="string">'3-105'</span>));</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| SNO | SNAME  | SSEX | SBIRTHDAY           | CLASS |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| 103 | 陆君   | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">| 105 | 匡明   | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 107 | 王丽   | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 108 | 曾华   | 男   | 1977-09-01 00:00:00 | 95033 |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>查询”95033”班和”95031”班全体学生的记录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM STUDENT WHERE CLASS IN(<span class="string">'95033'</span>, <span class="string">'95031'</span>);</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| SNO | SNAME  | SSEX | SBIRTHDAY           | CLASS |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">| 108 | 曾华   | 男   | 1977-09-01 00:00:00 | 95033 |</span><br><span class="line">| 105 | 匡明   | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 107 | 王丽   | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 101 | 李军   | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 109 | 王芳   | 女   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 103 | 陆君   | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">+-----+--------+------+---------------------+-------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>查询存在有85分以上成绩的课程CNO</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT CNO FROM SCORE GROUP BY CNO HAVING CNO IN (SELECT CNO FROM SCORE WHERE DEGREE&gt;85);</span><br><span class="line">+-------+</span><br><span class="line">| CNO   |</span><br><span class="line">+-------+</span><br><span class="line">| 3-105 |</span><br><span class="line">| 3-245 |</span><br><span class="line">+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>查询出“计算机系“教师所教课程的成绩表</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM SCORE WHERE CNO IN(SELECT CNO FROM COURSE WHERE TNO IN(SELECT TNO FROM TEACHER WHERE DEPART=<span class="string">'计算机系'</span>));</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| SNO | CNO   | DEGREE |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-245 |   86.0 |</span><br><span class="line">| 105 | 3-245 |   75.0 |</span><br><span class="line">| 109 | 3-245 |   68.0 |</span><br><span class="line">| 103 | 3-105 |   92.0 |</span><br><span class="line">| 105 | 3-105 |   88.0 |</span><br><span class="line">| 109 | 3-105 |   76.0 |</span><br><span class="line">| 101 | 3-105 |   64.0 |</span><br><span class="line">| 107 | 3-105 |   91.0 |</span><br><span class="line">| 108 | 3-105 |   78.0 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">9 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"><span class="comment"># 解法二</span></span><br><span class="line">mysql&gt; SELECT * FROM SCORE WHERE CNO IN(SELECT C.CNO FROM TEACHER T, COURSE C WHERE T.DEPART=<span class="string">'计算机系'</span> AND T.TNO=C.TNO);</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| SNO | CNO   | DEGREE |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-245 |   86.0 |</span><br><span class="line">| 105 | 3-245 |   75.0 |</span><br><span class="line">| 109 | 3-245 |   68.0 |</span><br><span class="line">| 103 | 3-105 |   92.0 |</span><br><span class="line">| 105 | 3-105 |   88.0 |</span><br><span class="line">| 109 | 3-105 |   76.0 |</span><br><span class="line">| 101 | 3-105 |   64.0 |</span><br><span class="line">| 107 | 3-105 |   91.0 |</span><br><span class="line">| 108 | 3-105 |   78.0 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">9 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;There is recorded some MySQL pratices.&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="http://smileorigin.site/categories/Database/"/>
    
    
    <category term="Notes" scheme="http://smileorigin.site/tags/Notes/"/>
    
    <category term="MySQL" scheme="http://smileorigin.site/tags/MySQL/"/>
    
    <category term="Pratices" scheme="http://smileorigin.site/tags/Pratices/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 多表操作</title>
    <link href="http://smileorigin.site/database/mysql/multi-table-operation/"/>
    <id>http://smileorigin.site/database/mysql/multi-table-operation/</id>
    <published>2018-08-02T02:00:00.000Z</published>
    <updated>2020-06-20T07:40:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>There is recorded some MySQL multilist operation.</p><a id="more"></a><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><ul><li><p>使用别名进行多表查询</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select t1.* from t_user t1, t_deptment t2 where t1.id &#x3D; t2.id;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | sex  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | u1   | a    |</span><br><span class="line">|  2 | u2   | b    |</span><br><span class="line">|  3 | u3   | c    |</span><br><span class="line">+----+------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select t1.id,t1.name, t2.id,t2.name from</span><br><span class="line">    -&gt; t_user t1, t_deptment t2</span><br><span class="line">    -&gt; where t1.id &#x3D; t2.id</span><br><span class="line">    -&gt; and t2.id &#x3D; 2;</span><br><span class="line">+----+------+----+------+</span><br><span class="line">| id | name | id | name |</span><br><span class="line">+----+------+----+------+</span><br><span class="line">|  2 | u2   |  2 | bb   |</span><br><span class="line">+----+------+----+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>如果在GROUP BY后接WHERE的话会报错，GROUP BY后不能接WHERE子句，但是可以接HAVING子句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select id from t_user group by id where id &gt; 2;</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;where id &gt; 2&#39; at line 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select id from t_user group by id having id &gt; 2;</span><br><span class="line">+----+</span><br><span class="line">| id |</span><br><span class="line">+----+</span><br><span class="line">|  3 |</span><br><span class="line">|  4 |</span><br><span class="line">+----+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h2><p>多表连接记得使用条件判断取出拥有相同条件的多表的数据，否则会出现重复的数据<br>多个表使用多个<code>inner join</code>连接<br>要查询的表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1;</span><br><span class="line">+----+------+</span><br><span class="line">| c1 | c2   |</span><br><span class="line">+----+------+</span><br><span class="line">| a  | b    |</span><br><span class="line">| b  | c    |</span><br><span class="line">| c  | d    |</span><br><span class="line">+----+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t2;</span><br><span class="line">+----+------+</span><br><span class="line">| c3 | c4   |</span><br><span class="line">+----+------+</span><br><span class="line">| b  | d    |</span><br><span class="line">| c  | f    |</span><br><span class="line">| h  | j    |</span><br><span class="line">+----+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>将两个表符合条件的数据查询出来并列在一起</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1 inner join t2 on c1 &#x3D; c3;</span><br><span class="line">+----+------+----+------+</span><br><span class="line">| c1 | c2   | c3 | c4   |</span><br><span class="line">+----+------+----+------+</span><br><span class="line">| b  | c    | b  | d    |</span><br><span class="line">| c  | d    | c  | f    |</span><br><span class="line">+----+------+----+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h3><p>将两个表符合条件的数据查询出来并列在一起，不符合的数据只放置第一个表的数据，另一个表的数据置空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1 left join t2 on c1 &#x3D; c3;</span><br><span class="line">+----+------+------+------+</span><br><span class="line">| c1 | c2   | c3   | c4   |</span><br><span class="line">+----+------+------+------+</span><br><span class="line">| b  | c    | b    | d    |</span><br><span class="line">| c  | d    | c    | f    |</span><br><span class="line">| a  | b    | NULL | NULL |</span><br><span class="line">+----+------+------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h3><p>将两个表符合条件的数据查询出来并列在一起，不符合的数据只放置第二个表的数据，另一个表的数据置空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1 right join t2 on c1 &#x3D; c3;</span><br><span class="line">+------+------+----+------+</span><br><span class="line">| c1   | c2   | c3 | c4   |</span><br><span class="line">+------+------+----+------+</span><br><span class="line">| b    | c    | b  | d    |</span><br><span class="line">| c    | d    | c  | f    |</span><br><span class="line">| NULL | NULL | h  | j    |</span><br><span class="line">+------+------+----+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;There is recorded some MySQL multilist operation.&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="http://smileorigin.site/categories/Database/"/>
    
    
    <category term="Notes" scheme="http://smileorigin.site/tags/Notes/"/>
    
    <category term="MySQL" scheme="http://smileorigin.site/tags/MySQL/"/>
    
    <category term="Multilist" scheme="http://smileorigin.site/tags/Multilist/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://smileorigin.site/database/mysql/mysql/"/>
    <id>http://smileorigin.site/database/mysql/mysql/</id>
    <published>2018-08-01T08:36:00.000Z</published>
    <updated>2020-06-20T07:40:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>There is recorded some MySQL operation.</p><a id="more"></a><h2 id="Windows下连接和启动MySQL"><a href="#Windows下连接和启动MySQL" class="headerlink" title="Windows下连接和启动MySQL"></a>Windows下连接和启动MySQL</h2><ul><li><code>mysql -u root -p</code><br>  将<code>MySql</code>的安装目录下的<code>bin</code>目录设置到<code>PATH</code>环境变量下，打开CMD就能直接连接MySQL了。CMD输入<code>mysql -u root -p</code>，<code>root</code>为用户名，回车后输入密码即可进入到MySQL命令行模式<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200206011955.png"></li><li><code>net start mysql57</code><br>  运行管理员权限的<code>CMD</code>，输入命令即可启动MySQL<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200206012005.png"></li><li><code>net stop mysql57</code><br>  运行管理员权限的<code>CMD</code>，输入命令即可关闭MySQL<br>  <img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200206012013.png"></li></ul><h2 id="本文使用的部分单词说明"><a href="#本文使用的部分单词说明" class="headerlink" title="本文使用的部分单词说明"></a>本文使用的部分单词说明</h2><ul><li>db_name：数据库名称</li><li>table_name：数据表名称</li><li>old_name：要修改的字段的名称</li><li>new_name：要修改字段的新名称</li><li>column_name：列的名称</li><li>type：类型和范围，例如：varchar(2)</li><li>view_name：视图名称</li></ul><h2 id="数据库命令行操作"><a href="#数据库命令行操作" class="headerlink" title="数据库命令行操作"></a>数据库命令行操作</h2><ul><li>显示现有数据库<br>  <code>show databases;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| fruitdb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">| wehelp_test        |</span><br><span class="line">+--------------------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure></li><li>新建数据库<br>  <code>create database db_name;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database fruitsb;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>新建指定字符集类型数据库<br>  <code>create database db_name character set utf8;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database test1 character <span class="built_in">set</span> utf8;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>删除数据库<br>  <code>drop database db_name;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database fruitsb;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>修改数据库字符集<br>  <code>alter database db_name character set utf8;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter database test1 character <span class="built_in">set</span> utf8;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>切换当前使用的数据库<br>  <code>use db_name;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test1;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure></li><li>显示数据库的创建语句<br>  <code>show create table table_name;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table SCORE;</span><br><span class="line">+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Table | Create Table                                                                                                                                            |</span><br><span class="line">+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| SCORE | CREATE TABLE `SCORE` (</span><br><span class="line">`SNO` varchar(3) NOT NULL,</span><br><span class="line">`CNO` varchar(5) NOT NULL,</span><br><span class="line">`DEGREE` decimal(10,1) NOT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 |</span><br><span class="line">+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>修改密码  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">update user <span class="built_in">set</span> authentication_string=password(<span class="string">"123456"</span>) <span class="built_in">where</span> User=<span class="string">'root'</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据表命令行操作"><a href="#数据表命令行操作" class="headerlink" title="数据表命令行操作"></a>数据表命令行操作</h2><ul><li>创建数据表  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use my_test</span><br><span class="line">create table <span class="built_in">test</span>(</span><br><span class="line">id int auto_increment primary key,</span><br><span class="line">age int);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure></li><li>显示当前数据库的所有数据表<br>  <code>show tables;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_test1 |</span><br><span class="line">+-----------------+</span><br><span class="line">| <span class="built_in">test</span>            |</span><br><span class="line">| test2           |</span><br><span class="line">+-----------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>显示数据表结构<br>  <code>desc table_name;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc <span class="built_in">test</span>;</span><br><span class="line">+-------+---------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type    | Null | Key | Default | Extra          |</span><br><span class="line">+-------+---------+------+-----+---------+----------------+</span><br><span class="line">| name  | int(11) | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| age   | int(11) | YES  |     | NULL    |                |</span><br><span class="line">+-------+---------+------+-----+---------+----------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure></li><li>添加字段<br>  <code>alter table table_name add column_name type;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table <span class="built_in">test</span> add sex int(2);</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure></li><li>删除字段<br>  <code>alter table table_name drop column_name;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table <span class="built_in">test</span> drop sex;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc <span class="built_in">test</span>;</span><br><span class="line">+-------+---------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type    | Null | Key | Default | Extra          |</span><br><span class="line">+-------+---------+------+-----+---------+----------------+</span><br><span class="line">| name  | int(11) | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| age   | int(11) | YES  |     | NULL    |                |</span><br><span class="line">+-------+---------+------+-----+---------+----------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>修改字段<br>  <code>alter table table_name modify column_name type;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table <span class="built_in">test</span> modify age varchar(2);</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure></li><li>修改字段名称<br>  <code>alter table table_name change column old_name new_name type;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table <span class="built_in">test</span> change column name id int;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc <span class="built_in">test</span>;</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type       | Null | Key | Default | Extra |</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)    | NO   | PRI | NULL    |       |</span><br><span class="line">| age   | varchar(2) | YES  |     | NULL    |       |</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>修改表名  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE T_TEST RENAME TO TT;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| TT             |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="SELECT语句"><a href="#SELECT语句" class="headerlink" title="SELECT语句"></a>SELECT语句</h2><ul><li>查询所有数据：<code>select * from table_name;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+------+</span><br><span class="line">| id | age  |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | 男   |</span><br><span class="line">|  2 | 女   |</span><br><span class="line">|  3 | 中   |</span><br><span class="line">+----+------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>查询指定列数据：<code>select column_name1, column_name2, ..., column_nameN from table_name;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select age from <span class="built_in">test</span>;</span><br><span class="line">+------+</span><br><span class="line">| age  |</span><br><span class="line">+------+</span><br><span class="line">| 男   |</span><br><span class="line">| 女   |</span><br><span class="line">| 中   |</span><br><span class="line">+------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="INSERT语句"><a href="#INSERT语句" class="headerlink" title="INSERT语句"></a>INSERT语句</h2><ul><li>添加数据行<br>  <code>insert into table_name values(value1, value2, ..., valueN);</code><br>  <code>insert into table_name(column_name1, column_name2, ..., column_nameN) values(value1, value2, ..., valueN);</code>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into <span class="built_in">test</span>(id,age) value(4,<span class="string">'未知'</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  1 | 男     |</span><br><span class="line">|  2 | 女     |</span><br><span class="line">|  3 | 中     |</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">+----+--------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>添加多条数据<br>  <code>insert into table_name(column_name1, column_name2, ..., column_nameN) values(value1, value2, ..., valueN), (value1, value2, ..., valueN), ..., (value1, value2, ..., valueN); </code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into <span class="built_in">test</span> value(1,<span class="string">'男'</span>),(2,<span class="string">'女'</span>),(3,<span class="string">'中'</span>);</span><br><span class="line">Query OK, 3 rows affected (0.01 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+------+</span><br><span class="line">| id | age  |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | 男   |</span><br><span class="line">|  2 | 女   |</span><br><span class="line">|  3 | 中   |</span><br><span class="line">+----+------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="WHERE子句"><a href="#WHERE子句" class="headerlink" title="WHERE子句"></a>WHERE子句</h2><p>可用于SELECT、UPDATE、DELETE语句，可以使用AND或者OR指定一个或多个条件来自<br>（图片来自<a href="http://www.runoob.com/mysql/mysql-where-clause.html">菜鸟教程</a>）<br><img src="https://cdn.jsdelivr.net/gh/smileorigin/images/2020/20200206012949.png"></p><ul><li>指定查询的参数值：<code>select * from table_name where column_name=value; </code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">test</span> <span class="built_in">where</span> age=<span class="string">'未知'</span>;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">+----+--------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>多条件指定查询：<code>select * from table_name [where condition1 [and [or]] condition2.....; </code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">test</span> <span class="built_in">where</span> id &gt; 2 and id &lt; 5;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  3 | 中     |</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">+----+--------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="UPDATE语句"><a href="#UPDATE语句" class="headerlink" title="UPDATE语句"></a>UPDATE语句</h2><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL UPDATE 命令来操作。.</p><ul><li>语法<br>  <code>UPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause]</code><ul><li>你可以同时更新一个或多个字段。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在一个单独表中同时更新数据。</li></ul></li><li>示例：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update <span class="built_in">test</span> <span class="built_in">set</span> age=<span class="string">'xx'</span> <span class="built_in">where</span> id=2;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  1 | 男     |</span><br><span class="line">|  2 | xx     |</span><br><span class="line">|  3 | 中     |</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">+----+--------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="DELETE语句"><a href="#DELETE语句" class="headerlink" title="DELETE语句"></a>DELETE语句</h2><p>删除数据的通用语法：<code>delete from table_name [where Clause];</code></p><ul><li>删除一条数据示例  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete from <span class="built_in">test</span> <span class="built_in">where</span> id=2;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  1 | 男     |</span><br><span class="line">|  3 | 中     |</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">+----+--------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="LIKE子句"><a href="#LIKE子句" class="headerlink" title="LIKE子句"></a>LIKE子句</h2><ul><li>可以用来做模糊查询</li><li>语法<br>  以下是 SQL SELECT 语句使用 LIKE 子句从数据表中读取数据的通用语法：  <figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">SELECT</span> field1, field2,...fieldN </span><br><span class="line"><span class="meta">FROM</span> table_name</span><br><span class="line"><span class="meta">WHERE</span> field1 <span class="meta">LIKE</span> condition1 [<span class="meta">AND</span> [<span class="meta">OR</span>]] filed2 = <span class="string">'somevalue'</span></span><br></pre></td></tr></table></figure><ul><li>你可以在 WHERE 子句中指定任何条件</li><li>你可以在 WHERE 子句中使用LIKE子句</li><li>你可以使用LIKE子句代替等号 &#x3D;</li><li>LIKE 通常与 % 一同使用，类似于一个元字符的搜索</li><li>你可以使用 AND 或者 OR 指定一个或多个条件</li><li>你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件</li><li>使用’__’指定位数进行精确查询，一个下划线代表一位<br>  （本段内容来自<a href="http://www.runoob.com/mysql/mysql-like-clause.html">菜鸟教程</a>)</li></ul></li><li>使用示例：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询age字段中以‘知’结尾的数据行</span></span><br><span class="line">mysql&gt; select * from <span class="built_in">test</span> <span class="built_in">where</span> age like <span class="string">'%知'</span>;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">+----+--------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>精确查询示例：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询name字段中以Tom开头后面还有4个字符的数据行</span></span><br><span class="line">mysql&gt; select * from <span class="built_in">test</span> <span class="built_in">where</span> name like <span class="string">'Tom____'</span>;</span><br><span class="line">+------+------+---------+</span><br><span class="line">| id   | age  | name    |</span><br><span class="line">+------+------+---------+</span><br><span class="line">|    3 | 24   | TomCook |</span><br><span class="line">+------+------+---------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="ORDER-BY子句"><a href="#ORDER-BY子句" class="headerlink" title="ORDER BY子句"></a>ORDER BY子句</h2><p>当我们需对读取的数据进行排序就可以使用<code>ORDER BY</code>子句</p><ul><li>语法<br>  以下是 SQL SELECT 语句使用 ORDER BY 子句将查询数据排序后再返回数据：  <figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,<span class="params">...</span>fieldN table_name1, table_name2<span class="params">...</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> field1, <span class="meta">[</span>field2<span class="params">...</span><span class="meta">]</span> <span class="meta">[</span>ASC <span class="meta">[</span>DESC<span class="meta">]</span>]</span><br></pre></td></tr></table></figure><ul><li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li><li>你可以设定多个字段来排序。</li><li>你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li><li>你可以添加 WHERE…LIKE 子句来设置条件。<br>  （本段内容来自<a href="http://www.runoob.com/mysql/mysql-order-by.html">菜鸟教程</a>）</li></ul></li><li>使用示例：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">test</span> order by id desc;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">|  3 | 中     |</span><br><span class="line">|  1 | 男     |</span><br><span class="line">+----+--------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="GROUP-BY语句"><a href="#GROUP-BY语句" class="headerlink" title="GROUP BY语句"></a>GROUP BY语句</h2><p>GROUP BY语句根据一个或多个列对结果集进行分组</p><ul><li>语法  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, <span class="keyword">function</span>(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">operator</span> <span class="keyword">value</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column_name;</span><br></pre></td></tr></table></figure>  （本段内容来自<a href="http://www.runoob.com/mysql/mysql-group-by-statement.html">菜鸟教程</a>）</li><li>使用示例：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  1 | 男     |</span><br><span class="line">|  3 | 中     |</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">|  7 | a      |</span><br><span class="line">|  8 | a      |</span><br><span class="line">|  9 | b      |</span><br><span class="line">| 10 | 男     |</span><br><span class="line">+----+--------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select age from <span class="built_in">test</span> group by age;</span><br><span class="line">+--------+</span><br><span class="line">| age    |</span><br><span class="line">+--------+</span><br><span class="line">| a      |</span><br><span class="line">| b      |</span><br><span class="line">| 中     |</span><br><span class="line">| 未知   |</span><br><span class="line">| 男     |</span><br><span class="line">+--------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="BETWEEN语句"><a href="#BETWEEN语句" class="headerlink" title="BETWEEN语句"></a>BETWEEN语句</h2><ul><li>BETWEEN是闭区间x BETWEEN 3 AND 4  (3 &lt;&#x3D; x &lt;&#x3D; 4)</li><li>语法：<code>where column_name between value1 and value2</code>、<code>where column_name not between value1 and value2</code></li><li>示例：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">test</span> <span class="built_in">where</span> id between 2 and 10;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | age    |</span><br><span class="line">+----+--------+</span><br><span class="line">|  3 | 中     |</span><br><span class="line">|  4 | 未知   |</span><br><span class="line">|  7 | a      |</span><br><span class="line">|  8 | a      |</span><br><span class="line">|  9 | b      |</span><br><span class="line">| 10 | 男     |</span><br><span class="line">+----+--------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h2><ul><li>floor<br>  向下取整</li><li>round<br>  四舍五入</li><li>ceil<br>  向上取整</li></ul><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul><li>创建视图<br>  <code>CREATE VIEW VIEW_NAME AS SELECT COLUMN_NAME1,COLUMN_NAME2... FROM TABLE_NAME;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE VIEW V_SCORE AS SELECT * FROM SCORE;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure></li><li>读取视图数据<br>  <code>SELECT COLUMN_NAME1,COLUMN_NAME2... FROM VIEW_NAME;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM V_SCORE;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| SNO | CNO   | DEGREE |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-245 |   86.0 |</span><br><span class="line">| 105 | 3-245 |   75.0 |</span><br><span class="line">| 109 | 3-245 |   68.0 |</span><br><span class="line">| 103 | 3-105 |   92.0 |</span><br><span class="line">| 105 | 3-105 |   88.0 |</span><br><span class="line">| 109 | 3-105 |   76.0 |</span><br><span class="line">| 101 | 3-105 |   64.0 |</span><br><span class="line">| 107 | 3-105 |   91.0 |</span><br><span class="line">| 108 | 3-105 |   78.0 |</span><br><span class="line">| 101 | 6-166 |   85.0 |</span><br><span class="line">| 107 | 6-106 |   79.0 |</span><br><span class="line">| 108 | 6-166 |   81.0 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">12 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>别名创建视图<br>  <code>CREATE VIEW VIEW_NAME (ALIAS_NAME1, ALIAS_NAME2...) AS SELECT COLUMN_NAME1, COLUMN_NAME2... FROM TABLE_NAME;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE VIEW V_STUDENT(NAME, SEX) AS SELECT SNAME, SSEX FROM STUDENT;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM V_STUDENT;</span><br><span class="line">+--------+-----+</span><br><span class="line">| NAME   | SEX |</span><br><span class="line">+--------+-----+</span><br><span class="line">| 曾华   | 男  |</span><br><span class="line">| 匡明   | 男  |</span><br><span class="line">| 王丽   | 女  |</span><br><span class="line">| 李军   | 男  |</span><br><span class="line">| 王芳   | 女  |</span><br><span class="line">| 陆君   | 男  |</span><br><span class="line">+--------+-----+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>视图修改<br>  修改视图数据会影响主表数据，因为视图数据就是从主表读取的，修改视图数据相当于直接修改主表<br>  <code>CREATE OR REPLACE VIEW VIEW_NAME (COLUMN_NAME1, COLUMN_NAME2...) AS SELECT COLUMN_NAME1, COLUMN_NAME2... FROM TABLE_NAME; </code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE OR REPLACE VIEW V_SCORE (SNO, CNO) AS SELECT SNO, CNO FROM SCORE;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM V_SCORE;</span><br><span class="line">+-----+-------+</span><br><span class="line">| SNO | CNO   |</span><br><span class="line">+-----+-------+</span><br><span class="line">| 103 | 3-245 |</span><br><span class="line">| 105 | 3-245 |</span><br><span class="line">| 109 | 3-245 |</span><br><span class="line">| 103 | 3-105 |</span><br><span class="line">| 105 | 3-105 |</span><br><span class="line">| 109 | 3-105 |</span><br><span class="line">| 101 | 3-105 |</span><br><span class="line">| 107 | 3-105 |</span><br><span class="line">| 108 | 3-105 |</span><br><span class="line">| 101 | 6-166 |</span><br><span class="line">| 107 | 6-106 |</span><br><span class="line">| 108 | 6-166 |</span><br><span class="line">+-----+-------+</span><br><span class="line">12 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>删除视图<br>  <code>DROP VIEW VIEW_NAME</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP VIEW V_SCORE;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>显示视图详情<br>  <code>DESC VIEW_NAME;</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DESC V_SCORE;</span><br><span class="line">+--------+---------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type          | Null | Key | Default | Extra |</span><br><span class="line">+--------+---------------+------+-----+---------+-------+</span><br><span class="line">| SNO    | varchar(3)    | NO   |     | NULL    |       |</span><br><span class="line">| CNO    | varchar(5)    | NO   |     | NULL    |       |</span><br><span class="line">| DEGREE | decimal(10,1) | NO   |     | NULL    |       |</span><br><span class="line">+--------+---------------+------+-----+---------+-------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="MySQL执行语句返回结果"><a href="#MySQL执行语句返回结果" class="headerlink" title="MySQL执行语句返回结果"></a>MySQL执行语句返回结果</h2><h3 id="FOUND-ROWS"><a href="#FOUND-ROWS" class="headerlink" title="FOUND_ROWS()"></a><code>FOUND_ROWS()</code></h3><p>FOUND_ROWS()函数可以返回查询到的记录数目<br>A <code>SELECT</code> statement may include a <code>LIMIT</code> clause to restrict the number of rows the server returns to the client. In some cases, it is desirable to know how many rows the statement would have returned without the <code>LIMIT</code>, but without running the statement again. To obtain this row count, include an <code>SQL_CALC_FOUND_ROWS</code> option in the <code>SELECT</code> statement, and then invoke <code>FOUND_ROWS()</code> afterward</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name</span><br><span class="line">-&gt; WHERE id &gt; 100 LIMIT 10;</span><br><span class="line">mysql&gt; SELECT FOUND_ROWS();</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t_fruits;</span><br><span class="line">+----+------------+-------+-------+--------+</span><br><span class="line">| id | name       | price | count | remark |</span><br><span class="line">+----+------------+-------+-------+--------+</span><br><span class="line">|  2 | orange     |   2.0 |     2 | 橙子   |</span><br><span class="line">|  3 | watermelon |   3.0 |     3 | 西瓜   |</span><br><span class="line">|  4 | longan     |   4.0 |     4 | 龙眼   |</span><br><span class="line">|  5 | kiwis      |   2.2 |   100 |        |</span><br><span class="line">+----+------------+-------+-------+--------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select FOUND_ROWS();</span><br><span class="line">+--------------+</span><br><span class="line">| FOUND_ROWS() |</span><br><span class="line">+--------------+</span><br><span class="line">|            4 |</span><br><span class="line">+--------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="ROW-COUNT"><a href="#ROW-COUNT" class="headerlink" title="ROW_COUNT()"></a><code>ROW_COUNT()</code></h3><p>ROW_COUNT()函数可以返回受到影响的行数  </p><ol><li>DDL statements: 0. This applies to statements such as <code>CREATE TABLE</code> or <code>DROP TABLE</code>.</li><li>DML statements other than <code>SELECT</code>: The number of affected rows. This applies to statements such as <code>UPDATE</code>, <code>INSERT</code>, or <code>DELETE</code> (as before), but now also to statements such as <code>ALTER TABLE</code> and <code>LOAD DATA INFILE</code>(</li><li><code>SELECT</code>: -1 if the statement returns a result set, or the number of rows “affected” if it does not. For example, for <code>SELECT * FROM t1</code>, ROW_COUNT()  returns -1. For <code>SELECT * FROM t1 INTO OUTFILE &#39;*file_name*&#39;</code>, <code>ROW_COUNT()</code> returns the number of rows written to the file.</li><li><code>SIGNAL</code> statements: 0</li></ol><p>Example</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO t VALUES(1),(2),(3);</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT ROW_COUNT();</span><br><span class="line">+-------------+</span><br><span class="line">| ROW_COUNT() |</span><br><span class="line">+-------------+</span><br><span class="line">|           3 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELETE FROM t WHERE i IN(1,2);</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT ROW_COUNT();</span><br><span class="line">+-------------+</span><br><span class="line">| ROW_COUNT() |</span><br><span class="line">+-------------+</span><br><span class="line">|           2 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>本节内容英语说明来自官方文档</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;There is recorded some MySQL operation.&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="http://smileorigin.site/categories/Database/"/>
    
    
    <category term="Notes" scheme="http://smileorigin.site/tags/Notes/"/>
    
    <category term="MySQL" scheme="http://smileorigin.site/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>LinuxCommand</title>
    <link href="http://smileorigin.site/linux/command/"/>
    <id>http://smileorigin.site/linux/command/</id>
    <published>2018-07-12T05:51:00.000Z</published>
    <updated>2022-08-19T04:43:49.705Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些常用的 Linux 命令</p><a id="more"></a><h2 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h2><ul><li><p>安装软件<br><code>apt-get install package_name</code>——packagename为要安装的软件的包名</p></li><li><p>升级列表中的软件包的地址<br><code>apt-get update</code></p></li><li><p>升级所有已安装的软件（要先执行<code>apt-get update</code>才能确保软件都更新到最新）<br><code>apt-get upgrade</code></p></li><li><p>确认依赖的软件仓库是不是正确<br><code>apt-get check</code></p></li><li><p>从下载的软件包中清理缓存<br><code>apt-get clean</code></p></li><li><p>卸载软件<br><code>sudo apt-get remove packageName</code></p></li><li><p>自动卸载残留依赖包<br><code>sudo apt-get autoremove</code></p></li><li><p>查看文件内容<br><code>cat file1</code></p></li><li><p>查看一个文件的前2行<br><code>head -2 file1</code></p></li><li><p>查看系统信息<br><code>cat /proc/version</code></p></li><li><p>查看CPU信息<br><code>cat /proc/cpuinfo</code>、<code>lscpu</code></p></li><li><p>重启<br><code>reboot</code></p></li><li><p>注销<br><code>logout</code></p></li><li><p>关机<br><code>shutdown -h now</code></p></li><li><p>返回上一级<br><code>cd ..</code></p></li><li><p>返回上两级<br><code>cd ../..</code></p></li><li><p>返回上次所在路径<br><code>cd -</code></p></li><li><p>显示工作路径<br><code>pwd</code></p></li><li><p>查看目录中的文件<br><code>ls</code></p></li><li><p>查看目录中的文件<br><code>ls -F</code></p></li><li><p>显示文件和目录的详细资料<br><code>ls -l</code></p></li><li><p>显示隐藏文件<br><code>ls -a</code></p></li><li><p>创建文件夹<br><code>mkdir name</code></p></li><li><p>创建目录树<br><code>mkdir -p /tmp/dir1/dir2</code></p></li><li><p>删除文件<br><code>rm -f file1</code></p></li><li><p>删除文件夹<br><code>rm -rf dir1</code></p></li><li><p>移动文件夹<br><code>mv dir1 new_dir</code></p></li><li><p>复制文件<br><code>cp file1 file2</code></p></li><li><p>重命名<br><code>mv old.file new.file</code></p></li><li><p>复制一个目录下的所有文件到当前工作目录<br><code>cp dir/* .</code></p></li><li><p>修改一个文件或者目录的时间戳<br><code>touch -t 0712250000 file1</code></p></li><li><p>搜索文件和目录<br><code>find / -name filename</code></p></li><li><p>显示已经挂载的分区列表<br><code>df -h</code></p></li><li><p>估算目录占用的空间<br><code>du -sh dirname</code></p></li><li><p>解压zip压缩包<br><code>unzip file1.zip</code></p></li><li><p>解压gz压缩包<br><code>gunzip file1.gz</code></p></li><li><p>解压rar压缩包<br><code>unrar x file.rar</code></p></li><li><p>解压tgz压缩包<br><code>tar -xzvf  *.tar.gz</code></p></li><li><p>删除export的变量<br><code>unset variable_name</code></p></li></ul><h2 id="Center-OS命令"><a href="#Center-OS命令" class="headerlink" title="Center OS命令"></a>Center OS命令</h2><ul><li><p>查看防火墙状态<br><code>service firewalld status</code></p></li><li><p>关闭防火墙（重启服务器无效）<br><code> systemctl stop firewalld.service</code></p></li><li><p>彻底关闭防火墙<br><code>systemctl disable firewalld.service</code></p></li><li><p>开启防火墙<br><code>systemctl start firewalld.service</code></p></li><li><p>查看激活的连接信息(仅服务进程)<br><code>netstat -tnl</code></p></li><li><p>查看激活的连接信息(仅服务进程，包含端口信息)<br><code>netstat -tnlp</code></p></li><li><p>查看历史命令<br><code>history</code></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一些常用的 Linux 命令&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://smileorigin.site/categories/Linux/"/>
    
    
    <category term="Experience" scheme="http://smileorigin.site/tags/Experience/"/>
    
    <category term="Debian" scheme="http://smileorigin.site/tags/Debian/"/>
    
    <category term="CommandLine" scheme="http://smileorigin.site/tags/CommandLine/"/>
    
    <category term="Center OS" scheme="http://smileorigin.site/tags/Center-OS/"/>
    
  </entry>
  
</feed>
